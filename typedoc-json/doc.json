{
  "id": 0,
  "name": "@design-automation/mobius-sim",
  "kind": 1,
  "kindString": "Project",
  "flags": {},
  "originalName": "",
  "children": [
    {
      "id": 1919,
      "name": "_Output",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1920,
          "name": "Return",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_output.ts",
              "line": 10,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1921,
              "name": "Return",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return certain value from the model for the flowchart's end node",
                "returns": "Value\n",
                "tags": [
                  {
                    "tag": "summary",
                    "text": "Return a specific value"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 1922,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Model of the node."
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1923,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Index of the value to be returned."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1920
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/_output.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1912,
      "name": "_arithmetic",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1913,
          "name": "remap",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_arithmetic.ts",
              "line": 9,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1914,
              "name": "remap",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Maps a number from the d1 domain to the d2 domain."
              },
              "parameters": [
                {
                  "id": 1915,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1916,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1917,
                  "name": "d1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                },
                {
                  "id": 1918,
                  "name": "d2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1913
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_arithmetic.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1850,
      "name": "_colors",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1851,
          "name": "colFalse",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_colors.ts",
              "line": 14,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1852,
              "name": "colFalse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a colour from a value in the range between min and max."
              },
              "parameters": [
                {
                  "id": 1853,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1854,
                  "name": "vals",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1855,
                  "name": "min",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1856,
                  "name": "max",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TColor"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TColor"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1857,
          "name": "colScale",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_colors.ts",
              "line": 39,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1858,
              "name": "colScale",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a colour from a value in the range between min and max, given a Brewer color scale."
              },
              "parameters": [
                {
                  "id": 1859,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1860,
                  "name": "vals",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1861,
                  "name": "min",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1862,
                  "name": "max",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1863,
                  "name": "scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TColor"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TColor"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1851,
            1857
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_colors.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1778,
      "name": "_common",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1783,
          "name": "copy",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_common.ts",
              "line": 25,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1784,
              "name": "copy",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Makes a deep copy of a list or a dictionary."
              },
              "parameters": [
                {
                  "id": 1785,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1786,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1787,
          "name": "equal",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_common.ts",
              "line": 37,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1788,
              "name": "equal",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true of the two lists or dictionaries are equal.\nPerforms a deep comparison between values to determine if they are equivalent."
              },
              "parameters": [
                {
                  "id": 1789,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1790,
                  "name": "data1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1791,
                  "name": "data2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1779,
          "name": "len",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_common.ts",
              "line": 14,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1780,
              "name": "len",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the number of items in a list, a dictionary, or a string."
              },
              "parameters": [
                {
                  "id": 1781,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1782,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1783,
            1787,
            1779
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_common.ts",
          "line": 5,
          "character": 0
        }
      ]
    },
    {
      "id": 1885,
      "name": "_constants",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1886,
          "name": "PI",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "The mathematical constant PI, 3.141..."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 5,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "defaultValue": "..."
        },
        {
          "id": 1887,
          "name": "XY",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "A plane at the origin, aligned with the XY plane."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 9,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "TPlane"
          },
          "defaultValue": "..."
        },
        {
          "id": 1892,
          "name": "XZ",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "A plane at the origin, aligned with the XZ plane."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 29,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "TPlane"
          },
          "defaultValue": "..."
        },
        {
          "id": 1890,
          "name": "YX",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "A plane at the origin, aligned with the YX plane."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 21,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "TPlane"
          },
          "defaultValue": "..."
        },
        {
          "id": 1888,
          "name": "YZ",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "A plane at the origin, aligned with the YZ plane."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 13,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "TPlane"
          },
          "defaultValue": "..."
        },
        {
          "id": 1889,
          "name": "ZX",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "A plane at the origin, aligned with the ZX plane."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 17,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "TPlane"
          },
          "defaultValue": "..."
        },
        {
          "id": 1891,
          "name": "ZY",
          "kind": 32,
          "kindString": "Variable",
          "flags": {},
          "comment": {
            "shortText": "A plane at the origin, aligned with the ZY plane."
          },
          "sources": [
            {
              "fileName": "inline/_constants.ts",
              "line": 25,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "TPlane"
          },
          "defaultValue": "..."
        }
      ],
      "groups": [
        {
          "title": "Variables",
          "kind": 32,
          "children": [
            1886,
            1887,
            1892,
            1890,
            1888,
            1889,
            1891
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_constants.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1864,
      "name": "_conversion",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1869,
          "name": "degToRad",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_conversion.ts",
              "line": 20,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1870,
              "name": "degToRad",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts degrees to radians."
              },
              "parameters": [
                {
                  "id": 1871,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1872,
                  "name": "deg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1879,
          "name": "numToCurr",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_conversion.ts",
              "line": 60,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1880,
              "name": "numToCurr",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts the number to a string representing currency."
              },
              "parameters": [
                {
                  "id": 1881,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1882,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1883,
                  "name": "currency",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1884,
                  "name": "locale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1873,
          "name": "numToStr",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_conversion.ts",
              "line": 36,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1874,
              "name": "numToStr",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts the number to a string, with commas, e.g. 1,234,567\nConverts the number to a string, with commas, where \"d\" specifies the number of fraction digits, e.g. 1,234.00.\nConverts the number to a string, where \"d\" specifies the number of fraction digits, and \"l\" specifies the locale, e.g. \"en-GB\", \"fi-FI\", \"in-IN\", \"pt-BR\", etc'"
              },
              "parameters": [
                {
                  "id": 1875,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1876,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1877,
                  "name": "frac_digits",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1878,
                  "name": "locale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1865,
          "name": "radToDeg",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_conversion.ts",
              "line": 8,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1866,
              "name": "radToDeg",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts radians to degrees."
              },
              "parameters": [
                {
                  "id": 1867,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1868,
                  "name": "rad",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1869,
            1879,
            1873,
            1865
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_conversion.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1792,
      "name": "_dict",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1821,
          "name": "dictCopy",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 106,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1822,
              "name": "dictCopy",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a deep copy of the dictionary.",
                "text": "A deep copy means that changing values in the copied dictionary will not affect the original dictionary.\n"
              },
              "parameters": [
                {
                  "id": 1823,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1824,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ]
        },
        {
          "id": 1825,
          "name": "dictEq",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 121,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1826,
              "name": "dictEq",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the values in the two dictionaries are equal.",
                "text": "Performs a deep comparison between values to determine if they are equivalent.\n"
              },
              "parameters": [
                {
                  "id": 1827,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1828,
                  "name": "dict1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The first dictionary."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1829,
                  "name": "dict2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The second dictionary.\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1816,
          "name": "dictFind",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 89,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1817,
              "name": "dictFind",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the first key in the dictionary that has the given value.",
                "text": "If the value does not exist, returns null.\n"
              },
              "parameters": [
                {
                  "id": 1818,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1819,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 1820,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The value, can be any type.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 1793,
          "name": "dictGet",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 18,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1794,
              "name": "dictGet",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the item in the dictionary specified by key.\nIf the key does nto exist, undefined is returned.",
                "text": "If a list of keys is provided, then a list of values will be returned.\n"
              },
              "parameters": [
                {
                  "id": 1795,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1796,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 1797,
                  "name": "key",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The key, either a single string or a list of strings.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1806,
          "name": "dictHasKey",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 59,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1807,
              "name": "dictHasKey",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the dictionary contains the given key, false otherwsie.",
                "text": "If a list of keys is given, a list of true/false values will be returned.\n"
              },
              "parameters": [
                {
                  "id": 1808,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1809,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 1810,
                  "name": "key",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The key, either a string or a list of strings.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1811,
          "name": "dictHasVal",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 74,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1812,
              "name": "dictHasVal",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the dictionary contains the given value, false otherwsie."
              },
              "parameters": [
                {
                  "id": 1813,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1814,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 1815,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The value to seach for, can be any type.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1798,
          "name": "dictKeys",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 32,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1799,
              "name": "dictKeys",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns an array of all the keys in a dictionary."
              },
              "parameters": [
                {
                  "id": 1800,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1801,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        },
        {
          "id": 1802,
          "name": "dictVals",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_dict.ts",
              "line": 44,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1803,
              "name": "dictVals",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns an array of all the values in a dictionary."
              },
              "parameters": [
                {
                  "id": 1804,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1805,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dictionary.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1821,
            1825,
            1816,
            1793,
            1806,
            1811,
            1798,
            1802
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_dict.ts",
          "line": 4,
          "character": 0
        }
      ]
    },
    {
      "id": 1669,
      "name": "_geometry",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1682,
          "name": "distance",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_geometry.ts",
              "line": 55,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1683,
              "name": "distance",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the Euclidean distance between two xyzs, c1 and c2'\nReturns the Euclidean distance between an xyz c and an infinite ray r'\nReturns the Euclidean distance between an xyz c and an infinite plane p'"
              },
              "parameters": [
                {
                  "id": 1684,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1685,
                  "name": "c1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "Txyz"
                  }
                },
                {
                  "id": 1686,
                  "name": "c2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1687,
          "name": "distanceM",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_geometry.ts",
              "line": 68,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1688,
              "name": "distanceM",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the Manhattan distance between two xyzs, c1 and c2\nReturns the Manhattan distance between an xyz c and an infinite ray r'\nReturns the Manhattan distance between an xyz c and an infinite plane p'"
              },
              "parameters": [
                {
                  "id": 1689,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1690,
                  "name": "c1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "Txyz"
                  }
                },
                {
                  "id": 1691,
                  "name": "c2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1692,
          "name": "distanceMS",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_geometry.ts",
              "line": 81,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1693,
              "name": "distanceMS",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the Manhattan squared distance between two xyzs, c1 and c2\nReturns the Manhattan squared distance between an xyz c and an infinite ray r'\nReturns the Manhattan squared distance between an xyz c and an infinite plane p'"
              },
              "parameters": [
                {
                  "id": 1694,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1695,
                  "name": "c1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "Txyz"
                  }
                },
                {
                  "id": 1696,
                  "name": "c2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1670,
          "name": "intersect",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_geometry.ts",
              "line": 24,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1671,
              "name": "intersect",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the intersection xyz between two rays, where...\n['intersect(r1, r2)', 'Returns the intersection xyz between two infinite rays'],\n['intersect(r1, r2, m)', 'Returns the intersection xyz between two rays, where ' +\n'if m=2, rays are infinite in both directions, ' +\n'if m=1 rays are infinite in one direction, ' +\n'and if m=0, rays are not infinite.'],\n['intersect(r, p)', 'Returns the intersection xyz between an infinite ray r and an infinite plane p'],\n['intersect(r, p, m)', 'Returns the intersection xyz between a ray r and an infinite plane p, where ' +\n'if m=2, the ray is infinite in both directions, ' +\n'if m=1 the ray is infinite in one direction, ' +\n'and if m=0, the ray is not infinite.'],"
              },
              "parameters": [
                {
                  "id": 1672,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1673,
                  "name": "r1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "TRay"
                  }
                },
                {
                  "id": 1674,
                  "name": "r2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 1675,
                  "name": "met",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "2"
                }
              ],
              "type": {
                "type": "reference",
                "name": "Txyz"
              }
            }
          ]
        },
        {
          "id": 1676,
          "name": "project",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_geometry.ts",
              "line": 42,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1677,
              "name": "project",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the xyz from projecting an xyz c onto an infinite ray r...\n['project(c, r)', 'Returns the xyz from projecting an xyz c onto an infinite ray r'],\n['project(c, r, m)', 'Returns the xyz from projecting an xyz c onto an infinite ray r, where ' +\n'if m=2, the ray is infinite in both directions, ' +\n'if m=1 the ray is infinite in one direction, ' +\n'and if m=0, the ray is not infinite.'],\n['project(c, p)', 'Returns the xyz from projecting an xyz c onto an infinite plane p']"
              },
              "parameters": [
                {
                  "id": 1678,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1679,
                  "name": "c",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "Txyz"
                  }
                },
                {
                  "id": 1680,
                  "name": "r",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 1681,
                  "name": "met",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "2"
                }
              ],
              "type": {
                "type": "reference",
                "name": "Txyz"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1682,
            1687,
            1692,
            1670,
            1676
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_geometry.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1697,
      "name": "_list",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1709,
          "name": "listCopy",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 63,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1710,
              "name": "listCopy",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a shallow copy of the list."
              },
              "parameters": [
                {
                  "id": 1711,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1712,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list.\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1704,
          "name": "listCount",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 45,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1705,
              "name": "listCount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the number of times the value is in the list"
              },
              "parameters": [
                {
                  "id": 1706,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1707,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1708,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The value, can be aby type.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1758,
          "name": "listCull",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 241,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1759,
              "name": "listCull",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a new list of all the values that evaluate to true.",
                "text": "If the second argument is provided, then it\nreturns a new list of all the values in list1 that evaluate to true in list2.\n"
              },
              "parameters": [
                {
                  "id": 1760,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1761,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1762,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "(Optional) A list of values, to be used to cull the first list.\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1773,
          "name": "listEq",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 320,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1774,
              "name": "listEq",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the values in the two lists are equal."
              },
              "parameters": [
                {
                  "id": 1775,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1776,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The first list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1777,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The second list.\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1723,
          "name": "listFind",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 114,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1724,
              "name": "listFind",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the index of the first occurence of the value in the list.",
                "text": "If the value does not exist, returns null.\n"
              },
              "parameters": [
                {
                  "id": 1725,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1726,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1727,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The value, can be of any type.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1738,
          "name": "listFlat",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 173,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1739,
              "name": "listFlat",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a flattened copy of the list.",
                "text": "If no depth is specified, then it is flattened my the maximum amount.\n"
              },
              "parameters": [
                {
                  "id": 1740,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1741,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1742,
                  "name": "depth",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "(Optional) The depth to flatten to, an integer.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1718,
          "name": "listGet",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 96,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1719,
              "name": "listGet",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the item in the list specified by index, either a positive or negative integer."
              },
              "parameters": [
                {
                  "id": 1720,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1721,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1722,
                  "name": "idx",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The index, an integer or a list of integers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1728,
          "name": "listHas",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 131,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1729,
              "name": "listHas",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the list contains the value, false otherwise"
              },
              "parameters": [
                {
                  "id": 1730,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1731,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1732,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The value, can be any type.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1733,
          "name": "listJoin",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 148,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1734,
              "name": "listJoin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Joins two or more lists into a single list.",
                "text": "If the arguments are not lists, then they will be converted into lists.\n\nThis functions accepts any number of arguments.\n"
              },
              "parameters": [
                {
                  "id": 1735,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1736,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The first list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1737,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The second list.\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1713,
          "name": "listRep",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 76,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1714,
              "name": "listRep",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a new list that repeats the contents of the input list n times."
              },
              "parameters": [
                {
                  "id": 1715,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1716,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1717,
                  "name": "n",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1754,
          "name": "listRev",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 225,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1755,
              "name": "listRev",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a new list, with the items in reverse order."
              },
              "parameters": [
                {
                  "id": 1756,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1757,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1743,
          "name": "listRot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 192,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1744,
              "name": "listRot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return a list that is rotated, i.e. items from the end of the list are moved to the start of the list.\nFor a positive rotation, items are move from the end to the start of the list.\nFor a negative rotation, items are moved from the start to the end of the list."
              },
              "parameters": [
                {
                  "id": 1745,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1746,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1747,
                  "name": "rot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The number of items to rotate, an integer.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1748,
          "name": "listSlice",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 211,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1749,
              "name": "listSlice",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return a sub-list from the list."
              },
              "parameters": [
                {
                  "id": 1750,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1751,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1752,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The start index of the slice operation, an integer."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1753,
                  "name": "end",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "(Optional) The end index of the slice operation, an integer. Defaults to the length of the list.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1763,
          "name": "listSort",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 268,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1764,
              "name": "listSort",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a new list, with the items in sorted order.",
                "text": "If no second argument is provided, then the list is sorted in ascending order.\n\nIf a second argument is provided, then it should be a list of the same length as the first argument.\nIn this case, the first list is sorted according to ascending order of the values in the second list.\n"
              },
              "parameters": [
                {
                  "id": 1765,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1766,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1767,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1768,
          "name": "listZip",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 298,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1769,
              "name": "listZip",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts a set of lists from rows into columns.",
                "text": "If no second argument is provided, it assume the the first argument consists of a list of lists.\n\nIf a second argument is provided, then it should be a list of the same length as the first argument.\nIn this case, the items in the first and second lists are reaarranged to generate a new set of lists.\n\nThis function also accepts additional lists of arguments.\n"
              },
              "parameters": [
                {
                  "id": 1770,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1771,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The first row list."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1772,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "(Optional) The second row list, which must have the same length as the first.\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1698,
          "name": "range",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_list.ts",
              "line": 15,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1699,
              "name": "range",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a list of integers, from start to end, with a step size of 1\nGenerates a list of integers, from start to end, with a specified step size"
              },
              "parameters": [
                {
                  "id": 1700,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1701,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The start of the range, inclusive."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1702,
                  "name": "end",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "(Optional) The end of the range, exclusive."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1703,
                  "name": "step",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "(Optional) The step size.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1709,
            1704,
            1758,
            1773,
            1723,
            1738,
            1718,
            1728,
            1733,
            1713,
            1754,
            1743,
            1748,
            1763,
            1768,
            1698
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_list.ts",
          "line": 4,
          "character": 0
        }
      ]
    },
    {
      "id": 1175,
      "name": "_math",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1223,
          "name": "abs",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 249,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1224,
              "name": "abs",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the absolute value of the given number.",
                "text": "abs('-1');     // 1\nabs(-2);       // 2\nabs(null);     // 0\nabs('');       // 0\nabs([]);       // 0\nabs([2]);      // [2]\nabs([1,2]);    // [1,2]]\nabs({});       // NaN\nabs('string'); // NaN\nabs();         // NaN\n"
              },
              "parameters": [
                {
                  "id": 1225,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1226,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1247,
          "name": "acos",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 362,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1248,
              "name": "acos",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the arc-cosine (in radians) of the given number between -1 and 1; otherwise, NaN.",
                "text": "acos(-2);  // NaN\nacos(-1);  // 3.141592653589793\nacos(0);   // 1.5707963267948966\nacos(0.5); // 1.0471975511965979\nacos(1);   // 0\nacos(2);   // NaN\n"
              },
              "parameters": [
                {
                  "id": 1249,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1250,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers between -1 and 1.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1255,
          "name": "acosh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 399,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1256,
              "name": "acosh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hyperbolic arc-cosine of the given number. If the number is less than 1, NaN.",
                "text": "acosh(-1);  // NaN\nacosh(0);   // NaN\nacosh(0.5); // NaN\nacosh(1);   // 0\nacosh(2);   // 1.3169578969248166\n"
              },
              "parameters": [
                {
                  "id": 1257,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1258,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1231,
          "name": "asin",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 288,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1232,
              "name": "asin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the arcsine (in radians) of the given number if it's between -1 and 1; otherwise, NaN.",
                "text": "asin(-2);  // NaN\nasin(-1);  // -1.5707963267948966 (-pi/2)\nasin(0);   // 0\nasin(0.5); // 0.5235987755982989\nasin(1);   // 1.5707963267948966 (pi/2)\nasin(2);   // NaN\n"
              },
              "parameters": [
                {
                  "id": 1233,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1234,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers between -1 and 1.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1239,
          "name": "asinh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 322,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1240,
              "name": "asinh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hyperbolic arcsine of the given number.",
                "text": "asinh(1);  // 0.881373587019543\nasinh(0);  // 0\n"
              },
              "parameters": [
                {
                  "id": 1241,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1242,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1263,
          "name": "atan",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 438,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1264,
              "name": "atan",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the arc-tangent (in radians) of the given number.",
                "text": "atan(1);   // 0.7853981633974483\natan(0);   // 0\natan(-0);  // -0\natan(Infinity);   //  1.5707963267948966\natan(-Infinity);  // -1.5707963267948966\n\n// The angle that the line [(0,0);(x,y)] forms with the x-axis in a Cartesian coordinate system\natan(y / x);\n"
              },
              "parameters": [
                {
                  "id": 1265,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1266,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers between -1 and 1.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1267,
          "name": "atan2",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 455,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1268,
              "name": "atan2",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the angle in radians (in [-π,π]) between the positive x-axis and the ray from (0,0) to the point",
                "text": "atan2([15, 90]]); // 1.4056476493802699\natan2([90, 15]]); // 0.16514867741462683\n"
              },
              "parameters": [
                {
                  "id": 1269,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1270,
                  "name": "xy",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of two numbers [x,y] or a list of lists [[x,y], [x,y], [x,y]...].\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "tuple",
                          "elements": [
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1275,
          "name": "atanh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 495,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1276,
              "name": "atanh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hyperbolic arc-tangent of the given number.",
                "text": "atanh(-2);  // NaN\natanh(-1);  // -Infinity\natanh(0);   // 0\natanh(0.5); // 0.5493061443340548\natanh(1);   // Infinity\natanh(2);   // NaN\n"
              },
              "parameters": [
                {
                  "id": 1277,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1278,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1215,
          "name": "ceil",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 203,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1216,
              "name": "ceil",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the smallest integer greater than or equal to the given number.",
                "text": "ceil(.95);    // 1\nceil(4);      // 4\nceil(7.004);  // 8\nceil(-0.95);  // -0\nceil(-4);     // -4\nceil(-7.004); // -7\n"
              },
              "parameters": [
                {
                  "id": 1217,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1218,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1243,
          "name": "cos",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 341,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1244,
              "name": "cos",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the cosine of the given number.",
                "text": "cos(0);           // 1\ncos(1);           // 0.5403023058681398\ncos(Math.PI);     // -1\ncos(2 * PI); // 1\n"
              },
              "parameters": [
                {
                  "id": 1245,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1246,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers (in radians).\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1251,
          "name": "cosh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 379,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1252,
              "name": "cosh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hyperbolic sine (in radians) of the given number.",
                "text": "sinh(0); // 0\nsinh(1); // 1.1752011936438014\n"
              },
              "parameters": [
                {
                  "id": 1253,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1254,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers (in radians).\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1193,
          "name": "exp",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 112,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1194,
              "name": "exp",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a number representing e raised to the power of x, where e is Euler's number and x is the argument."
              },
              "parameters": [
                {
                  "id": 1195,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1196,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1219,
          "name": "floor",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 223,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1220,
              "name": "floor",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the largest integer less than or equal to the specified number.",
                "text": "floor( 45.95); //  45\nfloor( 45.05); //  45\nfloor(  4   ); //   4\nfloor(-45.05); // -46\nfloor(-45.95); // -46\n"
              },
              "parameters": [
                {
                  "id": 1221,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1222,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1197,
          "name": "log",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 126,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1198,
              "name": "log",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the natural logarithm (base e) of the given number. If the number is negative, NaN is returned."
              },
              "parameters": [
                {
                  "id": 1199,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1200,
                  "name": "base",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1201,
          "name": "log10",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 140,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1202,
              "name": "log10",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the base 10 logarithm (base e) of the given number. If the number is negative, NaN is returned."
              },
              "parameters": [
                {
                  "id": 1203,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1204,
                  "name": "base",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1180,
          "name": "max",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 64,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1181,
              "name": "max",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the largest  of the given numbers.",
                "text": "If any one or more of the parameters cannot be converted into a number, NaN is returned.\n\nmax([5,3,6,2,4])    // 6\nmax(5,3,6,2,4)    // 6\n"
              },
              "parameters": [
                {
                  "id": 1182,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1183,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of numbers, or a sequence of numbers.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1176,
          "name": "min",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 40,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1177,
              "name": "min",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the smallest of the given numbers.",
                "text": "If any one or more of the parameters cannot be converted into a number, NaN is returned.\n\nIf no parameters are provided, Infinity is returned.\n\nmin([5,3,6,2,4])    // 2\nmin(5,3,6,2,4)    // 2\n"
              },
              "parameters": [
                {
                  "id": 1178,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1179,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of numbers, or a sequence of numbers\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1184,
          "name": "pow",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 84,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1185,
              "name": "pow",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a number representing the given base taken to the power of the given exponent."
              },
              "parameters": [
                {
                  "id": 1186,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1187,
                  "name": "base",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1188,
                  "name": "xp",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The exponent used to raise the base.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1205,
          "name": "round",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 155,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1206,
              "name": "round",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "The value of the given number rounded to the nearest integer."
              },
              "parameters": [
                {
                  "id": 1207,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1208,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1209,
                  "name": "dec_pla",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The number of decimal places.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "0"
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1210,
          "name": "sigFig",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 178,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1211,
              "name": "sigFig",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the value of the given number converted to the specified number of significant figures."
              },
              "parameters": [
                {
                  "id": 1212,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1213,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1214,
                  "name": "sig_figs",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The number of significant figures.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1227,
          "name": "sin",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 267,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1228,
              "name": "sin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the sine of the given number.",
                "text": "sin(0);           // 0\nsin(1);           // 0.8414709848078965\n"
              },
              "parameters": [
                {
                  "id": 1229,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1230,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers (in radians).\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1235,
          "name": "sinh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 305,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1236,
              "name": "sinh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hyperbolic sine (in radians) of the given number.",
                "text": "sinh(0); // 0\nsinh(1); // 1.1752011936438014\n"
              },
              "parameters": [
                {
                  "id": 1237,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1238,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers (in radians).\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1189,
          "name": "sqrt",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 98,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1190,
              "name": "sqrt",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the square root of the given number. If the number is negative, NaN is returned."
              },
              "parameters": [
                {
                  "id": 1191,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1192,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1259,
          "name": "tan",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 415,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1260,
              "name": "tan",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the tangent of the given number.",
                "text": "tan(1); // 1.5574077246549023\n"
              },
              "parameters": [
                {
                  "id": 1261,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1262,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers (in radians).\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1271,
          "name": "tanh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_math.ts",
              "line": 474,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1272,
              "name": "tanh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hyperbolic tangent of the given number.",
                "text": "tanh(0);        // 0\ntanh(Infinity); // 1\ntanh(1);        // 0.7615941559557649\n"
              },
              "parameters": [
                {
                  "id": 1273,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1274,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A number or list of numbers (in radians).\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1223,
            1247,
            1255,
            1231,
            1239,
            1263,
            1267,
            1275,
            1215,
            1243,
            1251,
            1193,
            1219,
            1197,
            1201,
            1180,
            1176,
            1184,
            1205,
            1210,
            1227,
            1235,
            1189,
            1259,
            1271
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_math.ts",
          "line": 26,
          "character": 0
        }
      ]
    },
    {
      "id": 1279,
      "name": "_mathjs",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1280,
          "name": "boolean",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 7,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1281,
              "name": "boolean",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "To be completed..."
              },
              "parameters": [
                {
                  "id": 1282,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1283,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1336,
          "name": "cube",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 147,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1337,
              "name": "cube",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the cube of the number"
              },
              "parameters": [
                {
                  "id": 1338,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1339,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1324,
          "name": "hypot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 117,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1325,
              "name": "hypot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the hypotenuse of all values in a list"
              },
              "parameters": [
                {
                  "id": 1326,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1327,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1292,
          "name": "mad",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 37,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1293,
              "name": "mad",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the median absolute deviation of the list"
              },
              "parameters": [
                {
                  "id": 1294,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1295,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1296,
          "name": "mean",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 47,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1297,
              "name": "mean",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the mean value of the list"
              },
              "parameters": [
                {
                  "id": 1298,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1299,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1300,
          "name": "median",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 57,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1301,
              "name": "median",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the median of the list"
              },
              "parameters": [
                {
                  "id": 1302,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1303,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1304,
          "name": "mode",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 67,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1305,
              "name": "mode",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the mode of the list"
              },
              "parameters": [
                {
                  "id": 1306,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1307,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1328,
          "name": "norm",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 127,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1329,
              "name": "norm",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the norm of a list"
              },
              "parameters": [
                {
                  "id": 1330,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1331,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1284,
          "name": "number",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 17,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1285,
              "name": "number",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "To be completed..."
              },
              "parameters": [
                {
                  "id": 1286,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1287,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1308,
          "name": "prod",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 77,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1309,
              "name": "prod",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the product of all values in a list"
              },
              "parameters": [
                {
                  "id": 1310,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1311,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1332,
          "name": "square",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 137,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1333,
              "name": "square",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the square of the number"
              },
              "parameters": [
                {
                  "id": 1334,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1335,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1312,
          "name": "std",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 87,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1313,
              "name": "std",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the standard deviation of the list"
              },
              "parameters": [
                {
                  "id": 1314,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1315,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1288,
          "name": "string",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 27,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1289,
              "name": "string",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "To be completed..."
              },
              "parameters": [
                {
                  "id": 1290,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1291,
                  "name": "val",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1320,
          "name": "sum",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 107,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1321,
              "name": "sum",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the sum of all values in a list"
              },
              "parameters": [
                {
                  "id": 1322,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1323,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 1316,
          "name": "vari",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_mathjs.ts",
              "line": 97,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1317,
              "name": "vari",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the variance of the list"
              },
              "parameters": [
                {
                  "id": 1318,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1319,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1280,
            1336,
            1324,
            1292,
            1296,
            1300,
            1304,
            1328,
            1284,
            1308,
            1332,
            1312,
            1288,
            1320,
            1316
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_mathjs.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1,
      "name": "_model",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 25,
          "name": "__checkModel__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 120,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 26,
              "name": "__checkModel__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Checks the model for internal consistency."
              },
              "parameters": [
                {
                  "id": 27,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        },
        {
          "id": 14,
          "name": "__clone__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 57,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 15,
              "name": "__clone__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Clone a model."
              },
              "parameters": [
                {
                  "id": 16,
                  "name": "model",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The model to clone.\n"
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "GIModel"
              }
            }
          ]
        },
        {
          "id": 10,
          "name": "__merge__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 47,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 11,
              "name": "__merge__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Merges the second model into the first model. The geometry, attribues, and groups are all merged.\nIf the models contain contain groups with the same names, then the groups will be merged."
              },
              "parameters": [
                {
                  "id": 12,
                  "name": "model1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The model to merge into."
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 13,
                  "name": "model2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The model to merge from    .\n"
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 2,
          "name": "__new__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 13,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 3,
              "name": "__new__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a new empty model.",
                "returns": "New model empty.\n"
              },
              "type": {
                "type": "reference",
                "name": "GIModel"
              }
            }
          ]
        },
        {
          "id": 7,
          "name": "__postprocess__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 35,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 8,
              "name": "__postprocess__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "A function to postprocess the model, after it enters the node."
              },
              "parameters": [
                {
                  "id": 9,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 4,
          "name": "__preprocess__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 26,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 5,
              "name": "__preprocess__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "A function to preprocess the model, before it enters the node.\nIn cases where there is more than one model connected to a node,\nthe preprocess function will be called before the merge function."
              },
              "parameters": [
                {
                  "id": 6,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 20,
          "name": "__select__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 75,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 21,
              "name": "__select__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Select entities in the model."
              },
              "parameters": [
                {
                  "id": 22,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 23,
                  "name": "ents_id",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 24,
                  "name": "var_name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 17,
          "name": "__stringify__",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/_model.ts",
              "line": 66,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 18,
              "name": "__stringify__",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a string representation of this model."
              },
              "parameters": [
                {
                  "id": 19,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            25,
            14,
            10,
            2,
            7,
            4,
            20,
            17
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/_model.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1623,
      "name": "_plane",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1630,
          "name": "plnCopy",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 66,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1631,
              "name": "plnCopy",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Make a copy of the plane \"p\""
              },
              "parameters": [
                {
                  "id": 1632,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1633,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1665,
          "name": "plnFromRay",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 300,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1666,
              "name": "plnFromRay",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generate a plane from a ray..."
              },
              "parameters": [
                {
                  "id": 1667,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1668,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1645,
          "name": "plnLMove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 154,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1646,
              "name": "plnLMove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Move the plane \"p\" relative to the local X, Y, and Z axes, by vector \"v\"."
              },
              "parameters": [
                {
                  "id": 1647,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1648,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1649,
                  "name": "vec",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1650,
          "name": "plnLRotX",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 191,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1651,
              "name": "plnLRotX",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotate the plane \"p\" around the local X axis, by angle \"a\" (in radians)."
              },
              "parameters": [
                {
                  "id": 1652,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1653,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1654,
                  "name": "ang",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1655,
          "name": "plnLRotY",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 227,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1656,
              "name": "plnLRotY",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotate the plane \"p\" around the local Y axis, by angle \"a\" (in radians)."
              },
              "parameters": [
                {
                  "id": 1657,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1658,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1659,
                  "name": "ang",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1660,
          "name": "plnLRotZ",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 263,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1661,
              "name": "plnLRotZ",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotate the plane \"p\" around the local Z axis, by angle \"a\" (in radians)."
              },
              "parameters": [
                {
                  "id": 1662,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1663,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1664,
                  "name": "ang",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1624,
          "name": "plnMake",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 21,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1625,
              "name": "plnMake",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a plane from an origin \"o\", an \"x\" axis vector, and any other vector in the \"xy\" plane."
              },
              "parameters": [
                {
                  "id": 1626,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1627,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1628,
                  "name": "x_vec",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1629,
                  "name": "xy_vec",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1634,
          "name": "plnMove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 82,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1635,
              "name": "plnMove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Move the plane \"p\" relative to the global X, Y, and Z axes, by vector \"v\"."
              },
              "parameters": [
                {
                  "id": 1636,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1637,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1638,
                  "name": "vec",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1639,
          "name": "plnRot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_plane.ts",
              "line": 115,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1640,
              "name": "plnRot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotate the plane \"p\" around the ray \"r\", by angle \"a\" (in radians)."
              },
              "parameters": [
                {
                  "id": 1641,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1642,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1643,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1644,
                  "name": "ang",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1630,
            1665,
            1645,
            1650,
            1655,
            1660,
            1624,
            1634,
            1639
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_plane.ts",
          "line": 9,
          "character": 0
        }
      ]
    },
    {
      "id": 1466,
      "name": "_rand",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1467,
          "name": "rand",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_rand.ts",
              "line": 10,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1468,
              "name": "rand",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a random number in the specified range\nReturns a random number in the specified range, given a numeric seed"
              },
              "parameters": [
                {
                  "id": 1469,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1470,
                  "name": "min",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1471,
                  "name": "max",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1472,
                  "name": "seed",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1473,
          "name": "randInt",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_rand.ts",
              "line": 27,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1474,
              "name": "randInt",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a random integer in the specified range\nReturns a random integer in the specified range, given a numeric seed"
              },
              "parameters": [
                {
                  "id": 1475,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1476,
                  "name": "min",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1477,
                  "name": "max",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1478,
                  "name": "seed",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 1479,
          "name": "randPick",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_rand.ts",
              "line": 44,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1480,
              "name": "randPick",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a random set of items from the list\nReturns a random set of items from the list, given a numeric seed"
              },
              "parameters": [
                {
                  "id": 1481,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1482,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1483,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1484,
                  "name": "seed",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1467,
            1473,
            1479
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_rand.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1577,
      "name": "_ray",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1589,
          "name": "rayCopy",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 85,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1590,
              "name": "rayCopy",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Make a copy of the ray \"r\""
              },
              "parameters": [
                {
                  "id": 1591,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1592,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1609,
          "name": "rayFromPln",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 204,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1610,
              "name": "rayFromPln",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a ray from a plane \"p\", with the same origin and with a direction along the plane z axis."
              },
              "parameters": [
                {
                  "id": 1611,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1612,
                  "name": "pln",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1584,
          "name": "rayFromTo",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 50,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1585,
              "name": "rayFromTo",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a ray between to points."
              },
              "parameters": [
                {
                  "id": 1586,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1587,
                  "name": "xyz1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1588,
                  "name": "xyz2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1618,
          "name": "rayGtoL",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 231,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1619,
              "name": "rayGtoL",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Transforms a ray from the global coordinate system to a local coordinate system define by plane \"p\"."
              },
              "parameters": [
                {
                  "id": 1620,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1621,
                  "name": "r",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1622,
                  "name": "p",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1604,
          "name": "rayLMove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 172,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1605,
              "name": "rayLMove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Move the ray \"r\" relative to the ray direction vector, by distance \"d\"."
              },
              "parameters": [
                {
                  "id": 1606,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1607,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1608,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1613,
          "name": "rayLtoG",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 220,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1614,
              "name": "rayLtoG",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Transforms a ray from a local coordinate system define by plane \"p\" to the global coordinate system."
              },
              "parameters": [
                {
                  "id": 1615,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1616,
                  "name": "r",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1617,
                  "name": "p",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1578,
          "name": "rayMake",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 14,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1579,
              "name": "rayMake",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a ray from an origin \"o\" and a direction vector \"d\".\nCreates a ray from an origin \"o\", a direction vector \"d\", and length \"l\"."
              },
              "parameters": [
                {
                  "id": 1580,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1581,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1582,
                  "name": "dir",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1583,
                  "name": "len",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1593,
          "name": "rayMove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 100,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1594,
              "name": "rayMove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Move the ray \"r\" relative to the global X, Y, and Z axes, by vector \"v\"."
              },
              "parameters": [
                {
                  "id": 1595,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1596,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1597,
                  "name": "vec",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1598,
          "name": "rayRot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_ray.ts",
              "line": 133,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1599,
              "name": "rayRot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotate the ray \"r1\" around the ray \"r2\", by angle \"a\" (in radians)."
              },
              "parameters": [
                {
                  "id": 1600,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1601,
                  "name": "ray1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1602,
                  "name": "ray2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1603,
                  "name": "ang",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1589,
            1609,
            1584,
            1618,
            1604,
            1613,
            1578,
            1593,
            1598
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_ray.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1830,
      "name": "_set",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1845,
          "name": "setDif",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_set.ts",
              "line": 44,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1846,
              "name": "setDif",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a list of unique items from the difference of the two input lists."
              },
              "parameters": [
                {
                  "id": 1847,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1848,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1849,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1840,
          "name": "setInt",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_set.ts",
              "line": 33,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1841,
              "name": "setInt",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a list of unique items from the intersection of the two input lists."
              },
              "parameters": [
                {
                  "id": 1842,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1843,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1844,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1831,
          "name": "setMake",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_set.ts",
              "line": 11,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1832,
              "name": "setMake",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a list of unique items."
              },
              "parameters": [
                {
                  "id": 1833,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1834,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 1835,
          "name": "setUni",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_set.ts",
              "line": 22,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1836,
              "name": "setUni",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a list of unique items from the union of the two input lists."
              },
              "parameters": [
                {
                  "id": 1837,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1838,
                  "name": "list1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 1839,
                  "name": "list2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1845,
            1840,
            1831,
            1835
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_set.ts",
          "line": 5,
          "character": 0
        }
      ]
    },
    {
      "id": 1411,
      "name": "_strs",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1461,
          "name": "strEnds",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 150,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1462,
              "name": "strEnds",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the string s1 ends with s2, false otherwise."
              },
              "parameters": [
                {
                  "id": 1463,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1464,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1465,
                  "name": "ends",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1422,
          "name": "strLow",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 51,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1423,
              "name": "strLow",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts all the alphabetic characters in a string to lowercase."
              },
              "parameters": [
                {
                  "id": 1424,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1425,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1438,
          "name": "strPadL",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 98,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1439,
              "name": "strPadL",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Pads the start of the s1 string with white spaces so that the resulting string reaches a given length.\nPads the start of the s1 string with the s2 string so that the resulting string reaches a given length."
              },
              "parameters": [
                {
                  "id": 1440,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1441,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1442,
                  "name": "max",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1443,
                  "name": "fill",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1444,
          "name": "strPadR",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 112,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1445,
              "name": "strPadR",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Pads the end of the s1 string with white spaces so that the resulting string reaches a given length.\nPads the end of the s1 string with the s2 string so that the resulting string reaches a given length."
              },
              "parameters": [
                {
                  "id": 1446,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1447,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1448,
                  "name": "max",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1449,
                  "name": "fill",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1412,
          "name": "strRepl",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 29,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1413,
              "name": "strRepl",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Replace all instances of specified search string with a new string. The search string can be a regular expression."
              },
              "parameters": [
                {
                  "id": 1414,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1415,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1416,
                  "name": "search_str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1417,
                  "name": "new_str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1456,
          "name": "strStarts",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 138,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1457,
              "name": "strStarts",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the string s1 starts with s2, false otherwise."
              },
              "parameters": [
                {
                  "id": 1458,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1459,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1460,
                  "name": "starts",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1450,
          "name": "strSub",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 126,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1451,
              "name": "strSub",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Gets a substring beginning at the specified location.\nGets a substring beginning at the specified location and having the specified length."
              },
              "parameters": [
                {
                  "id": 1452,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1453,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1454,
                  "name": "from",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1455,
                  "name": "length",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1426,
          "name": "strTrim",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 62,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1427,
              "name": "strTrim",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes the leading and trailing white space and line terminator characters from a string."
              },
              "parameters": [
                {
                  "id": 1428,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1429,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1434,
          "name": "strTrimL",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 84,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1435,
              "name": "strTrimL",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes whitespace from the left end of a string."
              },
              "parameters": [
                {
                  "id": 1436,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1437,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1430,
          "name": "strTrimR",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 73,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1431,
              "name": "strTrimR",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes whitespace from the right end of a string."
              },
              "parameters": [
                {
                  "id": 1432,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1433,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1418,
          "name": "strUpp",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_strs.ts",
              "line": 40,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1419,
              "name": "strUpp",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Converts all the alphabetic characters in a string to uppercase."
              },
              "parameters": [
                {
                  "id": 1420,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1421,
                  "name": "str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1461,
            1422,
            1438,
            1444,
            1412,
            1456,
            1450,
            1426,
            1434,
            1430,
            1418
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_strs.ts",
          "line": 5,
          "character": 0
        }
      ]
    },
    {
      "id": 1340,
      "name": "_types",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "Functions to check types."
      },
      "children": [
        {
          "id": 1401,
          "name": "_isIn",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 137,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1402,
              "name": "_isIn",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "To be completed..."
              },
              "parameters": [
                {
                  "id": 1403,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1404,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1405,
                  "name": "v3",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1406,
          "name": "_isWithin",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 147,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1407,
              "name": "_isWithin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "To be completed..."
              },
              "parameters": [
                {
                  "id": 1408,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1409,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1410,
                  "name": "v3",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1353,
          "name": "isBool",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 48,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1354,
              "name": "isBool",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a boolean, false otherwise."
              },
              "parameters": [
                {
                  "id": 1355,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1356,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1377,
          "name": "isCol",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 93,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1378,
              "name": "isCol",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a list of three numbers in the range [0, 1], false otherwise."
              },
              "parameters": [
                {
                  "id": 1379,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1380,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1365,
          "name": "isDict",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 69,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1366,
              "name": "isDict",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a dictionary, false otherwise."
              },
              "parameters": [
                {
                  "id": 1367,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1368,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1349,
          "name": "isFlt",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 40,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1350,
              "name": "isFlt",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a floating point number, false otherwise."
              },
              "parameters": [
                {
                  "id": 1351,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1352,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1345,
          "name": "isInt",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 33,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1346,
              "name": "isInt",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a integer, false otherwise."
              },
              "parameters": [
                {
                  "id": 1347,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1348,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1361,
          "name": "isList",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 62,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1362,
              "name": "isList",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a list, false otherwise."
              },
              "parameters": [
                {
                  "id": 1363,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1364,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1389,
          "name": "isNaN",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 114,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1390,
              "name": "isNaN",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true is the value is not a number (NaN), false otherwise."
              },
              "parameters": [
                {
                  "id": 1391,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1392,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1393,
          "name": "isNull",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 121,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1394,
              "name": "isNull",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true is the value is null, false otherwise."
              },
              "parameters": [
                {
                  "id": 1395,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1396,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1341,
          "name": "isNum",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 26,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1342,
              "name": "isNum",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a number, false otherwise."
              },
              "parameters": [
                {
                  "id": 1343,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1344,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1385,
          "name": "isPln",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 107,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1386,
              "name": "isPln",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a plane, false otherwise."
              },
              "parameters": [
                {
                  "id": 1387,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1388,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1381,
          "name": "isRay",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 100,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1382,
              "name": "isRay",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a ray, false otherwise."
              },
              "parameters": [
                {
                  "id": 1383,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1384,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1357,
          "name": "isStr",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 55,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1358,
              "name": "isStr",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a string, false otherwise."
              },
              "parameters": [
                {
                  "id": 1359,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1360,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1397,
          "name": "isUndef",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 128,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1398,
              "name": "isUndef",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true is the value is undefined, false otherwise."
              },
              "parameters": [
                {
                  "id": 1399,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1400,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1369,
          "name": "isVec2",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 77,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1370,
              "name": "isVec2",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a list of two numbers, false otherwise."
              },
              "parameters": [
                {
                  "id": 1371,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1372,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1373,
          "name": "isVec3",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_types.ts",
              "line": 85,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1374,
              "name": "isVec3",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the value is a list of three numbers, false otherwise."
              },
              "parameters": [
                {
                  "id": 1375,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1376,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1401,
            1406,
            1353,
            1377,
            1365,
            1349,
            1345,
            1361,
            1389,
            1393,
            1341,
            1385,
            1381,
            1357,
            1397,
            1369,
            1373
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_types.ts",
          "line": 26,
          "character": 0
        }
      ]
    },
    {
      "id": 1893,
      "name": "_util",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1894,
          "name": "isApprox",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_util.ts",
              "line": 9,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1895,
              "name": "isApprox",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the absolute difference between the two numbers is less than the tolerance, t"
              },
              "parameters": [
                {
                  "id": 1896,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1897,
                  "name": "n1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1898,
                  "name": "n2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1899,
                  "name": "t",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1900,
          "name": "isIn",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_util.ts",
              "line": 21,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1901,
              "name": "isIn",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns v1 < v2 < v3."
              },
              "parameters": [
                {
                  "id": 1902,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1903,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1904,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1905,
                  "name": "v3",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        },
        {
          "id": 1906,
          "name": "isWithin",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_util.ts",
              "line": 34,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1907,
              "name": "isWithin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns v1 <= v2 <= v3."
              },
              "parameters": [
                {
                  "id": 1908,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1909,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1910,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 1911,
                  "name": "v3",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1894,
            1900,
            1906
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_util.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 1485,
      "name": "_vec",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "children": [
        {
          "id": 1490,
          "name": "vecAdd",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 51,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1491,
              "name": "vecAdd",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds two vectors"
              },
              "parameters": [
                {
                  "id": 1492,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1493,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1494,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1495,
                  "name": "norm",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1527,
          "name": "vecAng",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 316,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1528,
              "name": "vecAng",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculate the angle (0 to PI) between two vectors.\n\\n\nThe inner (smaller) angle is always returned, which will always be smaller than or equal to PI."
              },
              "parameters": [
                {
                  "id": 1529,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1530,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1531,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1543,
          "name": "vecAng2",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 432,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1544,
              "name": "vecAng2",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculate the angle (0 to 2PI) between two vectors, relative to the plane normal.\n\\n\nUnlike the vecAng() function, this funtion may return an angle larger than PI.\n\\n\nThe function calculates the angle from the first vector to the second vector\nin a counter-clockwise direction, assuming the normal is pointing up towards the viewer.\n\\n"
              },
              "parameters": [
                {
                  "id": 1545,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1546,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1547,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1548,
                  "name": "v3",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1522,
          "name": "vecCross",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 277,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1523,
              "name": "vecCross",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the cross product of two vectors"
              },
              "parameters": [
                {
                  "id": 1524,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1525,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1526,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1502,
          "name": "vecDiv",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 126,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1503,
              "name": "vecDiv",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Divides a vector by a numbe"
              },
              "parameters": [
                {
                  "id": 1504,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1505,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1506,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1517,
          "name": "vecDot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 240,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1518,
              "name": "vecDot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the dot product of two vectors"
              },
              "parameters": [
                {
                  "id": 1519,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1520,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1521,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1537,
          "name": "vecEqual",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 391,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1538,
              "name": "vecEqual",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if the difference between two vectors is smaller than a specified tolerance"
              },
              "parameters": [
                {
                  "id": 1539,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1540,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1541,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1542,
                  "name": "tol",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1532,
          "name": "vecFromTo",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 353,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1533,
              "name": "vecFromTo",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a vector between two points"
              },
              "parameters": [
                {
                  "id": 1534,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1535,
                  "name": "xyz1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1536,
                  "name": "xyz2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1572,
          "name": "vecGtoL",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 654,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1573,
              "name": "vecGtoL",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Transforms a vector from the global coordinate system to a local coordinate system define by plane \"p\"."
              },
              "parameters": [
                {
                  "id": 1574,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1575,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1576,
                  "name": "p",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1555,
          "name": "vecLen",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 590,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1556,
              "name": "vecLen",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the magnitude of a vector"
              },
              "parameters": [
                {
                  "id": 1557,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1558,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1567,
          "name": "vecLtoG",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 643,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1568,
              "name": "vecLtoG",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Transforms a vector from a local coordinate system define by plane \"p\" to the global coordinate system."
              },
              "parameters": [
                {
                  "id": 1569,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1570,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1571,
                  "name": "p",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1507,
          "name": "vecMult",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 164,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1508,
              "name": "vecMult",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Multiplies a vector by a number"
              },
              "parameters": [
                {
                  "id": 1509,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1510,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1511,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1559,
          "name": "vecNorm",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 608,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1560,
              "name": "vecNorm",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets the magnitude of a vector to 1"
              },
              "parameters": [
                {
                  "id": 1561,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1562,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1563,
          "name": "vecRev",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 625,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1564,
              "name": "vecRev",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Reverses the direction of a vector"
              },
              "parameters": [
                {
                  "id": 1565,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1566,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1549,
          "name": "vecRot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 511,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1550,
              "name": "vecRot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotates one vector around another vector."
              },
              "parameters": [
                {
                  "id": 1551,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1552,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1553,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1554,
                  "name": "ang",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1512,
          "name": "vecSetLen",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 202,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1513,
              "name": "vecSetLen",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets the magnitude of a vector"
              },
              "parameters": [
                {
                  "id": 1514,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1515,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1516,
                  "name": "num",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1496,
          "name": "vecSub",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 89,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1497,
              "name": "vecSub",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Subtracts v2 from v1"
              },
              "parameters": [
                {
                  "id": 1498,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1499,
                  "name": "v1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1500,
                  "name": "v2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1501,
                  "name": "norm",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1486,
          "name": "vecSum",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "inline/_vec.ts",
              "line": 30,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1487,
              "name": "vecSum",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Add multiple vectors"
              },
              "parameters": [
                {
                  "id": 1488,
                  "name": "debug",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                },
                {
                  "id": 1489,
                  "name": "v",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isRest": true
                  },
                  "comment": {
                    "shortText": "\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "Txyz"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1490,
            1527,
            1543,
            1522,
            1502,
            1517,
            1537,
            1532,
            1572,
            1555,
            1567,
            1507,
            1559,
            1563,
            1549,
            1512,
            1496,
            1486
          ]
        }
      ],
      "sources": [
        {
          "fileName": "inline/_vec.ts",
          "line": 1,
          "character": 0
        }
      ]
    },
    {
      "id": 603,
      "name": "analyze",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `analysis` module has functions for performing various types of analysis with entities in\nthe model. These functions all return dictionaries containing the results of the analysis."
      },
      "children": [
        {
          "id": 709,
          "name": "_ECentralityMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 711,
              "name": "DIRECTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1677,
                  "character": 4
                }
              ],
              "defaultValue": "\"directed\""
            },
            {
              "id": 710,
              "name": "UNDIRECTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1676,
                  "character": 4
                }
              ],
              "defaultValue": "\"undirected\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                711,
                710
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1675,
              "character": 12
            }
          ]
        },
        {
          "id": 712,
          "name": "_ECentralityType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 713,
              "name": "BETWEENNESS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1887,
                  "character": 4
                }
              ],
              "defaultValue": "\"betweenness\""
            },
            {
              "id": 714,
              "name": "CLOSENESS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1888,
                  "character": 4
                }
              ],
              "defaultValue": "\"closeness\""
            },
            {
              "id": 715,
              "name": "HARMONIC",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1889,
                  "character": 4
                }
              ],
              "defaultValue": "\"harmonic\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                713,
                714,
                715
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1886,
              "character": 12
            }
          ]
        },
        {
          "id": 682,
          "name": "_ERaytraceMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 687,
              "name": "ALL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 47,
                  "character": 4
                }
              ],
              "defaultValue": "\"all\""
            },
            {
              "id": 684,
              "name": "DISTANCES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 44,
                  "character": 4
                }
              ],
              "defaultValue": "\"distances\""
            },
            {
              "id": 685,
              "name": "HIT_PGONS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 45,
                  "character": 4
                }
              ],
              "defaultValue": "\"hit_pgons\""
            },
            {
              "id": 686,
              "name": "INTERSECTIONS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 46,
                  "character": 4
                }
              ],
              "defaultValue": "\"intersections\""
            },
            {
              "id": 683,
              "name": "STATS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 43,
                  "character": 4
                }
              ],
              "defaultValue": "\"stats\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                687,
                684,
                685,
                686,
                683
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 42,
              "character": 12
            }
          ]
        },
        {
          "id": 701,
          "name": "_EShortestPathMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 703,
              "name": "DIRECTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1164,
                  "character": 4
                }
              ],
              "defaultValue": "\"directed\""
            },
            {
              "id": 702,
              "name": "UNDIRECTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1163,
                  "character": 4
                }
              ],
              "defaultValue": "\"undirected\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                703,
                702
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1162,
              "character": 12
            }
          ]
        },
        {
          "id": 704,
          "name": "_EShortestPathResult",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 708,
              "name": "ALL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1170,
                  "character": 4
                }
              ],
              "defaultValue": "\"all\""
            },
            {
              "id": 706,
              "name": "COUNTS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1168,
                  "character": 4
                }
              ],
              "defaultValue": "\"counts\""
            },
            {
              "id": 705,
              "name": "DISTS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1167,
                  "character": 4
                }
              ],
              "defaultValue": "\"distances\""
            },
            {
              "id": 707,
              "name": "PATHS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 1169,
                  "character": 4
                }
              ],
              "defaultValue": "\"paths\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                708,
                706,
                705,
                707
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1166,
              "character": 12
            }
          ]
        },
        {
          "id": 688,
          "name": "_ESkyMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 691,
              "name": "ALL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 411,
                  "character": 4
                }
              ],
              "defaultValue": "\"all\""
            },
            {
              "id": 690,
              "name": "UNWEIGHTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 410,
                  "character": 4
                }
              ],
              "defaultValue": "\"unweighted\""
            },
            {
              "id": 689,
              "name": "WEIGHTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 409,
                  "character": 4
                }
              ],
              "defaultValue": "\"weighted\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                691,
                690,
                689
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 408,
              "character": 12
            }
          ]
        },
        {
          "id": 692,
          "name": "_ESolarMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 694,
              "name": "DIRECT_UNWEIGHTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 536,
                  "character": 4
                }
              ],
              "defaultValue": "\"direct_unweighted\""
            },
            {
              "id": 693,
              "name": "DIRECT_WEIGHTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 535,
                  "character": 4
                }
              ],
              "defaultValue": "\"direct_weighted\""
            },
            {
              "id": 696,
              "name": "INDIRECT_UNWEIGHTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 538,
                  "character": 4
                }
              ],
              "defaultValue": "\"indirect_unweighted\""
            },
            {
              "id": 695,
              "name": "INDIRECT_WEIGHTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 537,
                  "character": 4
                }
              ],
              "defaultValue": "\"indirect_weighted\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                694,
                693,
                696,
                695
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 534,
              "character": 12
            }
          ]
        },
        {
          "id": 697,
          "name": "_ESunPathMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 698,
              "name": "DIRECT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 891,
                  "character": 4
                }
              ],
              "defaultValue": "\"direct\""
            },
            {
              "id": 699,
              "name": "INDIRECT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 892,
                  "character": 4
                }
              ],
              "defaultValue": "\"indirect\""
            },
            {
              "id": 700,
              "name": "SKY",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/analyze.ts",
                  "line": 893,
                  "character": 4
                }
              ],
              "defaultValue": "\"sky\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                698,
                699,
                700
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 890,
              "character": 12
            }
          ]
        },
        {
          "id": 675,
          "name": "Centrality",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1935,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 676,
              "name": "Centrality",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates betweenness, closeness, and harmonic centrality\nfor positions in a network. Values are normalized in the range 0 to 1.\n\\n\nThe network is defined by a set of connected edges, consisting of polylines and/or polygons.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nCentralities are calculate based on distances between positions.\nThe distance between two positions is the shortest path between those positions.\nThe shortest path is the path where the sum of the weights of the edges along the path is the minimum.\n\\n\nDefault weight is 1 for all edges. Weights can be specified using an attribute called 'weight' on edges.\n\\n\nCloseness centrality is calculated by inverting the sum of the distances to all other positions.\n\\n\nHarmonic centrality is calculated by summing up the inverted distances to all other positions.\n\\n\nBetweenness centrality os calculated in two steps.\nFirst, the shortest path between every pair of nodes is calculated.\nSecond, the betweenness centrality of each node is then the total number of times the node is traversed\nby the shortest paths.\n\\n\nFor closeness centrality, the network is first split up into connected sub-networks.\nThis is because closeness centrality cannot be calculated on networks that are not fully connected.\nThe closeness centrality is then calculated for each sub-network seperately.\n\\n\nFor harmonic centrality, care must be taken when defining custom weights.\nWeight with zero values or very small values will result in errors or will distort the results.\nThis is due to the inversion operation: 1 / weight.\n\\n\nReturns a dictionary containing the results.\n\\n\n1. 'posis': a list of position IDs.\n2. 'centrality': a list of numbers, the values for centrality, either betweenness, closeness, or harmonic.\n\\n",
                "returns": "A list of centrality values, between 0 and 1.\n"
              },
              "parameters": [
                {
                  "id": 677,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 678,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can be extracted.\nThese positions should be part of the network."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 679,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The network, edges, or entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 680,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method to use, directed or undirected."
                  },
                  "type": {
                    "type": "reference",
                    "id": 709,
                    "name": "_ECentralityMethod"
                  }
                },
                {
                  "id": 681,
                  "name": "cen_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the data to return, positions, edges, or both."
                  },
                  "type": {
                    "type": "reference",
                    "id": 712,
                    "name": "_ECentralityType"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 660,
          "name": "ClosestPath",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1514,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 661,
              "name": "ClosestPath",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the shortest path from every position in source, to the closest position in target.\n\\n\nThis differs from the 'analyze.ShortestPath()' function. If you specify multiple target positions,\nfor each cource position,\nthe 'analyze.ShortestPath()' function will calculate multiple shortest paths,\ni.e. the shortest path to all targets.\nThis function will caculate just one shortest path,\ni.e. the shortest path to the closest target.\n\\n\nPaths are calculated through a network of connected edges.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nIf 'directed' is selected, then the edge direction is taken into account. Each edge will be one-way.\nIf 'undirected' is selected, the edge direction is ignored. Each edge will be two-way.\n\\n\nEach edge can be assigned a weight.\nThe shortest path is the path where the sum of the weights of the edges along the path is the minimum.\n\\n\nBy default, all edges are assigned a weight of 1.\nDefault weights can be overridden by creating a numeric attribute on edges call 'weight'.\n\\n\nReturns a dictionary containing the shortes paths.\n\\n\nIf 'distances' is selected, the dictionary will contain one list:\n1. 'distances': a list of distances.\n\\n\nIf 'counts' is selected, the dictionary will contain four lists:\n1. 'posis': a list of positions traversed by the paths,\n2. 'posis_count': a list of numbers that count how often each position was traversed.\n3. 'edges': a list of edges traversed by the paths,\n4. 'edges_count': a list of numbers that count how often each edge was traversed.\n\\n\nIf 'paths' is selected, the dictionary will contain two lists of lists:\n1. 'posi_paths': a list of lists of positions, one list for each path.\n2. 'edge_paths': a list of lists of edges, one list for each path.\n\\n\nIf 'all' is selected, the dictionary will contain all lists just described.\n\\n",
                "returns": "A dictionary containing the results.\n"
              },
              "parameters": [
                {
                  "id": 662,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 663,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Path source, a list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 664,
                  "name": "target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Path source, a list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 665,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The network, edges, or entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 666,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method to use, directed or undirected."
                  },
                  "type": {
                    "type": "reference",
                    "id": 701,
                    "name": "_EShortestPathMethod"
                  }
                },
                {
                  "id": 667,
                  "name": "result",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the data to return, positions, edges, or both."
                  },
                  "type": {
                    "type": "reference",
                    "id": 704,
                    "name": "_EShortestPathResult"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TClosestPathResult"
              }
            }
          ]
        },
        {
          "id": 668,
          "name": "Degree",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1800,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 669,
              "name": "Degree",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates degree centrality for positions in a network. Values are normalized in the range 0 to 1.\n\\n\nThe network is defined by a set of connected edges, consisting of polylines and/or polygons.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nDegree centrality is based on the idea that the centrality of a position in a network is related to\nthe number of direct links that it has to other positions.\n\\n\nIf 'undirected' is selected,  degree centrality is calculated by summing up the weights\nof all edges connected to a position.\nIf 'directed' is selected, then two types of centrality are calculated: incoming degree and\noutgoing degree.\nIncoming degree is calculated by summing up the weights of all incoming edges connected to a position.\nOutgoing degree is calculated by summing up the weights of all outgoing edges connected to a position.\n\\n\nDefault weight is 1 for all edges. Weights can be specified using an attribute called 'weight' on edges.\n\\n\nReturns a dictionary containing the results.\n\\n\nIf 'undirected' is selected, the dictionary will contain  the following:\n1. 'posis': a list of position IDs.\n2. 'degree': a list of numbers, the values for degree centrality.\n\\n\nIf 'directed' is selected, the dictionary will contain  the following:\n1. 'posis': a list of position IDs.\n2. 'indegree': a list of numbers, the values for incoming degree centrality.\n3. 'outdegree': a list of numbers, the values for outgoing degree centrality.\n\\n",
                "returns": "A dictionary containing the results.\n"
              },
              "parameters": [
                {
                  "id": 670,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 671,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can be extracted.\nThese positions should be part of the network."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 672,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The network, edges, or entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 673,
                  "name": "alpha",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The alpha value for the centrality calculation, ranging on [0, 1]. With value 0,\ndisregards edge weights and solely uses number of edges in the centrality calculation. With value 1,\ndisregards number of edges and solely uses the edge weights in the centrality calculation."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 674,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method to use, directed or undirected."
                  },
                  "type": {
                    "type": "reference",
                    "id": 709,
                    "name": "_ECentralityMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 611,
          "name": "Isovist",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 274,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 612,
              "name": "Isovist",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates an approximation of the isovist for a set of origins, defined by XYZ coords.\n\\n\nThe isovist is calculated by shooting rays out from the origins in a radial pattern.\nThe 'radius' argument defines the maximum radius of the isovist.\n(The radius is used to define the maximum distance for shooting the rays.)\nThe 'num_rays' argument defines the number of rays that will be shot,\nin a radial pattern parallel to the XY plane, with equal angle between rays.\nMore rays will result in more accurate result, but will also be slower to execute.\n\\n\nReturns a dictionary containing different isovist metrics.\n\\n\n1. 'avg_dist': The average distance from origin to the perimeter.\n2. 'min_dist': The minimum distance from the origin to the perimeter.\n3. 'max_dist': The minimum distance from the origin to the perimeter.\n4. 'area': The area of the isovist.\n5. 'perimeter': The perimeter of the isovist.\n4. 'area_ratio': The ratio of the area of the isovist to the maximum area.\n5. 'perimeter_ratio': The ratio of the perimeter of the isovist to the maximum perimeter.\n6. 'circularity': The ratio of the square of the perimeter to area (Davis and Benedikt, 1979).\n7. 'compactness': The ratio of average distance to the maximum distance (Michael Batty, 2001).\n8. 'cluster': The ratio of the radius of an idealized circle with the actual area of the\nisovist to the radius of an idealized circle with the actual perimeter of the circle (Michael Batty, 2001).\n\\n\n\\n"
              },
              "parameters": [
                {
                  "id": 613,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 614,
                  "name": "origins",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of Rays or a list of Planes, to be used as the origins for calculating the isovists."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 615,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The obstructions: faces, polygons, or collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 616,
                  "name": "radius",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The maximum radius of the isovist."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 617,
                  "name": "num_rays",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The number of rays to generate when calculating isovists.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TIsovistResult"
              }
            }
          ]
        },
        {
          "id": 641,
          "name": "Nearest",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1034,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 642,
              "name": "Nearest",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Finds the nearest positions within a certain maximum radius.\n\\n\nThe neighbors to each source position is calculated as follows:\n1. Calculate the distance to all target positions.\n2. Creat the neighbors set by filtering out target positions that are further than the maximum radius.\n3. If the number of neighbors is greater than 'max_neighbors',\nthen select the 'max_neighbors' closest target positions.\n\\n\nReturns a dictionary containing the nearest positions.\n\\n\nIf 'num_neighbors' is 1, the dictionary will contain two lists:\n1. 'posis': a list of positions, a subset of positions from the source.\n2. 'neighbors': a list of neighbouring positions, a subset of positions from target.\n\\n\nIf 'num_neighbors' is greater than 1, the dictionary will contain two lists:\n1. 'posis': a list of positions, a subset of positions from the source.\n2. 'neighbors': a list of lists of neighbouring positions, a subset of positions from target.\n\\n",
                "returns": "A dictionary containing the results.\n"
              },
              "parameters": [
                {
                  "id": 643,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 644,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 645,
                  "name": "target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can be extracted.\nIf null, the positions in source will be used."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 646,
                  "name": "radius",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The maximum distance for neighbors. If null, Infinity will be used."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 647,
                  "name": "max_neighbors",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The maximum number of neighbors to return.\nIf null, the number of positions in target is used."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 648,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 651,
                      "name": "distances",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "modules/basic/analyze.ts",
                          "line": 1036,
                          "character": 53
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "array",
                              "elementType": {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 650,
                      "name": "neighbors",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "modules/basic/analyze.ts",
                          "line": 1036,
                          "character": 25
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "name": "TId"
                            }
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "name": "TId"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 649,
                      "name": "posis",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "modules/basic/analyze.ts",
                          "line": 1036,
                          "character": 9
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TId"
                        }
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [
                        651,
                        650,
                        649
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "modules/basic/analyze.ts",
                      "line": 1036,
                      "character": 8
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 604,
          "name": "Raytrace",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 98,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 605,
              "name": "Raytrace",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Shoot a set of rays into a set of obstructions, consisting of polygon faces.\nOne can imagine particles being shot from the ray origin in the ray direction, hitting the\nobstructions.\n\\n\nEach ray will either hit an obstruction, or will hit no obstructions.\nThe length of the ray vector is ignored, only the ray origin and direction is taken into account.\nEach particle shot out from a ray will travel a certain distance.\nThe minimum and maximum distance that the particle will travel is defined by the 'dist' argument.\n\\n\nIf a ray particle hits an obstruction, then the 'distance' for that ray is the distance from the * ray origin to the point of intersection.\nIf the ray particle does not hit an obstruction, then the 'distance' for that ray is equal to\nthe max for the 'dist' argument.\n\\n\nReturns a dictionary containing the following data.\n\\n\nIf 'stats' is selected, the dictionary will contain the following numbers:\n1. 'hit_count': the total number of rays that hit an obstruction.\n2. 'miss_count': the total number of rays that did not hit any obstruction.\n3. 'total_dist': the total of all the ray distances.\n4. 'min_dist': the minimum distance for all the rays.\n5. 'max_dist': the maximum distance for all the rays.\n6. 'avg_dist': the average dist for all the rays.\n7. 'dist_ratio': the ratio of 'total_dist' to the maximum distance if not rays hit any\nobstructions.\n\\n\nIf 'distances' is selected, the dictionary will contain the following list:\n1. 'distances': A list of numbers, the distance travelled for each ray.\n\\n\nIf 'hit_pgons' is selected, the dictionary will contain the following list:\n1. 'hit_pgons': A list of polygon IDs, the polygons hit for each ray, or 'null' if no polygon\nwas hit.\n\\n\nIf 'intersections' is selected, the dictionary will contain the following list:\n1. 'intersections': A list of XYZ coords, the point of intersection where the ray hit a polygon,\nor 'null' if no polygon was hit.\n\\n\nIf 'all' is selected, the dictionary will contain all of the above.\n\\n\nIf the input is a list of rays, the output will be a single dictionary.\nIf the list is empty (i.e. contains no rays), then 'null' is returned.\nIf the input is a list of lists of rays, then the output will be a list of dictionaries.\n\\n"
              },
              "parameters": [
                {
                  "id": 606,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 607,
                  "name": "rays",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A ray, a list of rays, or a list of lists of rays."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "reference",
                            "name": "TRay"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 608,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 609,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The ray limits, one or two numbers. Either max, or [min, max]."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 610,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; values to return.\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 682,
                    "name": "_ERaytraceMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRaytraceResult"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRaytraceResult"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 652,
          "name": "ShortestPath",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 1214,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 653,
              "name": "ShortestPath",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the shortest path from every source position to every target position.\n\\n\nPaths are calculated through a network of connected edges.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nIf 'directed' is selected, then the edge direction is taken into account. Each edge will be one-way.\nIf 'undirected' is selected, the edge direction is ignored. Each edge will be two-way.\n\\n\nEach edge can be assigned a weight.\nThe shortest path is the path where the sum of the weights of the edges along the path is the minimum.\n\\n\nBy default, all edges are assigned a weight of 1.\nDefault weights can be overridden by creating a numeric attribute on edges call 'weight'.\n\\n\nReturns a dictionary containing the shortest paths.\n\\n\nIf 'distances' is selected, the dictionary will contain two list:\n1. 'source_posis': a list of start positions for eah path,\n2. 'distances': a list of distances, one list for each path starting at each source position.\n\\n\nIf 'counts' is selected, the dictionary will contain four lists:\n1. 'posis': a list of positions traversed by the paths,\n2. 'posis_count': a list of numbers that count how often each position was traversed,\n3. 'edges': a list of edges traversed by the paths,\n4. 'edges_count': a list of numbers that count how often each edge was traversed.\n\\n\nIf 'paths' is selected, the dictionary will contain two lists of lists:\n1. 'posi_paths': a list of lists of positions, one list for each path,\n2. 'edge_paths': a list of lists of edges, one list for each path.\n\\n\nIf 'all' is selected, the dictionary will contain all lists just described.\n\\n",
                "returns": "A dictionary containing the results.\n"
              },
              "parameters": [
                {
                  "id": 654,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 655,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Path source, a list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 656,
                  "name": "target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Path target, a list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 657,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The network, edges, or entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 658,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method to use, directed or undirected."
                  },
                  "type": {
                    "type": "reference",
                    "id": 701,
                    "name": "_EShortestPathMethod"
                  }
                },
                {
                  "id": 659,
                  "name": "result",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the data to return, positions, edges, or both."
                  },
                  "type": {
                    "type": "reference",
                    "id": 704,
                    "name": "_EShortestPathResult"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TShortestPathResult"
              }
            }
          ]
        },
        {
          "id": 618,
          "name": "Sky",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 464,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 619,
              "name": "Sky",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculate an approximation of the sky exposure factor, for a set sensors positioned at specified locations.\nThe sky exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\nand 1 means that it has maximum exposure.\n\\n\nEach sensor has a location and direction, specified using either rays or planes.\nThe direction of the sensor specifies what is infront and what is behind the sensor.\nFor each sensor, only exposure infront of the sensor is calculated.\n\\n\nThe exposure is calculated by shooting rays in reverse.\nfrom the sensor origin to a set of points on the sky dome.\nIf the rays hits an obstruction, then the sky dome is obstructed..\nIf the ray hits no obstructions, then the sky dome is not obstructed.\n\\n\nThe exposure factor at each sensor point is calculated as follows:\n1. Shoot rays to all sky dome points.\n2. If the ray hits an obstruction, assign a weight of 0 to that ray.\n3. If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\n4. Calculate the total solar expouse by adding up the weights for all rays.\n5. Divide by the maximum possible exposure for an unobstructed sensor with a direction pointing straight up.\n\\n\nIf 'weighted' is selected, then\nthe exposure calculation takes into account the angle of incidence of the ray to the sensor direction.\nRays parallel to the sensor direction are assigned a weight of 1.\nRays at an oblique angle are assigned a weight equal to the cosine of the angle\nbetweeen the sensor direction and the ray.\n\\n\nIf 'unweighted' is selected, then all rays are assigned a weight of 1, irresepctive of angle.\n\\n\nThe detail parameter spacifies the number of rays that get generated.\nThe higher the level of detail, the more accurate but also the slower the analysis will be.\n\\n\nThe number of rays are as follows:\n0 = 89 rays,\n1 = 337 rays,\n2 = 1313 rays,\n3 = 5185 rays.\n\\n\nReturns a dictionary containing exposure results.\n\\n\n1. 'exposure': A list of numbers, the exposure factors.\n\\n\n\\n"
              },
              "parameters": [
                {
                  "id": 620,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 621,
                  "name": "origins",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 622,
                  "name": "detail",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An integer between 1 and 3 inclusive, specifying the level of detail for the analysis."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 623,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 624,
                  "name": "limits",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The max distance for raytracing."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 625,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; sky method.\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 688,
                    "name": "_ESkyMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 634,
          "name": "SkyDome",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 913,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 635,
              "name": "SkyDome",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a sun path, oriented according to the geolocation and north direction.\nThe sun path is generated as an aid to visualize the orientation of the sun relative to the model.\nNote that the solar exposure calculations do not require the sub path to be visualized.\n\\n\nThe sun path takes into account the geolocation and the north direction of the model.\nGeolocation is specified by a model attributes as follows:",
                "tags": [
                  {
                    "tag": "geolocation={'longitude':123,'latitude':12}.",
                    "text": "\nNorth direction is specified by a model attribute as follows, using a vector:"
                  },
                  {
                    "tag": "north==[1,2]",
                    "text": "\nIf no north direction is specified, then [0,1] is the default (i.e. north is in the direction of the y-axis);\n\\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 636,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 637,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                },
                {
                  "id": 638,
                  "name": "detail",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The level of detail for the analysis"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 639,
                  "name": "radius",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The radius of the sun path"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 640,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the type of sky to generate.\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 697,
                    "name": "_ESunPathMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 626,
          "name": "Sun",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/analyze.ts",
              "line": 617,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 627,
              "name": "Sun",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculate an approximation of the solar exposure factor, for a set sensors positioned at specfied locations.\nThe solar exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\nand 1 means that it has maximum exposure.\n\\n\nThe calculation takes into account the geolocation and the north direction of the model.\nGeolocation is specified by a model attributes as follows:",
                "tags": [
                  {
                    "tag": "geolocation={'longitude':123,'latitude':12}.",
                    "text": "\nNorth direction is specified by a model attribute as follows, using a vector:"
                  },
                  {
                    "tag": "north==[1,2]",
                    "text": "\nIf no north direction is specified, then [0,1] is the default (i.e. north is in the direction of the y-axis);\n\\n\nEach sensor has a location and direction, specified using either rays or planes.\nThe direction of the sensor specifies what is infront and what is behind the sensor.\nFor each sensor, only exposure infront of the sensor is calculated.\n\\n\nThe exposure is calculated by shooting rays in reverse.\nfrom the sensor origin to a set of points on the sky dome.\nIf the rays hits an obstruction, then the sky dome is obstructed..\nIf the ray hits no obstructions, then the sky dome is not obstructed.\n\\n\nThe exposure factor at each sensor point is calculated as follows:\n1. Shoot rays to all sky dome points.\n2. If the ray hits an obstruction, assign a wight of 0 to that ray.\n3. If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\n4. Calculate the total solar expouse by adding up the weights for all rays.\n5. Divide by the maximum possible solar exposure for an unobstructed sensor.\n\\n\nThe solar exposure calculation takes into account the angle of incidence of the sun ray to the sensor direction.\nSun rays that are hitting the sensor straight on are assigned a weight of 1.\nSun rays that are hitting the sensor at an oblique angle are assigned a weight equal to the cosine of the angle.\n\\n\nIf 'direct_exposure' is selected, then the points on the sky dome will follow the path of the sun throughout the year.\nIf 'indirect_exposure' is selected, then the points on the sky dome will consist of points excluded by\nthe path of the sun throughout the year.\n\\n\nThe direct sky dome points cover a strip of sky where the sun travels.\nThe inderect sky dome points cover the segments of sky either side of the direct sun strip.\n\\n\nThe detail parameter spacifies the number of rays that get generated.\nThe higher the level of detail, the more accurate but also the slower the analysis will be.\nThe number of rays differs depending on the latitde.\n\\n\nAt latitude 0, the number of rays for 'direct' are as follows:\n0 = 44 rays,\n1 = 105 rays,\n2 = 510 rays,\n3 = 1287 rays.\n\\n\nAt latitude 0, the number of rays for 'indirect' are as follows:\n0 = 58 rays,\n1 = 204 rays,\n2 = 798 rays,\n3 = 3122 rays.\n\\n\nThe number of rays for 'sky' are as follows:\n0 = 89 rays,\n1 = 337 rays,\n2 = 1313 rays,\n3 = 5185 rays.\n\\n\nReturns a dictionary containing solar exposure results.\n\\n\nIf one  of the 'direct' methods is selected, the dictionary will contain:\n1. 'direct': A list of numbers, the direct exposure factors.\n\\n\nIf one  of the 'indirect' methods is selected, the dictionary will contain:\n1. 'indirect': A list of numbers, the indirect exposure factors.\n\\n\n\\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 628,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 629,
                  "name": "origins",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 630,
                  "name": "detail",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An integer between 1 and 3 inclusive, specifying the level of detail for the analysis."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 631,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 632,
                  "name": "limits",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The max distance for raytracing."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 633,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; solar method.\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 692,
                    "name": "_ESolarMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            709,
            712,
            682,
            701,
            704,
            688,
            692,
            697
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            675,
            660,
            668,
            611,
            641,
            604,
            652,
            618,
            634,
            626
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/analyze.ts",
          "line": 7,
          "character": 0
        }
      ]
    },
    {
      "id": 491,
      "name": "attrib",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `attrib` module has functions for working with attributes in teh model.\nNote that attributes can also be set and retrieved using the \"@\" symbol."
      },
      "children": [
        {
          "id": 549,
          "name": "_EAttribPushTarget",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 558,
              "name": "COLL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 53,
                  "character": 4
                }
              ],
              "defaultValue": "\"co\""
            },
            {
              "id": 560,
              "name": "COLLC",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 55,
                  "character": 4
                }
              ],
              "defaultValue": "\"coc\""
            },
            {
              "id": 559,
              "name": "COLLP",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 54,
                  "character": 4
                }
              ],
              "defaultValue": "\"cop\""
            },
            {
              "id": 552,
              "name": "EDGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 47,
                  "character": 4
                }
              ],
              "defaultValue": "\"_e\""
            },
            {
              "id": 554,
              "name": "FACE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 49,
                  "character": 4
                }
              ],
              "defaultValue": "\"_f\""
            },
            {
              "id": 561,
              "name": "MOD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 56,
                  "character": 4
                }
              ],
              "defaultValue": "\"mo\""
            },
            {
              "id": 557,
              "name": "PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 52,
                  "character": 4
                }
              ],
              "defaultValue": "\"pg\""
            },
            {
              "id": 556,
              "name": "PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 51,
                  "character": 4
                }
              ],
              "defaultValue": "\"pl\""
            },
            {
              "id": 555,
              "name": "POINT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 50,
                  "character": 4
                }
              ],
              "defaultValue": "\"pt\""
            },
            {
              "id": 550,
              "name": "POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 45,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps\""
            },
            {
              "id": 551,
              "name": "VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 46,
                  "character": 4
                }
              ],
              "defaultValue": "\"_v\""
            },
            {
              "id": 553,
              "name": "WIRE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 48,
                  "character": 4
                }
              ],
              "defaultValue": "\"_w\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                558,
                560,
                559,
                552,
                554,
                561,
                557,
                556,
                555,
                550,
                551,
                553
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 44,
              "character": 12
            }
          ]
        },
        {
          "id": 562,
          "name": "_EDataType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 565,
              "name": "BOOLEAN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 61,
                  "character": 4
                }
              ],
              "defaultValue": "\"boolean\""
            },
            {
              "id": 567,
              "name": "DICT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 63,
                  "character": 4
                }
              ],
              "defaultValue": "\"dict\""
            },
            {
              "id": 566,
              "name": "LIST",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 62,
                  "character": 4
                }
              ],
              "defaultValue": "\"list\""
            },
            {
              "id": 563,
              "name": "NUMBER",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 59,
                  "character": 4
                }
              ],
              "defaultValue": "\"number\""
            },
            {
              "id": 564,
              "name": "STRING",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 60,
                  "character": 4
                }
              ],
              "defaultValue": "\"string\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                565,
                567,
                566,
                563,
                564
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 58,
              "character": 12
            }
          ]
        },
        {
          "id": 528,
          "name": "_EEntType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 537,
              "name": "COLL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 30,
                  "character": 4
                }
              ],
              "defaultValue": "\"co\""
            },
            {
              "id": 531,
              "name": "EDGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 24,
                  "character": 4
                }
              ],
              "defaultValue": "\"_e\""
            },
            {
              "id": 533,
              "name": "FACE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"_f\""
            },
            {
              "id": 536,
              "name": "PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 29,
                  "character": 4
                }
              ],
              "defaultValue": "\"pg\""
            },
            {
              "id": 535,
              "name": "PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "defaultValue": "\"pl\""
            },
            {
              "id": 534,
              "name": "POINT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 27,
                  "character": 4
                }
              ],
              "defaultValue": "\"pt\""
            },
            {
              "id": 529,
              "name": "POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 22,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps\""
            },
            {
              "id": 530,
              "name": "VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 23,
                  "character": 4
                }
              ],
              "defaultValue": "\"_v\""
            },
            {
              "id": 532,
              "name": "WIRE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 25,
                  "character": 4
                }
              ],
              "defaultValue": "\"_w\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                537,
                531,
                533,
                536,
                535,
                534,
                529,
                530,
                532
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 21,
              "character": 12
            }
          ]
        },
        {
          "id": 538,
          "name": "_EEntTypeAndMod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 547,
              "name": "COLL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 41,
                  "character": 4
                }
              ],
              "defaultValue": "\"co\""
            },
            {
              "id": 541,
              "name": "EDGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 35,
                  "character": 4
                }
              ],
              "defaultValue": "\"_e\""
            },
            {
              "id": 543,
              "name": "FACE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 37,
                  "character": 4
                }
              ],
              "defaultValue": "\"_f\""
            },
            {
              "id": 548,
              "name": "MOD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 42,
                  "character": 4
                }
              ],
              "defaultValue": "\"mo\""
            },
            {
              "id": 546,
              "name": "PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 40,
                  "character": 4
                }
              ],
              "defaultValue": "\"pg\""
            },
            {
              "id": 545,
              "name": "PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 39,
                  "character": 4
                }
              ],
              "defaultValue": "\"pl\""
            },
            {
              "id": 544,
              "name": "POINT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 38,
                  "character": 4
                }
              ],
              "defaultValue": "\"pt\""
            },
            {
              "id": 539,
              "name": "POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 33,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps\""
            },
            {
              "id": 540,
              "name": "VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 34,
                  "character": 4
                }
              ],
              "defaultValue": "\"_v\""
            },
            {
              "id": 542,
              "name": "WIRE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 36,
                  "character": 4
                }
              ],
              "defaultValue": "\"_w\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                547,
                541,
                543,
                548,
                546,
                545,
                544,
                539,
                540,
                542
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 32,
              "character": 12
            }
          ]
        },
        {
          "id": 571,
          "name": "_EPushMethodSel",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 574,
              "name": "AVERAGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 564,
                  "character": 4
                }
              ],
              "defaultValue": "\"average\""
            },
            {
              "id": 572,
              "name": "FIRST",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 562,
                  "character": 4
                }
              ],
              "defaultValue": "\"first\""
            },
            {
              "id": 573,
              "name": "LAST",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 563,
                  "character": 4
                }
              ],
              "defaultValue": "\"last\""
            },
            {
              "id": 578,
              "name": "MAX",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 568,
                  "character": 4
                }
              ],
              "defaultValue": "\"max\""
            },
            {
              "id": 575,
              "name": "MEDIAN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 565,
                  "character": 4
                }
              ],
              "defaultValue": "\"median\""
            },
            {
              "id": 577,
              "name": "MIN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 567,
                  "character": 4
                }
              ],
              "defaultValue": "\"min\""
            },
            {
              "id": 576,
              "name": "SUM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 566,
                  "character": 4
                }
              ],
              "defaultValue": "\"sum\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                574,
                572,
                573,
                578,
                575,
                577,
                576
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 561,
              "character": 12
            }
          ]
        },
        {
          "id": 568,
          "name": "_ESet",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 570,
              "name": "MANY_VALUES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 157,
                  "character": 4
                }
              ],
              "defaultValue": "\"many_values\""
            },
            {
              "id": 569,
              "name": "ONE_VALUE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/attrib.ts",
                  "line": 156,
                  "character": 4
                }
              ],
              "defaultValue": "\"one_value\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                570,
                569
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 155,
              "character": 12
            }
          ]
        },
        {
          "id": 504,
          "name": "Add",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 335,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 505,
              "name": "Add",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Add one or more attributes to the model.\nThe attribute will appear as a new column in the attribute table.\n(At least one entity must have a value for the column to be visible in the attribute table).\nAll attribute values will be set to null.\n\\n"
              },
              "parameters": [
                {
                  "id": 506,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 507,
                  "name": "ent_type_sel",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the attribute entity type."
                  },
                  "type": {
                    "type": "reference",
                    "id": 538,
                    "name": "_EEntTypeAndMod"
                  }
                },
                {
                  "id": 508,
                  "name": "data_type_sel",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the data type for this attribute"
                  },
                  "type": {
                    "type": "reference",
                    "id": 562,
                    "name": "_EDataType"
                  }
                },
                {
                  "id": 509,
                  "name": "attribs",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A single attribute name, or a list of attribute names.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 510,
          "name": "Delete",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 402,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 511,
              "name": "Delete",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Delete one or more attributes from the model.\nThe column in the attribute table will be deleted.\nAll values will also be deleted.\n\\n"
              },
              "parameters": [
                {
                  "id": 512,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 513,
                  "name": "ent_type_sel",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the attribute entity type."
                  },
                  "type": {
                    "type": "reference",
                    "id": 538,
                    "name": "_EEntTypeAndMod"
                  }
                },
                {
                  "id": 514,
                  "name": "attribs",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A single attribute name, or a list of attribute names. In 'null' all attributes will be deleted.\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 499,
          "name": "Get",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 259,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 500,
              "name": "Get",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Get attribute values for one or more entities.\n\\n\nIf entities is null, then model level attributes will be returned.\n\\n",
                "returns": "One attribute value, or a list of attribute values.\n"
              },
              "parameters": [
                {
                  "id": 501,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 502,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entities, the entities to get the attribute values for."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 503,
                  "name": "attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The attribute. Can be `name`, `[name, index]`, or `[name, key]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TAttribDataTypes"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TAttribDataTypes"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 521,
          "name": "Push",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 477,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 522,
              "name": "Push",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Push attributes up or down the hierarchy. The original attribute is not changed.\n\\n"
              },
              "parameters": [
                {
                  "id": 523,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 524,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entities, the entities to push the attribute values for."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 525,
                  "name": "attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The attribute. Can be `name`, `[name, index_or_key]`,\n`[source_name, source_index_or_key, target_name]` or `[source_name, source_index_or_key, target_name, target_index_or_key]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 526,
                  "name": "ent_type_sel",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the target entity type where the attribute values should be pushed to."
                  },
                  "type": {
                    "type": "reference",
                    "id": 549,
                    "name": "_EAttribPushTarget"
                  }
                },
                {
                  "id": 527,
                  "name": "method_sel",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method for aggregating attribute values in cases where aggregation is necessary.\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 571,
                    "name": "_EPushMethodSel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 515,
          "name": "Rename",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 447,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 516,
              "name": "Rename",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rename an attribute in the model.\nThe header for column in the attribute table will be renamed.\nAll values will remain the same.\n\\n"
              },
              "parameters": [
                {
                  "id": 517,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 518,
                  "name": "ent_type_sel",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the attribute entity type."
                  },
                  "type": {
                    "type": "reference",
                    "id": 538,
                    "name": "_EEntTypeAndMod"
                  }
                },
                {
                  "id": 519,
                  "name": "old_attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The old attribute name."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 520,
                  "name": "new_attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The old attribute name.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 492,
          "name": "Set",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/attrib.ts",
              "line": 129,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 493,
              "name": "Set",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Set an attribute value for one or more entities.\n\\n\nIf entities is null, then model level attributes will be set.\n\\n"
              },
              "parameters": [
                {
                  "id": 494,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 495,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entities, the entities to set the attribute value for."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 496,
                  "name": "attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The attribute. Can be `name`, `[name, index]`, or `[name, key]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 497,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The attribute value, or list of values."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TAttribDataTypes"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TAttribDataTypes"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 498,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 568,
                    "name": "_ESet"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            549,
            562,
            528,
            538,
            571,
            568
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            504,
            510,
            499,
            521,
            515,
            492
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/attrib.ts",
          "line": 7,
          "character": 0
        }
      ]
    },
    {
      "id": 716,
      "name": "calc",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `calc` module has functions for performing various types of calculations with entities in the model.\nThese functions neither make nor modify anything in the model.\nThese functions all return either numbers or lists of numbers."
      },
      "children": [
        {
          "id": 771,
          "name": "_ECentroidMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 773,
              "name": "CENTER_OF_MASS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/calc.ts",
                  "line": 454,
                  "character": 4
                }
              ],
              "defaultValue": "\"center_of_mass\""
            },
            {
              "id": 772,
              "name": "PS_AVERAGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/calc.ts",
                  "line": 453,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps_average\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                773,
                772
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 452,
              "character": 12
            }
          ]
        },
        {
          "id": 767,
          "name": "_EDistanceMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 769,
              "name": "PS_E_DISTANCE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/calc.ts",
                  "line": 27,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps_to_e_distance\""
            },
            {
              "id": 768,
              "name": "PS_PS_DISTANCE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/calc.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps_to_ps_distance\""
            },
            {
              "id": 770,
              "name": "PS_W_DISTANCE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/calc.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps_to_w_distance\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                769,
                768,
                770
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 25,
              "character": 12
            }
          ]
        },
        {
          "id": 727,
          "name": "Area",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 334,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 728,
              "name": "Area",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the area of en entity.",
                "text": "The entity can be a polygon, a face, a closed polyline, a closed wire, or a collection.\n\nGiven a list of entities, a list of areas are returned.\n",
                "returns": "Area.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "area1 = calc.Area (surface1)\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 729,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 730,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of polygons, closed polylines, closed wires, collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 763,
          "name": "BBox",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 790,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 764,
              "name": "BBox",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns the bounding box of the entities.\nThe bounding box is an imaginary box that completley contains all the geometry.\nThe box is always aligned with the global x, y, and z axes.\nThe bounding box consists of a list of lists, as follows [[x, y, z], [x, y, z], [x, y, z], [x, y, z]].",
                "text": "- The first [x, y, z] is the coordinates of the centre of the bounding box.\n- The second [x, y, z] is the corner of the bounding box with the lowest x, y, z values.\n- The third [x, y, z] is the corner of the bounding box with the highest x, y, z values.\n- The fourth [x, y, z] is the dimensions of the bounding box.\n",
                "returns": "The bounding box consisting of a list of four lists.\n"
              },
              "parameters": [
                {
                  "id": 765,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 766,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The etities for which to calculate the bounding box."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TBBox"
              }
            }
          ]
        },
        {
          "id": 735,
          "name": "Centroid",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 474,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 736,
              "name": "Centroid",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the centroid of an entity.",
                "text": "If 'ps_average' is selected, the centroid is the average of the positions that make up that entity.\n\nIf 'center_of_mass' is selected, the centroid is the centre of mass of the faces that make up that entity.\nNote that only faces are deemed to have mass.\n\nGiven a list of entities, a list of centroids will be returned.\n\nGiven a list of positions, a single centroid that is the average of all those positions will be returned.\n",
                "returns": "A centroid [x, y, z] or a list of centroids.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "centroid1 = calc.Centroid (polygon1)\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 737,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 738,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of entities. (Can be any type of entities.)"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 739,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method for calculating the centroid."
                  },
                  "type": {
                    "type": "reference",
                    "id": 771,
                    "name": "_ECentroidMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 717,
          "name": "Distance",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 41,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 718,
              "name": "Distance",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the minimum distance from one position to other entities in the model.",
                "returns": "Distance, or list of distances (if position2 is a list).",
                "tags": [
                  {
                    "tag": "example",
                    "text": "distance1 = calc.Distance (position1, position2, p_to_p_distance)"
                  },
                  {
                    "tag": "example_info",
                    "text": "position1 = [0,0,0], position2 = [[0,0,10],[0,0,20]], Expected value of distance is 10.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 719,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 720,
                  "name": "entities1",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Position to calculate distance from."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 721,
                  "name": "entities2",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of entities to calculate distance to."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 722,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; distance method."
                  },
                  "type": {
                    "type": "reference",
                    "id": 767,
                    "name": "_EDistanceMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 750,
          "name": "Eval",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 615,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 751,
              "name": "Eval",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the xyz coord along an edge, wire, or polyline given a t parameter.",
                "text": "The 't' parameter varies between 0 and 1, where 0 indicates the start and 1 indicates the end.\nFor example, given a polyline,\nevaluating at t=0 gives that xyz at the start,\nevaluating at t=0.5 gives the xyz halfway along the polyline,\nevaluating at t=1 gives the xyz at the end of the polyline.\n\nGiven a single edge, wire, or polyline, a single xyz coord will be returned.\n\nGiven a list of edges, wires, or polylines, a list of xyz coords will be returned.\n\nGiven any entity that has wires (faces, polygons and collections),\na list of wires will be extracted, and a list of coords will be returned.\n",
                "returns": "The coordinates [x, y, z], or a list of coordinates.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "coord1 = calc.Eval (polyline1, 0.23)\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 752,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 753,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of edges, wires, polylines, or faces, polygons, or collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 754,
                  "name": "t_param",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A value between 0 to 1."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 723,
          "name": "Length",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 266,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 724,
              "name": "Length",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the length of an entity.",
                "text": "The entity can be an edge, a wire, a polyline, or anything from which wires can be extracted.\nThis includes polylines, polygons, faces, and collections.\n\nGiven a list of edges, wires, or polylines, a list of lengths are returned.\n\nGiven any types of entities from which wires can be extracted, a list of lengths are returned.\nFor example, given a single polygon, a list of lengths are returned (since a polygon may have multiple wires).\n",
                "returns": "Lengths, a number or list of numbers.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "length1 = calc.Length(line1)\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 725,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 726,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of edges or wires or other entities from which wires can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 740,
          "name": "Normal",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 525,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 741,
              "name": "Normal",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the normal vector of an entity or list of entities. The vector is normalised, and scaled\nby the specified scale factor.",
                "text": "Given a single entity, a single normal will be returned. Given a list of entities, a list of normals will be returned.\n\nFor polygons, faces, and face wires the normal is calculated by taking the average of all the normals of the face triangles.\n\nFor polylines and polyline wires, the normal is calculated by triangulating the positions, and then\ntaking the average of all the normals of the triangles.\n\nFor edges, the normal is calculated by takingthe avery of the normals of the two vertices.\n\nFor vertices, the normal is calculated by creating a triangle out of the two adjacent edges,\nand then calculating the normal of the triangle.\n(If there is only one edge, or if the two adjacent edges are colinear, the the normal of the wire is returned.)\n\nFor positions, the normal is calculated by taking the average of the normals of all the vertices linked to the position.\n\nIf the normal cannot be calculated, [0, 0, 0] will be returned.\n",
                "returns": "The normal vector [x, y, z] or a list of normal vectors.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "normal1 = calc.Normal (polygon1, 1)"
                  },
                  {
                    "tag": "example_info",
                    "text": "If the input is non-planar, the output vector will be an average of all normals vector of the polygon triangles.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 742,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 743,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of entities. (Can be any type of entities.)"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 744,
                  "name": "scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The scale factor for the normal vector. (This is equivalent to the length of the normal vector.)"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 759,
          "name": "Plane",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 743,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 760,
              "name": "Plane",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a plane from a polygon, a face, a polyline, or a wire.\nFor polylines or wires, there must be at least three non-colinear vertices.",
                "text": "The winding order is counter-clockwise.\nThis means that if the vertices are ordered counter-clockwise relative to your point of view,\nthen the z axis of the plane will be pointing towards you.\n",
                "returns": "The plane.\n"
              },
              "parameters": [
                {
                  "id": 761,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 762,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Any entities"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TPlane"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TPlane"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 755,
          "name": "Ray",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 690,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 756,
              "name": "Ray",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a ray for an edge or a polygons.",
                "text": "For edges, it returns a ray along the edge, from the start vertex to the end vertex\n\nFor a polygon, it returns the ray that is the z-axis of the plane.\n\nFor an edge, the ray vector is not normalised. For a polygon, the ray vector is normalised.\n",
                "returns": "The ray.\n"
              },
              "parameters": [
                {
                  "id": 757,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 758,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An edge, a wirea polygon, or a list."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TRay"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TRay"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 731,
          "name": "Vector",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 406,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 732,
              "name": "Vector",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a vector along an edge, from the start position to the end position.\nThe vector is not normalized.",
                "text": "Given a single edge, a single vector will be returned. Given a list of edges, a list of vectors will be returned.\n\nGiven any entity that has edges (collection, polygons, polylines, faces, and wires),\na list of edges will be extracted, and a list of vectors will be returned.\n",
                "returns": "The vector [x, y, z] or a list of vectors.\n"
              },
              "parameters": [
                {
                  "id": 733,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 734,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of edges, or any entity from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 745,
          "name": "_normal",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/calc.ts",
              "line": 540,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 746,
              "name": "_normal",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 747,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 748,
                  "name": "ents_arr",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TEntTypeIdx"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TEntTypeIdx"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 749,
                  "name": "scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "Txyz"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            771,
            767
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            727,
            763,
            735,
            717,
            750,
            723,
            740,
            759,
            755,
            731,
            745
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/calc.ts",
          "line": 8,
          "character": 0
        }
      ]
    },
    {
      "id": 579,
      "name": "collection",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `collections` module has functions for creating and modifying collections."
      },
      "children": [
        {
          "id": 589,
          "name": "Add",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/collection.ts",
              "line": 151,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 590,
              "name": "Add",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Addes entities to a collection.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 591,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 592,
                  "name": "coll",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The collection to be updated."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 593,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Points, polylines, polygons, and collections to add."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 580,
          "name": "Create",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/collection.ts",
              "line": 36,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 581,
              "name": "Create",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a new collection.",
                "text": "If the `entities` argument is null or an empty list, then an empty collection will be created.\n\nIf the `name` argument is null, then no name attribute will be created for the collection.\n\nIf the list of entities contains other collections, these other collections will then become\nchildren of the new collection.\n",
                "returns": "Entities, new collection, or a list of new collections.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "collection1 = collection.Create([point1,polyine1,polygon1], 'my_coll')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a collection containing point1, polyline1, polygon1, with an attribute `name = 'my_coll'`.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 582,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 583,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List or nested lists of points, polylines, polygons, and other colletions, or null."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 584,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name to give to this collection, resulting in an attribute called `name`. If `null`, no attribute will be created."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 599,
          "name": "Delete",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/collection.ts",
              "line": 295,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 600,
              "name": "Delete",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Deletes a collection without deleting the entities in the collection.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 601,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 602,
                  "name": "coll",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The collection or list of collections to be deleted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 585,
          "name": "Get",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/collection.ts",
              "line": 96,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 586,
              "name": "Get",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Get one or more collections from the model, given a name or list of names.\nCollections with an attribute called 'name' and with a value that matches teh given vale will be returned.\n\\n\nThe value for name can include wildcards: '?' matches any single character and '*' matches any sequence of characters.\nFor example, 'coll?' will match 'coll1' and 'colla'. 'coll*' matches any name that starts with 'coll'.\n\\n\nIf a single collection is found, the collection will be returned as a single item (not a list).\nThis is a convenience so that there is no need to get the first item out of the returned list.\n\\n\nIf no collections are found, then an empty list is returned.\n\\n",
                "returns": "The collection, or a list of collections.\n"
              },
              "parameters": [
                {
                  "id": 587,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 588,
                  "name": "names",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A name or list of names. May include wildcards, '?' and '*'."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 594,
          "name": "Remove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/collection.ts",
              "line": 215,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 595,
              "name": "Remove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes entities from a collection.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 596,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 597,
                  "name": "coll",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The collection to be updated."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 598,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Points, polylines, polygons, and collections to add. Or null to empty the collection."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            589,
            580,
            599,
            585,
            594
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/collection.ts",
          "line": 6,
          "character": 0
        }
      ]
    },
    {
      "id": 87,
      "name": "dict",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `dict` module has functions for working with dictionaries.\nThese functions have no direct link with the model, the are generic functions for manipulating dictionaries.\nThese functions neither make nor modify anything in the model.\nIn addition to these functions, there are also inline functions available for working with dictionaries."
      },
      "children": [
        {
          "id": 88,
          "name": "Add",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/dict.ts",
              "line": 20,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 89,
              "name": "Add",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds one or more key-value pairs to a dict. Existing keys with the same name will be overwritten.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 90,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Dictionary to add the key-value pairs to."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 91,
                  "name": "keys",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A key or list of keys."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 92,
                  "name": "values",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A value of list of values."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 93,
          "name": "Remove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/dict.ts",
              "line": 45,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 94,
              "name": "Remove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes keys from a dict. If the key does not exist, no action is taken and no error is thrown.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 95,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dict in which to remove keys"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 96,
                  "name": "keys",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The key or list of keys to remove."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 97,
          "name": "Replace",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/dict.ts",
              "line": 71,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 98,
              "name": "Replace",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Replaces keys in a dict. If the key does not exist, no action is taken and no error is thrown.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 99,
                  "name": "dict",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The dict in which to replace keys"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  }
                },
                {
                  "id": 100,
                  "name": "old_keys",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The old key or list of keys."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 101,
                  "name": "new_keys",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The new key or list of keys."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            88,
            93,
            97
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/dict.ts",
          "line": 9,
          "character": 0
        }
      ]
    },
    {
      "id": 436,
      "name": "edit",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `edit` module has functions for editing entities in the model.\nThese function modify the topology of objects: vertices, edges, wires and faces.\nSome functions return the IDs of the entities that are created or modified."
      },
      "children": [
        {
          "id": 488,
          "name": "_EDeleteMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 489,
              "name": "DELETE_SELECTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 33,
                  "character": 4
                }
              ],
              "defaultValue": "\"delete_selected\""
            },
            {
              "id": 490,
              "name": "KEEP_SELECTED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 34,
                  "character": 4
                }
              ],
              "defaultValue": "\"keep_selected\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                489,
                490
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 32,
              "character": 12
            }
          ]
        },
        {
          "id": 477,
          "name": "_EDivisorMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 479,
              "name": "BY_LENGTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 20,
                  "character": 4
                }
              ],
              "defaultValue": "\"by_length\""
            },
            {
              "id": 480,
              "name": "BY_MAX_LENGTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 21,
                  "character": 4
                }
              ],
              "defaultValue": "\"by_max_length\""
            },
            {
              "id": 481,
              "name": "BY_MIN_LENGTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 22,
                  "character": 4
                }
              ],
              "defaultValue": "\"by_min_length\""
            },
            {
              "id": 478,
              "name": "BY_NUMBER",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 19,
                  "character": 4
                }
              ],
              "defaultValue": "\"by_number\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                479,
                480,
                481,
                478
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 18,
              "character": 12
            }
          ]
        },
        {
          "id": 485,
          "name": "_ERingMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 487,
              "name": "CLOSE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 30,
                  "character": 4
                }
              ],
              "defaultValue": "\"close\""
            },
            {
              "id": 486,
              "name": "OPEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 29,
                  "character": 4
                }
              ],
              "defaultValue": "\"open\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                487,
                486
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 28,
              "character": 12
            }
          ]
        },
        {
          "id": 482,
          "name": "_EWeldMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 484,
              "name": "BREAK_WELD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"break_weld\""
            },
            {
              "id": 483,
              "name": "MAKE_WELD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/edit.ts",
                  "line": 25,
                  "character": 4
                }
              ],
              "defaultValue": "\"make_weld\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                484,
                483
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 24,
              "character": 12
            }
          ]
        },
        {
          "id": 472,
          "name": "Delete",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 334,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 473,
              "name": "Delete",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Deletes geometric entities: positions, points, polylines, polygons, and collections.\n\\n\n- When deleting positions, any topology that requires those positions will also be deleted.\n(For example, any vertices linked to the deleted position will also be deleted,\nwhich may in turn result in some edges being deleted, and so forth.)\n- When deleting objects (points, polylines, and polygons), topology is also deleted.\n- When deleting collections, the objects and other collections in the collection are also deleted.\n\\n\nTopological entities inside objects  (wires, edges, vertices) cannot be deleted.\nIf a topological entity needs to be deleted, then the current approach is create a new object\nwith the desired topology, and then to delete the original object.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`edit.Delete(polygon1, 'delete_selected')`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Deletes `polygon1` from the model. The topology for\n`polygon1` will be deleted. In addition, any positions being used by `polygon1` will be deleted\nonly if they are not being used by other objects."
                  },
                  {
                    "tag": "example",
                    "text": "`edit.Delete(polygon1, 'keep_selected')`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Deletes everything except `polygon1` from the model. The topology and positions for\n`polygon1` will not be deleted.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 474,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 475,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Positions, points, polylines, polygons, collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 476,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, delete or keep unused positions."
                  },
                  "type": {
                    "type": "reference",
                    "id": 488,
                    "name": "_EDeleteMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 437,
          "name": "Divide",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 63,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 438,
              "name": "Divide",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Divides edges into a set of shorter edges.\n\\n\n- If the `by_number` method is selected, then each edge is divided into\na fixed number of equal length shorter edges.\n- If the `by_length` method is selected, then each edge is divided into\nshorter edges of the specified length.\n- The length of the last segment will be the remainder.\n- If the `by_min_length` method is selected,\nthen the edge is divided into the number of shorter edges\nwith lengths equal to or greater than the minimum length specified.\n- If the `by_max_length` method is selected,\nthen the edge is divided into the number of shorter edges\nwith lengths equal to or less than the maximum length specified.\n\\n",
                "returns": "Entities, a list of new edges resulting from the divide operation.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`segments1 = make.Divide(edge1, 5, by_number)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 5 equal length edges from edge1."
                  },
                  {
                    "tag": "example",
                    "text": "`segments2 = make.Divide(edge1, 5, by_length)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "If edge1 has length 13, creates two new edges of length 5 and one new edge of length 3.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 439,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 440,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Edges, or entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 441,
                  "name": "divisor",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Segment length or number of segments."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 442,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the method for dividing edges."
                  },
                  "type": {
                    "type": "reference",
                    "id": 477,
                    "name": "_EDivisorMethod"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 453,
          "name": "Fuse",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 184,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 454,
              "name": "Fuse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Fuse positions that lie within a certain tolerance of one another.\nNew positions will be created.\n\\n\nThe existing positions are analysed and clustered into groups of positions that lie with the\ntolerance distance from one another. For each cluster, a new position is created at the centre\nof the cluster. The xyz coordinates of the new position will be calculated as the average of all\nthe existing positions in the cluster.\n\\n\nIf the positions that are fuse have vertices attached, then the vertices will become welded.\n(Note that when using the `edit.Weld()` function, there is no threshold tolerance. Even vertices\nthat are far apart can be welded together. Fusing allows only vertices that are close together\nto be welded.)\n\\n\nIn some cases, if edges are shorter than the tolerance, this can result in edges being deleted.\nThe deletion of edges may also result in polylines or polygons being deleted. (It is therefore\nadvisable to filter out deleted entities after applying the `edit.Fuse()` function. For example,\nif you have a list of polygons, after fusing, you can filter the list like this:\n`pgons = pgons#pg`.)\n\\n\nThe new positions that get generated are returned.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 455,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 456,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entities, a list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 457,
                  "name": "tolerance",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The distance tolerance for fusing positions."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 443,
          "name": "Hole",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 100,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 444,
              "name": "Hole",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Makes one or more holes in a polygon.\n\\n\nThe holes are specified by lists of positions.\nThe positions must be on the polygon, i.e. they must be co-planar with the polygon and\nthey must be within the boundary of the polygon. (Even positions touching the edge of the polygon\ncan result in no hole being generated.)\n\\n\nMultiple holes can be created.\n- If the positions is a single list, then a single hole will be generated.\n- If the positions is a list of lists, then multiple holes will be generated.\n\\n",
                "returns": "Entities, a list of wires resulting from the hole(s).\n"
              },
              "parameters": [
                {
                  "id": 445,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 446,
                  "name": "pgon",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A polygon to make holes in."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 447,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of positions, or nested lists of positions, or entities from which positions\ncan be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 468,
          "name": "Reverse",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 292,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 469,
              "name": "Reverse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Reverses direction of wires, polylines or polygons.\n\\n\nThe order of vertices and edges in the wires will be reversed.\n\\n\nFor polygons this also means that they will face in the opposite direction. The back face and\nfront face will be flipped. If the normal is calculated, it will face in the opposite direction.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`modify.Reverse(polygon1)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Flips polygon and reverses its normal."
                  },
                  {
                    "tag": "example",
                    "text": "`edit.Reverse(polyline1)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Reverses the order of vertices and edges in the polyline.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 470,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 471,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Wire,polyline, polygon."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 458,
          "name": "Ring",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 218,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 459,
              "name": "Ring",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Opens or closes a polyline.\n\\n\nA polyline can be open or closed. A polyline consists of a sequence of vertices and edges.\nEdges connect pairs of vertices.\n- An open polyline has no edge connecting the first and last vertices. Closing a polyline\nadds this edge.\n- A closed polyline has an edge connecting the first and last vertices. Opening a polyline\ndeletes this edge.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`edit.Ring([polyline1,polyline2,...], method='close')`"
                  },
                  {
                    "tag": "example_info",
                    "text": "If open, polylines are changed to closed; if already closed, nothing happens.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 460,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 461,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Polyline(s)."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 462,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; the method to use, either `open` or `close`."
                  },
                  "type": {
                    "type": "reference",
                    "id": 485,
                    "name": "_ERingMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 463,
          "name": "Shift",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 259,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 464,
              "name": "Shift",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Shifts the order of the edges in a closed wire.\n\\n\nIn a closed wire (either a closed polyline or polygon), the edges form a closed ring. Any edge\n(or vertex) could be the first edge of the ring. In some cases, it is useful to have an edge in\na particular position in a ring. This function allows the edges to be shifted either forwards or\nbackwards around the ring. The order of the edges in the ring will remain unchanged.\n\\n\n- An offset of zero has no effect.\n- An offset of 1 will shift the edges so that the second edge becomes the first edge.\n- An offset of 2 will shift the edges so that the third edge becomes the first edge.\n- An offset of -1 will shift the edges so that the last edge becomes the first edge.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`modify.Shift(polygon1, 1)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Shifts the edges in the polygon wire, so that the every edge moves back by one position\nin the ring. The first edge will become the last edge."
                  },
                  {
                    "tag": "example",
                    "text": "`edit.Shift(polyline1, -1)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Shifts the edges in the closed polyline wire, so that every edge moves up by one position\nin the ring. The last edge will become the first edge.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 465,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 466,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Wire, face, polyline, polygon."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 467,
                  "name": "offset",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The offset, a positive or negative integer."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 448,
          "name": "Weld",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/edit.ts",
              "line": 139,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 449,
              "name": "Weld",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Make or break welds between vertices.\nIf two vertices are welded, then they share the same position.\n\\n\n- When making a weld between vertices, a new position is created. The new position is calculate\nas the average of all the existing positions of the vertices. The vertices will then be linked\nto the new position. This means that if the position is later moved, then all vertices will be\naffected. The new position is returned. The positions that become shared are returned.\n- When breaking a weld between vetices, existing positions are duplicated. Each vertex is then\nlinked to one of these duplicate positions. If these positions are later moved, then only one\nvertex will be affected.  The new positions that get generated are returned.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 450,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 451,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entities, a list of vertices, or entities from which vertices can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 452,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; the method to use, either `make_weld` or `break_weld`."
                  },
                  "type": {
                    "type": "reference",
                    "id": 482,
                    "name": "_EWeldMethod"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            488,
            477,
            485,
            482
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            472,
            437,
            453,
            443,
            468,
            458,
            463,
            448
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/edit.ts",
          "line": 8,
          "character": 0
        }
      ]
    },
    {
      "id": 930,
      "name": "intersect",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `intersect` module has functions for calculating intersections between different types of entities."
      },
      "children": [
        {
          "id": 936,
          "name": "PlaneEdge",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/intersect.ts",
              "line": 106,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 937,
              "name": "PlaneEdge",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the xyz intersection between a plane and a list of edges.\n\\n\nThis ignores the intersections between planes and polygon face triangles.\n\\n",
                "returns": "A list of xyz intersection coordinates.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "coords = intersect.PlaneEdge(plane, polyline1)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns a list of coordinates where the plane intersects with the edges of polyline1.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 938,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 939,
                  "name": "plane",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                },
                {
                  "id": 940,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An edge or list of edges, or entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "Txyz"
                }
              }
            }
          ]
        },
        {
          "id": 931,
          "name": "RayFace",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/intersect.ts",
              "line": 32,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 932,
              "name": "RayFace",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Calculates the xyz intersection between a ray and one or more polygons.\n\\n\nThe intersection between each polygon face triangle and the ray is caclulated.\nThis ignores the intersections between rays and edges (including polyline edges).\n\\n",
                "returns": "A list of xyz intersection coordinates.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "coords = intersect.RayFace(ray, polygon1)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns a list of coordinates where the ray  intersects with the polygon.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 933,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 934,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A ray."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TRay"
                  }
                },
                {
                  "id": 935,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A polygon or list of polygons."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "Txyz"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            936,
            931
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/intersect.ts",
          "line": 6,
          "character": 0
        }
      ]
    },
    {
      "id": 1024,
      "name": "io",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `io` module has functions for importing and exporting."
      },
      "children": [
        {
          "id": 1105,
          "name": "_EIODataFormat",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1108,
              "name": "GEOJSON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 43,
                  "character": 4
                }
              ],
              "defaultValue": "\"geojson\""
            },
            {
              "id": 1106,
              "name": "GI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 41,
                  "character": 4
                }
              ],
              "defaultValue": "\"gi\""
            },
            {
              "id": 1107,
              "name": "OBJ",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 42,
                  "character": 4
                }
              ],
              "defaultValue": "\"obj\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1108,
                1106,
                1107
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 40,
              "character": 12
            }
          ]
        },
        {
          "id": 1109,
          "name": "_EIODataSource",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1110,
              "name": "DEFAULT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 46,
                  "character": 4
                }
              ],
              "defaultValue": "\"From URL\""
            },
            {
              "id": 1111,
              "name": "FILESYS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 47,
                  "character": 4
                }
              ],
              "defaultValue": "\"From Local Storage\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1110,
                1111
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 45,
              "character": 12
            }
          ]
        },
        {
          "id": 1112,
          "name": "_EIODataTarget",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1113,
              "name": "DEFAULT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 50,
                  "character": 4
                }
              ],
              "defaultValue": "\"Save to Hard Disk\""
            },
            {
              "id": 1114,
              "name": "FILESYS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 51,
                  "character": 4
                }
              ],
              "defaultValue": "\"Save to Local Storage\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1113,
                1114
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 49,
              "character": 12
            }
          ]
        },
        {
          "id": 1115,
          "name": "_EIOExportDataFormat",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1119,
              "name": "GEOJSON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 252,
                  "character": 4
                }
              ],
              "defaultValue": "\"geojson\""
            },
            {
              "id": 1116,
              "name": "GI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 248,
                  "character": 4
                }
              ],
              "defaultValue": "\"gi\""
            },
            {
              "id": 1120,
              "name": "GLTF",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 253,
                  "character": 4
                }
              ],
              "defaultValue": "\"gltf\""
            },
            {
              "id": 1118,
              "name": "OBJ_POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 250,
                  "character": 4
                }
              ],
              "defaultValue": "\"obj_ps\""
            },
            {
              "id": 1117,
              "name": "OBJ_VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/io.ts",
                  "line": 249,
                  "character": 4
                }
              ],
              "defaultValue": "\"obj_v\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1119,
                1116,
                1120,
                1118,
                1117
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 247,
              "character": 12
            }
          ]
        },
        {
          "id": 1068,
          "name": "Export",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 272,
              "character": 22
            }
          ],
          "signatures": [
            {
              "id": 1069,
              "name": "Export",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Export data from the model as a file.\n\\n\nIf you expore to your  hard disk,\nit will result in a popup in your browser, asking you to save the file.\n\\n\nIf you export to Local Storage, there will be no popup.\n\\n",
                "returns": "void.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "io.Export (#pg, 'my_model.obj', obj)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Exports all the polgons in the model as an OBJ.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 1070,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1071,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Optional. Entities to be exported. If null, the whole model will be exported."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1072,
                  "name": "file_name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Name of the file as a string."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1073,
                  "name": "data_format",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the file format."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1115,
                    "name": "_EIOExportDataFormat"
                  }
                },
                {
                  "id": 1074,
                  "name": "data_target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, where the data is to be exported to."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1112,
                    "name": "_EIODataTarget"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "void"
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1088,
          "name": "Geoalign",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 410,
              "character": 17
            }
          ],
          "signatures": [
            {
              "id": 1089,
              "name": "Geoalign",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Set the geolocation of the Cartesian coordinate system.\n\\n\nThe Cartesian coordinate system is geolocated by defining two points:\n- The latitude-longitude of the Cartesian origin.\n- The latitude-longitude of a point on the positive Cartesian X-axis.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 1090,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1091,
                  "name": "lat_long_o",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the latitude and longitude of the origin of the Cartesian coordinate\nsystem."
                  },
                  "type": {
                    "type": "reference",
                    "name": "Txy"
                  }
                },
                {
                  "id": 1092,
                  "name": "lat_long_x",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the latitude and longitude of a point on the x-axis of the Cartesian\ncoordinate system."
                  },
                  "type": {
                    "type": "reference",
                    "name": "Txy"
                  }
                },
                {
                  "id": 1093,
                  "name": "elev",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the elevation of the Cartesian coordinate system above the ground plane."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1082,
          "name": "Geolocate",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 369,
              "character": 17
            }
          ],
          "signatures": [
            {
              "id": 1083,
              "name": "Geolocate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Set the geolocation of the Cartesian coordinate system.",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 1084,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1085,
                  "name": "lat_long",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the latitude and longitude of the origin of the Cartesian coordinate system."
                  },
                  "type": {
                    "type": "reference",
                    "name": "Txy"
                  }
                },
                {
                  "id": 1086,
                  "name": "rot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the counter-clockwise rotation of the Cartesian coordinate system, in radians."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1087,
                  "name": "elev",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the elevation of the Cartesian coordinate system above the ground plane."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1047,
          "name": "Import",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 106,
              "character": 22
            }
          ],
          "signatures": [
            {
              "id": 1048,
              "name": "Import",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Imports data into the model.\n\\n\nThere are two ways of specifying the file location to be imported:\n- A url, e.g. \"https://www.dropbox.com/xxxx/my_data.obj\"\n- A file name in the local storage, e.g. \"my_data.obj\".\n\\n\nTo place a file in local storage, go to the Mobius menu, and select 'Local Storage' from the dropdown.\nNote that a script using a file in local storage may fail when others try to open the file.\n\\n",
                "returns": "A list of the positions, points, polylines, polygons and collections added to the model.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "io.Import (\"my_data.obj\", obj)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Imports the data from my_data.obj, from local storage.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 1049,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1050,
                  "name": "input_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1051,
                  "name": "data_format",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the file format."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1105,
                    "name": "_EIODataFormat"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TId"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TId"
                        }
                      },
                      {
                        "type": "reflection",
                        "declaration": {
                          "id": 1052,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "modules/basic/io.ts",
                              "line": 106,
                              "character": 117
                            }
                          ]
                        }
                      }
                    ]
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1094,
          "name": "LatLong2XYZ",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 555,
              "character": 17
            }
          ],
          "signatures": [
            {
              "id": 1095,
              "name": "LatLong2XYZ",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Transform a coordinate from latitude-longitude Geodesic coordinate to a Cartesian XYZ coordinate,\nbased on the geolocation of the model.",
                "returns": "XYZ coordinates\n"
              },
              "parameters": [
                {
                  "id": 1096,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1097,
                  "name": "lat_long",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Latitude and longitude coordinates."
                  },
                  "type": {
                    "type": "reference",
                    "name": "Txy"
                  }
                },
                {
                  "id": 1098,
                  "name": "elev",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Set the elevation of the Cartesian coordinate system above the ground plane."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "Txyz"
              }
            }
          ]
        },
        {
          "id": 1025,
          "name": "Read",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 60,
              "character": 23
            }
          ],
          "signatures": [
            {
              "id": 1026,
              "name": "Read",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Read data from a Url or from local storage.",
                "returns": "the data.\n"
              },
              "parameters": [
                {
                  "id": 1027,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1028,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The data to be read (from URL or from Local Storage)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reflection",
                        "declaration": {
                          "id": 1029,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "modules/basic/io.ts",
                              "line": 60,
                              "character": 78
                            }
                          ]
                        }
                      }
                    ]
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1035,
          "name": "Write",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 75,
              "character": 22
            }
          ],
          "signatures": [
            {
              "id": 1036,
              "name": "Write",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Write data to the hard disk or to the local storage.",
                "returns": "whether the data is successfully saved.\n"
              },
              "parameters": [
                {
                  "id": 1037,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1038,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The data to be saved (can be the url to the file)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1039,
                  "name": "file_name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name to be saved in the file system (file extension should be included)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1040,
                  "name": "data_target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, where the data is to be exported to."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1112,
                    "name": "_EIODataTarget"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "reference",
                    "name": "Boolean"
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1075,
          "name": "_Async_Param_Export",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 294,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1076,
              "name": "_Async_Param_Export",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1077,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1078,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 1079,
                  "name": "file_name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1080,
                  "name": "data_format",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1115,
                    "name": "_EIOExportDataFormat"
                  }
                },
                {
                  "id": 1081,
                  "name": "data_target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1112,
                    "name": "_EIODataTarget"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1053,
          "name": "_Async_Param_Import",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 124,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1054,
              "name": "_Async_Param_Import",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1055,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1056,
                  "name": "input_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1057,
                  "name": "data_format",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1105,
                    "name": "_EIODataFormat"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TId"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TId"
                        }
                      },
                      {
                        "type": "reflection",
                        "declaration": {
                          "id": 1058,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "modules/basic/io.ts",
                              "line": 124,
                              "character": 124
                            }
                          ]
                        }
                      }
                    ]
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1030,
          "name": "_Async_Param_Read",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 63,
              "character": 17
            }
          ],
          "signatures": [
            {
              "id": 1031,
              "name": "_Async_Param_Read",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1032,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1033,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reflection",
                        "declaration": {
                          "id": 1034,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "modules/basic/io.ts",
                              "line": 63,
                              "character": 85
                            }
                          ]
                        }
                      }
                    ]
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1041,
          "name": "_Async_Param_Write",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 85,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1042,
              "name": "_Async_Param_Write",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1043,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1044,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1045,
                  "name": "file_name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1046,
                  "name": "data_target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1112,
                    "name": "_EIODataTarget"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "reference",
                    "name": "Boolean"
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1102,
          "name": "_Async_Param__getFile",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 788,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1103,
              "name": "_Async_Param__getFile",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1104,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1099,
          "name": "_getFile",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 727,
              "character": 22
            }
          ],
          "signatures": [
            {
              "id": 1100,
              "name": "_getFile",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1101,
                  "name": "source",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1059,
          "name": "_import",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 127,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1060,
              "name": "_import",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1061,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1062,
                  "name": "model_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1063,
                  "name": "data_format",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1105,
                    "name": "_EIODataFormat"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TId"
              }
            }
          ]
        },
        {
          "id": 1064,
          "name": "_importGI",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/io.ts",
              "line": 142,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1065,
              "name": "_importGI",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1066,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1067,
                  "name": "json_str",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            1105,
            1109,
            1112,
            1115
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1068,
            1088,
            1082,
            1047,
            1094,
            1025,
            1035,
            1075,
            1053,
            1030,
            1041,
            1102,
            1099,
            1059,
            1064
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/io.ts",
          "line": 6,
          "character": 0
        }
      ]
    },
    {
      "id": 28,
      "name": "list",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `list` module has functions for working with lists of items.\nThese functions have no direct link with the model, the are generic functions for manipulating lists.\nThe functions are often used when manipulating lists of IDs of entities in the model.\nThese functions neither make nor modify anything in the model.\nIn addition to these functions, there are also various inline functions available for working with lists."
      },
      "children": [
        {
          "id": 55,
          "name": "_EAddMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 59,
              "name": "EXTEND_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 22,
                  "character": 4
                }
              ],
              "defaultValue": "\"extend_end\""
            },
            {
              "id": 58,
              "name": "EXTEND_START",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 21,
                  "character": 4
                }
              ],
              "defaultValue": "\"extend_start\""
            },
            {
              "id": 60,
              "name": "SORTED_ALPHA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 23,
                  "character": 4
                }
              ],
              "defaultValue": "\"alpha_descending\""
            },
            {
              "id": 64,
              "name": "SORTED_ID",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 27,
                  "character": 4
                }
              ],
              "defaultValue": "\"ID_descending\""
            },
            {
              "id": 62,
              "name": "SORTED_NUM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 25,
                  "character": 4
                }
              ],
              "defaultValue": "\"numeric_descending\""
            },
            {
              "id": 61,
              "name": "SORTED_REV_ALPHA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 24,
                  "character": 4
                }
              ],
              "defaultValue": "\"alpha_ascending\""
            },
            {
              "id": 65,
              "name": "SORTED_REV_ID",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "defaultValue": "\"ID_ascending\""
            },
            {
              "id": 63,
              "name": "SORTED_REV_NUM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"numeric_ascending\""
            },
            {
              "id": 57,
              "name": "TO_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 20,
                  "character": 4
                }
              ],
              "defaultValue": "\"to_end\""
            },
            {
              "id": 56,
              "name": "TO_START",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 19,
                  "character": 4
                }
              ],
              "defaultValue": "\"to_start\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                59,
                58,
                60,
                64,
                62,
                61,
                65,
                63,
                57,
                56
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 18,
              "character": 12
            }
          ]
        },
        {
          "id": 66,
          "name": "_ERemoveMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 70,
              "name": "REMOVE_ALL_VALUES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 131,
                  "character": 4
                }
              ],
              "defaultValue": "\"all_values\""
            },
            {
              "id": 68,
              "name": "REMOVE_FIRST_VALUE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 129,
                  "character": 4
                }
              ],
              "defaultValue": "\"first_value\""
            },
            {
              "id": 67,
              "name": "REMOVE_INDEX",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 128,
                  "character": 4
                }
              ],
              "defaultValue": "\"index\""
            },
            {
              "id": 69,
              "name": "REMOVE_LAST_VALUE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 130,
                  "character": 4
                }
              ],
              "defaultValue": "\"last_value\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                70,
                68,
                67,
                69
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 127,
              "character": 12
            }
          ]
        },
        {
          "id": 71,
          "name": "_EReplaceMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 75,
              "name": "REPLACE_ALL_VALUES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 185,
                  "character": 4
                }
              ],
              "defaultValue": "\"all_values\""
            },
            {
              "id": 73,
              "name": "REPLACE_FIRST_VALUE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 183,
                  "character": 4
                }
              ],
              "defaultValue": "\"first_value\""
            },
            {
              "id": 72,
              "name": "REPLACE_INDEX",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 182,
                  "character": 4
                }
              ],
              "defaultValue": "\"index\""
            },
            {
              "id": 74,
              "name": "REPLACE_LAST_VALUE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 184,
                  "character": 4
                }
              ],
              "defaultValue": "\"last_value\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                75,
                73,
                72,
                74
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 181,
              "character": 12
            }
          ]
        },
        {
          "id": 76,
          "name": "_ESortMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 78,
              "name": "ALPHA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 259,
                  "character": 4
                }
              ],
              "defaultValue": "\"alpha_descending\""
            },
            {
              "id": 82,
              "name": "ID",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 263,
                  "character": 4
                }
              ],
              "defaultValue": "\"ID_descending\""
            },
            {
              "id": 80,
              "name": "NUM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 261,
                  "character": 4
                }
              ],
              "defaultValue": "\"numeric_descending\""
            },
            {
              "id": 86,
              "name": "RANDOM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 267,
                  "character": 4
                }
              ],
              "defaultValue": "\"random\""
            },
            {
              "id": 77,
              "name": "REV",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 258,
                  "character": 4
                }
              ],
              "defaultValue": "\"reverse\""
            },
            {
              "id": 79,
              "name": "REV_ALPHA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 260,
                  "character": 4
                }
              ],
              "defaultValue": "\"alpha_ascending\""
            },
            {
              "id": 83,
              "name": "REV_ID",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 264,
                  "character": 4
                }
              ],
              "defaultValue": "\"ID_ascending\""
            },
            {
              "id": 81,
              "name": "REV_NUM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 262,
                  "character": 4
                }
              ],
              "defaultValue": "\"numeric_ascending\""
            },
            {
              "id": 85,
              "name": "REV_SHIFT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 266,
                  "character": 4
                }
              ],
              "defaultValue": "\"reverse_shift_1\""
            },
            {
              "id": 84,
              "name": "SHIFT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/list.ts",
                  "line": 265,
                  "character": 4
                }
              ],
              "defaultValue": "\"shift_1\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                78,
                82,
                80,
                86,
                77,
                79,
                83,
                81,
                85,
                84
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 257,
              "character": 12
            }
          ]
        },
        {
          "id": 29,
          "name": "Add",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 46,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 30,
              "name": "Add",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds an item to a list.",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "append = list.Add([1,2,3], 4, 'at_end')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Expected value of list is [1,2,3,4]."
                  },
                  {
                    "tag": "example",
                    "text": "append = list.Add([1,2,3], [4, 5], 'at_end')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Expected value of list is [1,2,3,[4,5]]."
                  },
                  {
                    "tag": "example",
                    "text": "append = list.Add([1,2,3], [4,5], 'extend_end')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Expected value of list is [1,2,3,4,5]."
                  },
                  {
                    "tag": "example",
                    "text": "append = list.Add([\"a\", \"c\", \"d\"], \"b\", 'alpha_descending')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Expected value of list is [\"a\", \"b\", \"c\", \"d\"].\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 31,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List to add the item to."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 32,
                  "name": "item",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Item to add."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 33,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the method."
                  },
                  "type": {
                    "type": "reference",
                    "id": 55,
                    "name": "_EAddMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 34,
          "name": "Remove",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 145,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 35,
              "name": "Remove",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes items in a list.\n\\n\nIf method is set to 'index', then item should be the index of the item to be replaced.\nNegative indexes are allowed.\nIf method is not set to 'index', then item should be the value.",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 36,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list in which to remove items"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 37,
                  "name": "item",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The item to remove, either the index of the item or the value. Negative indexes are allowed."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 38,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the method for removing items from the list."
                  },
                  "type": {
                    "type": "reference",
                    "id": 66,
                    "name": "_ERemoveMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 39,
          "name": "Replace",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 199,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 40,
              "name": "Replace",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Replaces items in a list.\n\\n\nIf method is set to 'index', then old_item should be the index of the item to be replaced. Negative indexes are allowed.\nIf method is not set to 'index', then old_item should be the value.",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 41,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The list in which to replace items"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 42,
                  "name": "old_item",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The old item to replace."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 43,
                  "name": "new_item",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The new item."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 44,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the method for replacing items in the list."
                  },
                  "type": {
                    "type": "reference",
                    "id": 71,
                    "name": "_EReplaceMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 45,
          "name": "Sort",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 251,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 46,
              "name": "Sort",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sorts an list, based on the values of the items in the list.\n\\n\nFor alphabetical sort, values are sorted character by character,\nnumbers before upper case alphabets, upper case alphabets before lower case alphabets.",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "list.Sort(list, 'alpha')"
                  },
                  {
                    "tag": "example_info",
                    "text": "where list = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]\nExpected value of list is [\"1\",\"10\",\"2\",\"Orange\",\"apple\"]."
                  },
                  {
                    "tag": "example",
                    "text": "list.Sort(list, 'numeric')"
                  },
                  {
                    "tag": "example_info",
                    "text": "where list = [56,6,48]\nExpected value of list is [6,48,56].\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 47,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List to sort."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 48,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum; specifies the sort method to use."
                  },
                  "type": {
                    "type": "reference",
                    "id": 76,
                    "name": "_ESortMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 49,
          "name": "Splice",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/list.ts",
              "line": 351,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 50,
              "name": "Splice",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Removes and inserts items in a list.\n\\n\nIf no items_to_add are specified, then items are only removed.\nIf num_to_remove is 0, then values are only inserted.",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "result = list.Splice(list1, 1, 3, [2.2, 3.3])"
                  },
                  {
                    "tag": "example_info",
                    "text": "where list1 = [10, 20, 30, 40, 50]\nExpected value of result is [10, 2.2, 3.3, 50]. New items were added where the items were removed.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 51,
                  "name": "list",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List to splice."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                },
                {
                  "id": 52,
                  "name": "index",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Zero-based index after which to starting removing or inserting items."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 53,
                  "name": "num_to_remove",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of items to remove."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 54,
                  "name": "items_to_insert",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Optional, list of items to add, or null."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            55,
            66,
            71,
            76
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            29,
            34,
            39,
            45,
            49
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/list.ts",
          "line": 10,
          "character": 0
        }
      ]
    },
    {
      "id": 321,
      "name": "make",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `make` module has functions for making new entities in the model.\nAll these functions return the IDs of the entities that are created."
      },
      "children": [
        {
          "id": 378,
          "name": "_EClose",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 380,
              "name": "CLOSE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 20,
                  "character": 4
                }
              ],
              "defaultValue": "\"close\""
            },
            {
              "id": 379,
              "name": "OPEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 19,
                  "character": 4
                }
              ],
              "defaultValue": "\"open\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                380,
                379
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 18,
              "character": 12
            }
          ]
        },
        {
          "id": 394,
          "name": "_ECutMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 395,
              "name": "KEEP_ABOVE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 38,
                  "character": 4
                }
              ],
              "defaultValue": "\"keep_above\""
            },
            {
              "id": 396,
              "name": "KEEP_BELOW",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 39,
                  "character": 4
                }
              ],
              "defaultValue": "\"keep_below\""
            },
            {
              "id": 397,
              "name": "KEEP_BOTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 40,
                  "character": 4
                }
              ],
              "defaultValue": "\"keep_both\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                395,
                396,
                397
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 37,
              "character": 12
            }
          ]
        },
        {
          "id": 389,
          "name": "_EExtrudeMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 393,
              "name": "COPIES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 35,
                  "character": 4
                }
              ],
              "defaultValue": "\"copies\""
            },
            {
              "id": 390,
              "name": "QUADS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 32,
                  "character": 4
                }
              ],
              "defaultValue": "\"quads\""
            },
            {
              "id": 392,
              "name": "RIBS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 34,
                  "character": 4
                }
              ],
              "defaultValue": "\"ribs\""
            },
            {
              "id": 391,
              "name": "STRINGERS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 33,
                  "character": 4
                }
              ],
              "defaultValue": "\"stringers\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                393,
                390,
                392,
                391
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 31,
              "character": 12
            }
          ]
        },
        {
          "id": 381,
          "name": "_ELoftMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 383,
              "name": "CLOSED_QUADS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 24,
                  "character": 4
                }
              ],
              "defaultValue": "\"closed_quads\""
            },
            {
              "id": 387,
              "name": "CLOSED_RIBS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "defaultValue": "\"closed_ribs\""
            },
            {
              "id": 385,
              "name": "CLOSED_STRINGERS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"closed_stringers\""
            },
            {
              "id": 388,
              "name": "COPIES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 29,
                  "character": 4
                }
              ],
              "defaultValue": "\"copies\""
            },
            {
              "id": 382,
              "name": "OPEN_QUADS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 23,
                  "character": 4
                }
              ],
              "defaultValue": "\"open_quads\""
            },
            {
              "id": 386,
              "name": "OPEN_RIBS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 27,
                  "character": 4
                }
              ],
              "defaultValue": "\"open_ribs\""
            },
            {
              "id": 384,
              "name": "OPEN_STRINGERS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/make.ts",
                  "line": 25,
                  "character": 4
                }
              ],
              "defaultValue": "\"open_stringers\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                383,
                387,
                385,
                388,
                382,
                386,
                384
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 22,
              "character": 12
            }
          ]
        },
        {
          "id": 374,
          "name": "Clone",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 441,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 375,
              "name": "Clone",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds a new copy of specified entities to the model, and deletes the original entity.",
                "returns": "Entities, the cloned entity or a list of cloned entities.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "copies = make.Copy([position1,polyine1,polygon1])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a copy of position1, polyine1, and polygon1.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 376,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 377,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entity or lists of entities to be copied. Entities can be positions, points, polylines, polygons and collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 369,
          "name": "Copy",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 382,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 370,
              "name": "Copy",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a copy of one or more entities.\n\\n\nPositions, objects, and collections can be copied. Topological entities (vertices, edges, and\nwires) cannot be copied since they cannot exist without a parent entity.\n\\n\nWhen entities are copied, their positions are also copied. The original entities and the copied\nentities will not be welded (they will not share positions).\n\\n\nThe copy operation includes an option to also move entities, by a specified vector. If the vector\nis null, then the entities will not be moved.\n\\n\nThe vector argument is overloaded. If you supply a list of vectors, the function will try to find\na 1 -to-1 match between the list of entities and the list of vectors. In the overloaded case, if\nthe two lists do not have the same length, then an error will be thrown.\n\\n",
                "returns": "Entities, the copied entity or a list of copied entities.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "copies = make.Copy([position1, polyine1, polygon1], [0,0,10])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a copy of position1, polyine1, and polygon1 and moves all three entities 10\nunits in the Z direction.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 371,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 372,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Entity or lists of entities to be copied. Entities can be positions, points,\npolylines, polygons and collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 373,
                  "name": "vector",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A vector to move the entities by after copying, can be `null`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 363,
          "name": "Cut",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 328,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 364,
              "name": "Cut",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Cuts polygons and polylines using a plane.",
                "text": "If the 'keep_above' method is selected, then only the part of the cut entities above the plane are kept.\nIf the 'keep_below' method is selected, then only the part of the cut entities below the plane are kept.\nIf the 'keep_both' method is selected, then both the parts of the cut entities are kept.\n\nCurrently does not support cutting polygons with holes. TODO\n\nIf 'keep_both' is selected, returns a list of two lists.\n[[entities above the plane], [entities below the plane]].\n",
                "returns": "Entities, a list of three lists of entities resulting from the cut.\n\n"
              },
              "parameters": [
                {
                  "id": 365,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 366,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Polylines or polygons, or entities from which polyline or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 367,
                  "name": "plane",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The plane to cut with."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TPlane"
                  }
                },
                {
                  "id": 368,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the method for cutting."
                  },
                  "type": {
                    "type": "reference",
                    "id": 394,
                    "name": "_ECutMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TId"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TId"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 345,
          "name": "Extrude",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 217,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 346,
              "name": "Extrude",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Extrudes geometry by distance or by vector.\n- Extrusion of a position, vertex, or point produces polylines;\n- Extrusion of an edge, wire, or polyline produces polygons;\n- Extrusion of a face or polygon produces polygons, capped at the top.",
                "text": "The geometry that is generated depends on the method that is selected.\n- The 'quads' methods will generate polygons.\n- The 'stringers' and 'ribs' methods will generate polylines.\n- The 'copies' method will generate copies of the input geometry type.\n",
                "returns": "Entities, a list of new polygons or polylines resulting from the extrude.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "extrusion1 = make.Extrude(point1, 10, 2, 'quads')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a polyline of total length 10 (with two edges of length 5 each) in the z-direction.\nIn this case, the 'quads' setting is ignored."
                  },
                  {
                    "tag": "example",
                    "text": "extrusion2 = make.Extrude(polygon1, [0,5,0], 1, 'quads')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Extrudes polygon1 by 5 in the y-direction, creating a list of quad surfaces.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 347,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 348,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of entities, can be any type of entitiy."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 349,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number or vector. If number, assumed to be [0,0,value] (i.e. extrusion distance in z-direction)."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      }
                    ]
                  }
                },
                {
                  "id": 350,
                  "name": "divisions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of divisions to divide extrusion by. Minimum is 1."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 351,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, when extruding edges, select quads, stringers, or ribs"
                  },
                  "type": {
                    "type": "reference",
                    "id": 389,
                    "name": "_EExtrudeMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 359,
          "name": "Join",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 292,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 360,
              "name": "Join",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Joins existing polyline or polygons to create new polyline or polygons.",
                "text": "In order to be joined, the polylines or polygons must be fused (i.e. share the same positions)\n\nThe existing polygons are not affected.\n\nNote: Joining polylines currently not implemented.\n",
                "returns": "Entities, a list of new polylines or polygons resulting from the join.\n"
              },
              "parameters": [
                {
                  "id": 361,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 362,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Polylines or polygons, or entities from which polylines or polygons can be extracted."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 339,
          "name": "Loft",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 177,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 340,
              "name": "Loft",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Lofts between entities.",
                "text": "The geometry that is generated depends on the method that is selected.\n- The 'quads' methods will generate polygons.\n- The 'stringers' and 'ribs' methods will generate polylines.\n- The 'copies' method will generate copies of the input geometry type.\n",
                "returns": "Entities, a list of new polygons or polylines resulting from the loft.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "quads = make.Loft([polyline1,polyline2,polyline3], 1, 'open_quads')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates quad polygons lofting between polyline1, polyline2, polyline3."
                  },
                  {
                    "tag": "example",
                    "text": "quads = make.Loft([polyline1,polyline2,polyline3], 1, 'closed_quads')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates quad polygons lofting between polyline1, polyline2, polyline3, and back to polyline1."
                  },
                  {
                    "tag": "example",
                    "text": "quads = make.Loft([ [polyline1,polyline2], [polyline3,polyline4] ] , 1, 'open_quads')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates quad polygons lofting first between polyline1 and polyline2, and then between polyline3 and polyline4.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 341,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 342,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of entities, or list of lists of entities."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 343,
                  "name": "divisions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 344,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, if 'closed', then close the loft back to the first entity in the list."
                  },
                  "type": {
                    "type": "reference",
                    "id": 381,
                    "name": "_ELoftMethod"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 326,
          "name": "Point",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 75,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 327,
              "name": "Point",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds one or more new points to the model.",
                "returns": "Entities, new point or a list of new points.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "point1 = make.Point(position1)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a point at position1.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 328,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 329,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Position, or list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 335,
          "name": "Polygon",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 136,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 336,
              "name": "Polygon",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds one or more new polygons to the model.",
                "returns": "Entities, new polygon, or a list of new polygons.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "polygon1 = make.Polygon([pos1,pos2,pos3])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a polygon with vertices pos1, pos2, pos3 in sequence."
                  },
                  {
                    "tag": "example",
                    "text": "polygons = make.Polygon([[pos1,pos2,pos3], [pos3,pos4,pos5]])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates two polygons, the first with vertices at [pos1,pos2,pos3], and the second with vertices at [pos3,pos4,pos5].\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 337,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 338,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List or nested lists of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 330,
          "name": "Polyline",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 102,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 331,
              "name": "Polyline",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds one or more new polylines to the model.",
                "returns": "Entities, new polyline, or a list of new polylines.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "polyline1 = make.Polyline([position1,position2,position3], close)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a closed polyline with vertices position1, position2, position3 in sequence.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 332,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 333,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List or nested lists of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 334,
                  "name": "close",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, 'open' or 'close'."
                  },
                  "type": {
                    "type": "reference",
                    "id": 378,
                    "name": "_EClose"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 322,
          "name": "Position",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 55,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 323,
              "name": "Position",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds one or more new position to the model.",
                "returns": "A new position, or nested list of new positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "position1 = make.Position([1,2,3])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a position with coordinates x=1, y=2, z=3."
                  },
                  {
                    "tag": "example",
                    "text": "positions = make.Position([[1,2,3],[3,4,5],[5,6,7]])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates three positions, with coordinates [1,2,3],[3,4,5] and [5,6,7].\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 324,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 325,
                  "name": "coords",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of three numbers, or a list of lists of three numbers."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "reference",
                            "name": "Txyz"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 352,
          "name": "Sweep",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/make.ts",
              "line": 254,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 353,
              "name": "Sweep",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sweeps a cross section wire along a backbone wire.",
                "returns": "Entities, a list of new polygons or polylines resulting from the sweep.\n"
              },
              "parameters": [
                {
                  "id": 354,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 355,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Wires, or entities from which wires can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 356,
                  "name": "x_section",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 357,
                  "name": "divisions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Segment length or number of segments."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 358,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the method for sweeping."
                  },
                  "type": {
                    "type": "reference",
                    "id": 389,
                    "name": "_EExtrudeMethod"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            378,
            394,
            389,
            381
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            374,
            369,
            363,
            345,
            359,
            339,
            326,
            335,
            330,
            322,
            352
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/make.ts",
          "line": 7,
          "character": 0
        }
      ]
    },
    {
      "id": 870,
      "name": "material",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `material` module has functions for defining materials.\nThe material definitions are saved as attributes at the model level.\nFor more informtion, see the threejs docs: https://threejs.org/"
      },
      "children": [
        {
          "id": 923,
          "name": "_ESide",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 925,
              "name": "BACK",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/material.ts",
                  "line": 22,
                  "character": 4
                }
              ],
              "defaultValue": "\"back\""
            },
            {
              "id": 926,
              "name": "BOTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/material.ts",
                  "line": 23,
                  "character": 4
                }
              ],
              "defaultValue": "\"both\""
            },
            {
              "id": 924,
              "name": "FRONT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/material.ts",
                  "line": 21,
                  "character": 4
                }
              ],
              "defaultValue": "\"front\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                925,
                926,
                924
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 20,
              "character": 12
            }
          ]
        },
        {
          "id": 927,
          "name": "_Ecolors",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 928,
              "name": "NO_VERT_COLORS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/material.ts",
                  "line": 36,
                  "character": 4
                }
              ],
              "defaultValue": "\"none\""
            },
            {
              "id": 929,
              "name": "VERT_COLORS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/material.ts",
                  "line": 37,
                  "character": 4
                }
              ],
              "defaultValue": "\"apply_rgb\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                928,
                929
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 35,
              "character": 12
            }
          ]
        },
        {
          "id": 891,
          "name": "Glass",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 329,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 892,
              "name": "Glass",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a glass material with an opacity setting. The material will default to a Phong material.\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 893,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 894,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 895,
                  "name": "opacity",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The opacity of the glass, between 0 (totally transparent) and 1 (totally opaque)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 896,
          "name": "Lambert",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 364,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 897,
              "name": "Lambert",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a Lambert material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshLambertMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 898,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 899,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 900,
                  "name": "emissive",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 876,
          "name": "LineMat",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 217,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 877,
              "name": "LineMat",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a line material and saves it in the model attributes.\n\\n\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/LineBasicMaterial)\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/LineDashedMaterial)\n\\n\nThe color of the material can either ignore or apply the vertex rgb colors.\nIf 'apply' id selected, then the actual color will be a combination of the material color\nand the vertex colors, as specified by the a vertex attribute called 'rgb'.\nIn such a case, if material color is set to white, then it will\nhave no effect, and the color will be defined by the vertex [r,g,b] values.\n\\n\nIn order to assign a material to polylines in the model, a polyline attribute called 'material'.\nwill be created. The value for each polyline must either be null, or must be a material name.\n\\n\nFor dashed lines, the 'dash_gap_scale' parameter can be set.\n- If 'dash_gap_scale' is null will result in a continouse line.\n- If 'dash_gap_scale' is a single number: dash = gap = dash_gap_scale, scale = 1.\n- If 'dash_gap_scale' is a list of two numbers: dash = dash_gap_scale[0], gap = dash_gap_scale[1], scale = 1.\n- If 'dash_gap_scale' is a list of three numbers: dash = dash_gap_scale[0], gap = dash_gap_scale[1], scale = dash_gap_scale[2].\n\\n\nDue to limitations of the OpenGL Core Profile with the WebGL renderer on most platforms,\nline widths cannot be rendered. As a result, lines width will always be set to 1.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 878,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 879,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 880,
                  "name": "color",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The diffuse color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                },
                {
                  "id": 881,
                  "name": "dash_gap_scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Size of the dash and gap, and a scale factor. (The gap and scale are optional.)"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 882,
                  "name": "select_vert_colors",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select whether to use vertex colors if they exist."
                  },
                  "type": {
                    "type": "reference",
                    "id": 927,
                    "name": "_Ecolors"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 883,
          "name": "MeshMat",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 288,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 884,
              "name": "MeshMat",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a basic mesh material and saves it in the model attributes.\n\\n\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshBasicMaterial)\n\\n\nThe color of the material can either ignore or apply the vertex rgb colors.\nIf 'apply' id selected, then the actual color will be a combination of the material color\nand the vertex colors, as specified by the a vertex attribute called 'rgb'.\nIn such a case, if material color is set to white, then it will\nhave no effect, and the color will be defined by the vertex [r,g,b] values.\n\\n\nAdditional material properties can be set by calling the functions for the more advanced materials.\nThese include LambertMaterial, PhongMaterial, StandardMaterial, and Physical Material.\nEach of these more advanced materials allows you to specify certain additional settings.\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'.\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 885,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 886,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 887,
                  "name": "color",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The diffuse color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                },
                {
                  "id": 888,
                  "name": "opacity",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The opacity of the glass, between 0 (totally transparent) and 1 (totally opaque)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 889,
                  "name": "select_side",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select front, back, or both."
                  },
                  "type": {
                    "type": "reference",
                    "id": 923,
                    "name": "_ESide"
                  }
                },
                {
                  "id": 890,
                  "name": "select_vert_colors",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select whether to use vertex colors if they exist."
                  },
                  "type": {
                    "type": "reference",
                    "id": 927,
                    "name": "_Ecolors"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 901,
          "name": "Phong",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 395,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 902,
              "name": "Phong",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a Phong material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshPhongMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 903,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 904,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 905,
                  "name": "emissive",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                },
                {
                  "id": 906,
                  "name": "specular",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The specular color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                },
                {
                  "id": 907,
                  "name": "shininess",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The shininess, between 0 and 100."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 915,
          "name": "Physical",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 481,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 916,
              "name": "Physical",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a Physical material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 917,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 918,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 919,
                  "name": "emissive",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                },
                {
                  "id": 920,
                  "name": "roughness",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The roughness, between 0 (smooth) and 1 (rough)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 921,
                  "name": "metalness",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The metalness, between 0 (non-metalic) and 1 (metalic)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 922,
                  "name": "reflectivity",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The reflectivity, between 0 (non-reflective) and 1 (reflective)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 871,
          "name": "Set",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 116,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 872,
              "name": "Set",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Assign a material to one or more polylines or polygons.\n\\n\nA material name is assigned to the polygons. The named material must be separately defined as a\nmaterial in the model attributes. See the `material.LineMat()` or `material.MeshMat()` functions.\n\\n\nThe material name is a sting.\n\\n\nFor polylines, the `material` argument must be a single name.\n\\n\nFor polygons, the `material` argument can accept either be a single name, or a\nlist of two names. If it is a single name, then the same material is assigned to both the\nfront and back of teh polygon. If it is a list of two names, then the first material is assigned\nto the front, and the second material is assigned to the back.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 873,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 874,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The entities for which to set the material."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 875,
                  "name": "material",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 908,
          "name": "Standard",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/material.ts",
              "line": 438,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 909,
              "name": "Standard",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a Standard material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshStandardMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 910,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 911,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The name of the material."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 912,
                  "name": "emissive",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                },
                {
                  "id": 913,
                  "name": "roughness",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The roughness, between 0 (smooth) and 1 (rough)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 914,
                  "name": "metalness",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The metalness, between 0 (non-metalic) and 1 (metalic)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            923,
            927
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            891,
            896,
            876,
            883,
            901,
            915,
            871,
            908
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/material.ts",
          "line": 8,
          "character": 0
        }
      ]
    },
    {
      "id": 398,
      "name": "modify",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `modify` module has functions for modifying existing entities in the model.\nThese functions do not make any new entities, and they do not change the topology of objects.\nThese functions only change attribute values.\nAll these functions have no return value."
      },
      "children": [
        {
          "id": 416,
          "name": "Mirror",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 145,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 417,
              "name": "Mirror",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Mirrors entities across a plane.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.Mirror(polygon1, plane1)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Mirrors polygon1 across plane1.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 418,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 419,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An entity or list of entities to mirros."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 420,
                  "name": "plane",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A plane to scale around. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted, \\n\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 399,
          "name": "Move",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 42,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 400,
              "name": "Move",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Moves entities. The directio and distance if movement is specified as a vector.\n\\n\nIf only one vector is given, then all entities are moved by the same vector.\nIf a list of vectors is given, the each entity will be moved by a different vector.\nIn this case, the number of vectors should be equal to the number of entities.\n\\n\nIf a position is shared between entites that are being moved by different vectors,\nthen the position will be moved by the average of the vectors.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.Move(pline1, [1,2,3])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Moves pline1 by [1,2,3]."
                  },
                  {
                    "tag": "example",
                    "text": "modify.Move([pos1, pos2, pos3], [[0,0,1], [0,0,1], [0,1,0]] )"
                  },
                  {
                    "tag": "example_info",
                    "text": "Moves pos1 by [0,0,1], pos2 by [0,0,1], and pos3 by [0,1,0]."
                  },
                  {
                    "tag": "example",
                    "text": "modify.Move([pgon1, pgon2], [1,2,3] )"
                  },
                  {
                    "tag": "example_info",
                    "text": "Moves both pgon1 and pgon2 by [1,2,3].\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 401,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 402,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An entity or list of entities to move."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 403,
                  "name": "vectors",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Txyz"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 427,
          "name": "Offset",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 214,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 428,
              "name": "Offset",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Offsets wires.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.Offset(polygon1, 10)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Offsets the wires inside polygon1 by 10 units. Holes will also be offset.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 429,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 430,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Edges, wires, faces, polylines, polygons, collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 431,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The distance to offset by, can be either positive or negative"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 432,
          "name": "Remesh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 248,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 433,
              "name": "Remesh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Remesh a face or polygon.\n\\n\nWhen a face or polygon is deformed, the triangles that make up that face will sometimes become incorrect.\n\\n\nRemeshing will regenerate the triangulated mesh for the face.\n\\n\nRemeshing is not performed automatically as it would degrade performance.\nInstead, it is left up to the user to remesh only when it is actually required.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.Remesh(polygon1)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Remeshs the face of the polygon.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 434,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 435,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Single or list of faces, polygons, collections."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 404,
          "name": "Rotate",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 74,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 405,
              "name": "Rotate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Rotates entities on plane by angle.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.Rotate(polyline1, plane1, PI)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Rotates polyline1 around the z-axis of plane1 by PI (i.e. 180 degrees).\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 406,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 407,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An entity or list of entities to rotate."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 408,
                  "name": "ray",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A ray to rotate around. \\n\nGiven a plane, a ray will be created from the plane z axis. \\n\nGiven an `xyz` location, a ray will be generated with an origin at this location, and a direction `[0, 0, 1]`. \\n\nGiven any entities, the centroid will be extracted, \\n\nand a ray will be generated with an origin at this centroid, and a direction `[0, 0, 1]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                },
                {
                  "id": 409,
                  "name": "angle",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Angle (in radians)."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 410,
          "name": "Scale",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 111,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 411,
              "name": "Scale",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Scales entities relative to a plane.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.Scale(entities, plane1, 0.5)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Scales entities by 0.5 on plane1."
                  },
                  {
                    "tag": "example",
                    "text": "modify.Scale(entities, plane1, [0.5, 1, 1])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Scales entities by 0.5 along the x axis of plane1, with no scaling along the y and z axes.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 412,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 413,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An entity or list of entities to scale."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 414,
                  "name": "plane",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A plane to scale around. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted, \\n\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                },
                {
                  "id": 415,
                  "name": "scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Scale factor, a single number to scale equally, or [scale_x, scale_y, scale_z] relative to the plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 421,
          "name": "XForm",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/modify.ts",
              "line": 183,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 422,
              "name": "XForm",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Transforms entities from a source plane to a target plane.\n\\n",
                "returns": "void",
                "tags": [
                  {
                    "tag": "example",
                    "text": "modify.XForm(polygon1, plane1, plane2)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Transforms polygon1 from plane1 to plane2.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 423,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 424,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Vertex, edge, wire, face, position, point, polyline, polygon, collection."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 425,
                  "name": "from_plane",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Plane defining source plane for the transformation. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted, \\n\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                },
                {
                  "id": 426,
                  "name": "to_plane",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Plane defining target plane for the transformation. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted, \\n\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "reference",
                        "name": "TRay"
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            416,
            399,
            427,
            432,
            404,
            410,
            421
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/modify.ts",
          "line": 9,
          "character": 0
        }
      ]
    },
    {
      "id": 219,
      "name": "pattern",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `pattern` module has functions for creating patters of positions.\nThese functions all return lists of position IDs.\nThe list may be nested, depending on which function is selected."
      },
      "children": [
        {
          "id": 297,
          "name": "_EBoxMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 300,
              "name": "COLUMNS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 402,
                  "character": 4
                }
              ],
              "defaultValue": "\"columns\""
            },
            {
              "id": 298,
              "name": "FLAT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 400,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat\""
            },
            {
              "id": 301,
              "name": "LAYERS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 403,
                  "character": 4
                }
              ],
              "defaultValue": "\"layers\""
            },
            {
              "id": 302,
              "name": "QUADS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 404,
                  "character": 4
                }
              ],
              "defaultValue": "\"quads\""
            },
            {
              "id": 299,
              "name": "ROWS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 401,
                  "character": 4
                }
              ],
              "defaultValue": "\"rows\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                300,
                298,
                301,
                302,
                299
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 399,
              "character": 12
            }
          ]
        },
        {
          "id": 314,
          "name": "_EClose",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 316,
              "name": "CLOSE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 1380,
                  "character": 4
                }
              ],
              "defaultValue": "\"close\""
            },
            {
              "id": 315,
              "name": "OPEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 1379,
                  "character": 4
                }
              ],
              "defaultValue": "\"open\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                316,
                315
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 1378,
              "character": 12
            }
          ]
        },
        {
          "id": 317,
          "name": "_ECurveCatRomType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 320,
              "name": "CATMULLROM",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 1476,
                  "character": 4
                }
              ],
              "defaultValue": "\"catmullrom\""
            },
            {
              "id": 318,
              "name": "CENTRIPETAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 1474,
                  "character": 4
                }
              ],
              "defaultValue": "\"centripetal\""
            },
            {
              "id": 319,
              "name": "CHORDAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 1475,
                  "character": 4
                }
              ],
              "defaultValue": "\"chordal\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                320,
                318,
                319
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 1473,
              "character": 12
            }
          ]
        },
        {
          "id": 292,
          "name": "_EGridMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 294,
              "name": "COLUMNS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 217,
                  "character": 4
                }
              ],
              "defaultValue": "\"columns\""
            },
            {
              "id": 293,
              "name": "FLAT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 216,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat\""
            },
            {
              "id": 296,
              "name": "QUADS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 219,
                  "character": 4
                }
              ],
              "defaultValue": "\"quads\""
            },
            {
              "id": 295,
              "name": "ROWS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 218,
                  "character": 4
                }
              ],
              "defaultValue": "\"rows\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                294,
                293,
                296,
                295
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 215,
              "character": 12
            }
          ]
        },
        {
          "id": 303,
          "name": "_EPolyhedronMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 310,
              "name": "FACE_CUBE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 779,
                  "character": 4
                }
              ],
              "defaultValue": "\"face_cube\""
            },
            {
              "id": 313,
              "name": "FACE_DODECA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 782,
                  "character": 4
                }
              ],
              "defaultValue": "\"face_dodeca\""
            },
            {
              "id": 312,
              "name": "FACE_ICOSA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 781,
                  "character": 4
                }
              ],
              "defaultValue": "\"face_icosa\""
            },
            {
              "id": 311,
              "name": "FACE_OCTA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 780,
                  "character": 4
                }
              ],
              "defaultValue": "\"face_octa\""
            },
            {
              "id": 309,
              "name": "FACE_TETRA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 778,
                  "character": 4
                }
              ],
              "defaultValue": "\"face_tetra\""
            },
            {
              "id": 305,
              "name": "FLAT_CUBE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 774,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat_cube\""
            },
            {
              "id": 308,
              "name": "FLAT_DODECA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 777,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat_dodeca\""
            },
            {
              "id": 307,
              "name": "FLAT_ICOSA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 776,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat_icosa\""
            },
            {
              "id": 306,
              "name": "FLAT_OCTA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 775,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat_octa\""
            },
            {
              "id": 304,
              "name": "FLAT_TETRA",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/pattern.ts",
                  "line": 773,
                  "character": 4
                }
              ],
              "defaultValue": "\"flat_tetra\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                310,
                313,
                312,
                311,
                309,
                305,
                308,
                307,
                306,
                304
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 772,
              "character": 12
            }
          ]
        },
        {
          "id": 265,
          "name": "Arc",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 1254,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 266,
              "name": "Arc",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in an arc or circle pattern.\n\\n\nThe `origin` parameter specifies the centre of the polyhedron for which positions will be\ngenerated. The origin can be specified as either a <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for an arc aligned with the origin XY plane.\nSo if the origin plane is rotated, then the rotated will also be rotated.\n\\n\nThe `radius` parameter specifies the size of the arc.\n\\n\nThe `num_positions` parameter specifies the total number of positions to be generated on the arc.\n\\n\nThe `arc_angle` specifies the angle of the arc, in radians. Angles start at thet X-axis of the\norigin plane and move in a counter-clockwise direction. Two angles are needed to define an arc,\na `start_angle` and `end_angle`. The angles may be positive or negative, and may be\ngreater than `2*PI` or smaller than `-2*PI`.\n\\n\nPositions will always be generated in sequence, from the start angle towards the end angle.\n- If the start angle is smaller than the end angle, then the positions will be generated in\ncounter-clockwise order.\n- If the start angle is greater than the end angle, then the positions will be generated in\nclockwise order.\n\\n\nThe angle may either be given as a single number, as a list of two numbers, or as `null`:\n- If the angle is given as a single number, then the arc angles will be ser to be\n`[0, end_angle]`. This means that the start of the arc will coincide with the X-axis\nof the origin plane.\n- If the angle is given as a list of two numbers, then they will be set to be\n`[start_angle, end_angle]`.\n- If the angle is set to `null`, then the arc angles will be set to be\n`[0, 2*PI]` In addition, duplicate positions at start and end of the arc are\nautomatically removed.\n\\n\nNote that setting the arc angle to null is not the same as setting it to `2*PI`\nWhen setting the arc angle to `2*PI`, you will get a duplicate positions at start and end\nof the arc.\n\\n",
                "returns": "Entities, a list of positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Arc([0,0,0], 10, 12, PI)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 12 positions distributed equally along a semicircle of radius 10\nstarting at an angle of 0 and ending at an angle of 180 degrees, rotating in a counter-clockwise\ndirection.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 267,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 268,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>, specifying the centre of the arc.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 269,
                  "name": "radius",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Radius of circle as a number."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 270,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of positions to be distributed equally along the arc."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 271,
                  "name": "arc_angle",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Angle of arc (in radians). If a list of two numbers is given, then the first\nnumber specifies the arc start angle, and the second number the arc end angle, i.e.\n`[arc_start_angle, arc_end_angle]`. If a single numer is specified, then the angles will be set\nto `[0, arc_end_angle]`. If `null` is given, then the angles will be set to `[0, 2 * PI]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 272,
          "name": "Bezier",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 1343,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 273,
              "name": "Bezier",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in an Bezier curve pattern, defined by a list of coordinates.\n\\n\nThe Bezier is created as either a qadratic or cubic Bezier. It is always an open curve.\n\\n\nThe positions are created along the curve at equal parameter values.\nThis means that the euclidean distance between the positions will not necessarily be equal.\n\\n\nFor the quadratic Bezier, three coordinates are required.\nFor the cubic Bezier, four coordinates are required.\n\\n\nThe `coords` parameter gives the list of coordinates\n(three coords for quadratics, four coords for cubics).\nThe first and last coordinates in the list are the start and end positions of the curve.\nThe middle coordinates act as the control points for controlling the shape of the curve.\n\\n\nThe `num_positions` parameter specifies the total number of positions to be generated.\n\\n\nFor more information, see the wikipedia article:\n<a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\">B%C3%A9zier_curve</a>.\n\\n",
                "returns": "Entities, a list of positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Bezier([[0,0,0], [10,0,50], [20,0,0]], 20)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 20 positions distributed along a Bezier curve.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 274,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 275,
                  "name": "coords",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                },
                {
                  "id": 276,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of positions to be distributed along the Bezier."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 244,
          "name": "Box",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 527,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 245,
              "name": "Box",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in a box pattern. Positions are only generated on the outer surface of the box.\nNo positions are generated in the interior of the box.\n\\n\nThe `origin` parameter specifies the centre of the box for which positions will be\ngenerated. The origin can be specified as either a <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a box aligned with the origin XY plane.\nSo if the origin plane is rotated, then the box will also be rotated.\n\\n\nThe `size` parameter specifies the size of the box.\n- If only one number is given, then the width, length, and height are assumed to be equal.\n- If a list of two numbers is given, then they will be interpreted as `[width, length]`,\nand the height will be the same as the length.\n- If a list of three numbers is given, then they will be interpreted as `[width, length, height]`.\n\\n\nThe width dimension will be in the X-direction of the origin plane,\nthe length in the Y direction, and the height in the Z-direction.\n\\n\nThe `num_positions` parameter specifies the number of columns, rows, and layers of positions\nin the box.\n- If only one number is given, then the box is assumed to have equal number columns, rows,\nand layers.\n- If a list of two numbers is given, then they will be interpreted as `[columns, rows]`,\nand the number of layers will be the same as the rows.\n- If a list of three numbers is given, then they will be interpreted as `[columns, rows, layers]`.\n\\n\nThe `columns` will be parallel to the Y-direction of the origin plane,\nand the `rows` will be parallel to the X-direction of the origin plane.\nThe layers are stacked up in the Z-direction of the origin plane.\n\\n\nFor example, consider the following function call:\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'flat')`\nThis will generate the following box:\n\\n\n![An example of pattern.Box](assets/typedoc-json/docMDimgs/pattern_box.png)\n\\n\nBelow are the varying results when calling the function with the method set to\n`flat`, `columns`, `rows` `layers` and `quads`:\n\\n\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'flat')`\n```\nposis = [\"ps0\", \"ps1\", \"ps2\", \"ps3\", \"ps4\", \"ps5\", \"ps6\", \"ps7\", \"ps8\", \"ps9\", \"ps10\", \"ps11\"]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20,30], [2,3,2], 'columns')`\n```\nposis = [\n    [\"ps0\", \"ps1\", \"ps6\", \"ps7\"],\n    [\"ps2\", \"ps3\", \"ps8\", \"ps9\"],\n    [\"ps4\", \"ps5\", \"ps10\", \"ps11\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20,30], [2,3,2], 'rows')`\n```\nposis = [\n    [\"ps0\", \"ps2\", \"ps4\", \"ps6\", \"ps8\", \"ps10\"],\n    [\"ps1\", \"ps3\", \"ps5\", \"ps7\", \"ps9\", \"ps11\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20,30], [2,3,2], 'layers')`\n```\nposis = [\n    [\"ps0\", \"ps1\", \"ps2\", \"ps3\", \"ps4\", \"ps5\"],\n    [\"ps6\", \"ps7\", \"ps8\", \"ps9\", \"ps10\", \"ps11\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20,30], [2,3,2], 'quads')`\n```\nposis = [\n    [\"ps0\", \"ps2\", \"ps3\", \"ps1\"],\n    [\"ps2\", \"ps4\", \"ps5\", \"ps3\"],\n    [\"ps0\", \"ps1\", \"ps7\", \"ps6\"],\n    [\"ps1\", \"ps3\", \"ps9\", \"ps7\"],\n    [\"ps3\", \"ps5\", \"ps11\", \"ps9\"],\n    [\"ps5\", \"ps4\", \"ps10\", \"ps11\"],\n    [\"ps4\", \"ps2\", \"ps8\", \"ps10\"],\n    [\"ps2\", \"ps0\", \"ps6\", \"ps8\"],\n    [\"ps6\", \"ps7\", \"ps9\", \"ps8\"],\n    [\"ps8\", \"ps9\", \"ps11\", \"ps10\"]\n]\n```\n\\n\nWhen the method is set to `columns` or `rows`, polylines can be generated as follows:\n```\nposis = pattern.Box(XY, [10,20,30], [2,3,2], 'rows')\nplines = make.Polyline(posis, 'open')\n```\nWhen the method is set to quads, polygons on the box surface can be generated as follows:\n```\nposis = pattern.Grid(XY, [10,20,30], [2,3,2], 'quads')\npgons = make.Polygon(posis)\n```\n\\n",
                "returns": "Entities, a list of positions, or a list of lists of positions\n(depending on the 'method' setting).",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Box(XY, [10,20,30], [3,4,5], 'quads')`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns positions in a box pattern. The size of the box is 10 wide (in X direction)\n20 long (Y direction), and 30 high (Z direction). The box has 3 columns, 4 rows, and 5 layers.\nThis results in a total of 12 (i.e. 3 x 4) positions in the top and bottom layers, and 10\npositions in the middle two layers. The positions are returned as nested lists, where each\nsub-list contains positions for one quadrilateral.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 246,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 247,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 248,
                  "name": "size",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The width, length, and height of the box.\nIf a single number is given, then the width, length, and height are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[width, length]`,\nand the height is assumed to be equal to the length.\nIf a list of three numbers is given, then they will be interpreted as `[width, length, height]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 249,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of columns, rows, and layers of positions in the box.\nIf a single number is given, then the number of columns, rows, and layers are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[columns, rows]`,\nand the number of layers is assumed to be equal to the number of rows.\nIf a list of three numbers is given, then they will be interpreted as `[columns, rows, layers]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 250,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, define the way the coords will be return as lists."
                  },
                  "type": {
                    "type": "reference",
                    "id": 297,
                    "name": "_EBoxMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 237,
          "name": "Grid",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 320,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 238,
              "name": "Grid",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in a grid pattern.\n\\n\nThe `origin` parameter specifies the centre of the grid for which positions will be\ngenerated. The origin can be specified as either a <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a grid on the origin XY plane. So if the origin plane is\nrotated, then the grid will also be rotated.\n\\n\nThe `size` parameter specifies the size of the grid.\n- If only one number is given, then width and length are assumed to be equal.\n- If a list of two numbers is given, then they will be interpreted as `[width, length]`.\n\\n\nThe width dimension will be in the X-direction of the origin plane, and the length will be in\nthe Y direction of the origin plane.\n\\n\nThe `num_positions` parameter specifies the number of columns and rows of positions in the grid.\n- If only one number is given, then the grid is assumed to have equal number columns and rows.\n- If a list of two numbers is given, then they will be interpreted as `[columns, rows]`.\n\\n\nThe `columns` will be parallel to the Y-direction of the origin plane,\nand the `rows` will be parallel to the X-direction of the origin plane.\n\\n\nFor example, consider the following function call:\n`posis = pattern.Grid(XY, [10, 20], [3, 5], 'flat')`\nThis will generate the following grid:\n\\n\n![An example of pattern.Grid](assets/typedoc-json/docMDimgs/pattern_grid.png)\n\\n\nThe positions can either be returned as a flat list or as nested lists.\nFor the nested lists, three options are available:\n- `columns`: Each nested list represents a column of positions.\n- `rows`: Each nested list represents a row of positions.\n- `quads`: Each nested list represents four positions, forming a quadrilateral. Neighbouring\nquadrilaterals share positions.\n\\n\nBelow are the varying results when calling the function with the method set to\n`flat`, `columns`, `rows` and `quads`:\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'flat')`\n```\nposis = [\"ps0\", \"ps1\", \"ps2\", \"ps3\", \"ps4\", \"ps5\"]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'columns')`\n```\nposis = [\n    [\"ps0\", \"ps2\", \"ps4\"],\n    [\"ps1\", \"ps3\", \"ps5\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'rows')`\n```\nposis = [\n    [\"ps0\", \"ps1\"],\n    [\"ps2\", \"ps3\"],\n    [\"ps4\", \"ps5\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'quads')`\n```\nposis = [\n    [\"ps0\", \"ps1\", \"ps3\", \"ps2\"],\n    [\"ps2\", \"ps3\", \"ps5\", \"ps4\"]\n]\n```\n\\n\nWhen the method is set to `columns` or `rows`, polylines can be generated as follows:\n```\nposis = pattern.Grid(XY, [10,20], [2,3], 'rows')\nplines = make.Polyline(posis, 'open')\n```\nWhen the method is set to quads, polygons can be generated as follows:\n```\nposis = pattern.Grid(XY, [10,20], [2,3], 'quads')\npgons = make.Polygon(posis)\n```\n\\n",
                "returns": "Entities, a list of positions, or a list of lists of positions\n(depending on the 'method' setting).",
                "tags": [
                  {
                    "tag": "example",
                    "text": "posis = pattern.Grid([0,0,0], 10, 3, 'flat')"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 9 positions on a 3x3 square grid with a size of 10."
                  },
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Grid([0,0,0], [10,20], [3,4], 'flat')`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 12 positions on a 3x4 grid. The grid as a width of 10\nand a length of 20. The positions are returned as a flat list.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 239,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 240,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 241,
                  "name": "size",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The width and length of grid.\nIf a single number is given, then the width and length are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[width, length]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 242,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of columns and rows of positions in the grid.\nIf a single number is given, then the number of columns and rows are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[columns, rows]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 243,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, define the way the coords will be return as lists."
                  },
                  "type": {
                    "type": "reference",
                    "id": 292,
                    "name": "_EGridMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 284,
          "name": "Interpolate",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 1508,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 285,
              "name": "Interpolate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in an spline pattern. Returns a list of new positions.\nIt is a type of interpolating spline (a curve that goes through its control points).\n\\n\nThe input is a list of XYZ coordinates. These act as the control points for creating the Spline curve.\nThe positions that get generated will be divided equally between the control points.\nFor example, if you define 4 control points for a closed spline, and set 'num_positions' to be 40,\nthen you will get 8 positions between each pair of control points,\nirrespective of the distance between the control points.\n\\n\nThe spline curve can be created in three ways: 'centripetal', 'chordal', or 'catmullrom'.\n\\n\nFor more information, see the wikipedia article:\n<a href=\"https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">Catmull–Rom spline</a>.\n\\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2f/Catmull-Rom_examples_with_parameters..png\"\nalt=\"Curve types\" width=\"100\">\n\\n",
                "returns": "Entities, a list of positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Spline([[0,0,0], [10,0,50], [20,0,0], [30,0,20], [40,0,10]],\n'chordal','close', 0.2, 50)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 50 positions distributed along a spline curve pattern.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 286,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 287,
                  "name": "coords",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of coordinates."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                },
                {
                  "id": 288,
                  "name": "type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the type of interpolation algorithm."
                  },
                  "type": {
                    "type": "reference",
                    "id": 317,
                    "name": "_ECurveCatRomType"
                  }
                },
                {
                  "id": 289,
                  "name": "tension",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Curve tension, between 0 and 1. This only has an effect when the 'type' is set\nto 'catmullrom'."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 290,
                  "name": "close",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, 'open' or 'close'."
                  },
                  "type": {
                    "type": "reference",
                    "id": 314,
                    "name": "_EClose"
                  }
                },
                {
                  "id": 291,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of positions to be distributed distributed along the spline."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 220,
          "name": "Line",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 40,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 221,
              "name": "Line",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a set of positions in a straight line pattern.\n\\n\nThe `origin` parameter specifies the centre of the straight line along which positions will be\ngenerated. The origin can be specified as either a <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated along an straight line aligned with the X axis of the origin\nplane.\n\\n\nReturns the list of new positions.\n\\n",
                "returns": "Entities, a list of new positions.\n"
              },
              "parameters": [
                {
                  "id": 222,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 223,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 224,
                  "name": "length",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The length of the line along which positions will be generated."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 225,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 226,
          "name": "Linear",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 118,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 227,
              "name": "Linear",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates a set of positions by linear interpolation between the specified coordinates.\n\\n\nThe `num_positions` parameter specifies the number of positions to be generated between\neach pair of coordinates.\n\\n\nThe `method` parameter specifies whether to close the loop of coordinates. If set to `close`,\nthen positions are also generated between the last and first coordinates in the list.\n\\n\nFor the `num_positions` parameters:\n- `num_positions = 0`: No positions are generated.\n- `num_positions = 1`: No new coordinates are calculated.\nIf `close` is true, then positions are generate at all coordinates in the input list.\nIf `close` is false, then positions are generate at all coordinates in the input list\nexcept the last coordinate (which is ignored).\n- `num_positions = 2`: No new coordinates are calculated. Positions are generate at all\ncoordinates in the input list. (The `close` parameter has no effect.)\n- `num_positions = 3`: For each pair of coordinates, one additional coordinate\nis calculated by linear interpolation.\n- `num_positions = 4`: For each pair of coordinates, two additional coordinates\nare calculated by linear interpolation.\n- etc\n\\n\nFor example, lets consider a case where you specify three coordinates, set the method to `close`\nand set `num_positions` to 4. In this case, there will be 3 pairs of coordinates, `[0, 1]`,\n`[1, 2]` and `[2, 0]`. For each pair of coordinates, 2 new calculations are calculated.\nThis results in a total of 9 coordinates. So 9 positions will be generated.\n\\n\nReturns the list of new position IDs.\n\\n",
                "returns": "Entities, a list of new position IDs.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "posis = pattern.Linear([[0,0,0], [10,0,0]], false, 3)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Generates 3 positions, located at [0,0,0], [5,0,0], and [10,0,0]."
                  },
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Linear([[0,0,0], [10,0,0], [10,10,0]], 'close', 4)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Generates 9 positions. Two new coordinates are calculated between each pair of\ninput positions.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 228,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 229,
                  "name": "coords",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of coordinates."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                },
                {
                  "id": 230,
                  "name": "close",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, 'open' or 'close'."
                  },
                  "type": {
                    "type": "reference",
                    "id": 314,
                    "name": "_EClose"
                  }
                },
                {
                  "id": 231,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 277,
          "name": "Nurbs",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 1414,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 278,
              "name": "Nurbs",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in an NURBS curve pattern, defined a list of coordinates.\n\\n\nThe positions are created along the curve according to the parametric equation of the curve.\nThis means that the euclidean distance between the positions will not necessarily be equal.\nFor open BSpline curves, the positions at the start and end tend to be closer together.\n\\n\nThe `coords` parameter gives the list of coordinates for generating the curve.\n- If the curve is open, then the first and last coordinates in the list are the start and end\npositions of the curve. The middle coordinates act as the control points for controlling the\nshape of the curve.\n- If the curve is closed, then all coordinates act as the control points for controlling the\nshape of the curve.\n\\n\nThe degree (between 2 and 5) of the curve defines how smooth the curve is.\nQuadratic: degree = 2\nCubic: degree = 3\nQuartic: degree = 4.\n\\n\nThe number of coordinates should be at least one greater than the degree of the curve.\n\\n\nThe `num_positions` parameter specifies the total number of positions to be generated.\n\\n",
                "returns": "Entities, a list of positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Nurbs([[0,0,0], [10,0,50], [20,0,50], [30,0,0]], 3, 'open', 20)`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 20 positions distributed along a Nurbs curve.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 279,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 280,
                  "name": "coords",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of coordinates (must be at least three)."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "Txyz"
                    }
                  }
                },
                {
                  "id": 281,
                  "name": "degree",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The degree of the curve, and integer between 2 and 5."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 282,
                  "name": "close",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, 'close' or 'open'"
                  },
                  "type": {
                    "type": "reference",
                    "id": 314,
                    "name": "_EClose"
                  }
                },
                {
                  "id": 283,
                  "name": "num_positions",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Number of positions to be distributed along the Bezier."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 251,
          "name": "Polyhedron",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 868,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 252,
              "name": "Polyhedron",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates positions in a polyhedron pattern.\n\\n\nThe five regular polyhedrons can be generated:\n- Tetrahedron (4 triangular faces)\n- Cube (4 square faces)\n- Octahedron (8 triangular faces)\n- Icosahedron (20 triangular faces)\n- Dodecahedron (12 pentagon faces)\n\\n\nThe `origin` parameter specifies the centre of the polyhedron for which positions will be\ngenerated. The origin can be specified as either a <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a polyhedron aligned with the origin XY plane.\nSo if the origin plane is rotated, then the polyhedron will also be rotated.\n\\n\nThe `radius` parameter specifies the size of the polyhedron.\nAll positions that are generated are projected onto the surface of a sphere,\nwith the specified `radius`.\n\\n\nThe faces of the regular polyhedron can be further subdivided by specifying the level of\n`detail`. (When subdivided, it will no longer be regular polyhedrons.)\n\\n\nFor tetrahedrons, octahedrons, and icosahedrons, the `detail` subdivides as follows:\n- Detail = 0: No subdivision\n- Detail = 1: Each triangle edge is subdivided into two edges.\n- Detail = 2: Each triangle edge is subdivided into three edges.\n- etc\n\\n\nCubes and dodecahedrons do not have triangular faces. So in these cases, the first level of\n`detail` converts each non-triangular face into triangles by adding a position at the centre of\nthe face. The `detail` subdivides as follows:\n- Detail= 0: No subdivision.\n- Detail = 1: Convert non-triangular faces into triangles.\n- Detail = 2: Each triangle edge is subdivided into two edges.\n- Detail = 3: Each triangle edge is subdivided into three edges.\n- etc\n\\n\nThe positions can either be returned as a flat list or as nested lists.\nThe nested lists represent the faces of the polyhedron.\nHowever, note that only the positions are returned.\nIf you want to have polygon faces, you need to generate polygons from the positions.\n\\n\nFor example, calling the function with `detail = 0` and `method = 'flat_tetra'`,\nwill result in the following positions:\n```\nposis = [\"ps0\", \"ps1\", \"ps2\", \"ps3\"]\n```\nIf you change the method to `method = 'face_tetra'`, then you will get the following nested lists.\n```\nposis = [\n    [\"ps2\", \"ps1\", \"ps0\"],\n    [\"ps0\", \"ps3\", \"ps2\"],\n    [\"ps1\", \"ps3\", \"ps0\"],\n    [\"ps2\", \"ps3\", \"ps1\"]\n]\n```\nNotice that the number of positions is the same in both cases\n(i.e. in both cases there are 4 positions: 'ps0', 'ps1', 'ps2', 'ps3').\nWhen `face_tetra` is selected selected, the positions are organised into 4 lists,\nrepresenting the 4 faces of the tetrahedron.\n\\n\nThe nested lists can be passed to the `make.Polygon` function in order to generated polygonal faces.\nHere is an example:\n\\n\n```\nposis = pattern.Polyhedron(XY, 10, 0, 'face_tetra')\npgons = make.Polygon(posis)\n```\n\\n\n![Tetrahedron with triangular faces](assets/typedoc-json/docMDimgs/polyhedron_tetra.png)\n\\n",
                "returns": "Entities, a list of positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Polyhedron(XY, 20, 0, 'face_tetra')`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates positions in a regular tetrahedron pattern, with a radius of 20. The\npositions are returned as nested lists, where each list contains the positions for one face.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 253,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 254,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>, specifying the origin of the polyhedron.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 255,
                  "name": "radius",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The radius of the polyhedron."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 256,
                  "name": "detail",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The level of detail for the polyhedron."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 257,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum: The Type of polyhedron to generate."
                  },
                  "type": {
                    "type": "reference",
                    "id": 303,
                    "name": "_EPolyhedronMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 232,
          "name": "Rectangle",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 175,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 233,
              "name": "Rectangle",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creates four positions in a rectangle pattern.\n\\n\nThe `origin` parameter specifies the centre of the rectangle for which positions will be\ngenerated. The origin can be specified as either a <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a rectangle on the origin XY plane. So if the origin plane is\nrotated, then the rectangle will also be rotated.\n\\n\nThe `size` parameter specifies the size of the rectangle. If only one number is given,\nthen width and length are assumed to be equal. If a list of two numbers is given,\nthen they will be interpreted as `[width, length]`.The width dimension will be in the\nX-direction of the origin plane, and the length will be in the Y direction of the origin plane.\n\\n\nReturns a list of new positions.\n\\n",
                "returns": "Entities, a list of four positions.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "posis = pattern.Rectangle([0,0,0], 10)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 4 coords, being the vertices of a 10 by 10 square."
                  },
                  {
                    "tag": "example",
                    "text": "`posis = pattern.Rectangle(XY, [10,20])`"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a list of 4 positions in a rectangle pattern. The rectangle has a width of\n10 (in the X direction) and a length of 20 (in the Y direction).\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 234,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 235,
                  "name": "origin",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A <abbr title='A list of three numbers, [x, y, z]'>coordinate</abbr> or a <abbr title='Three lists of three numbers, [origin, x-axis, y-axis]'>plane</abbr>.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Txyz"
                      },
                      {
                        "type": "reference",
                        "name": "TPlane"
                      }
                    ]
                  }
                },
                {
                  "id": 236,
                  "name": "size",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Size of rectangle. If number, assume square of that length;\nif list of two numbers, x and y lengths respectively."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 258,
          "name": "_polyhedron",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/pattern.ts",
              "line": 895,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 259,
              "name": "_polyhedron",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 260,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 261,
                  "name": "matrix",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "Matrix4"
                  }
                },
                {
                  "id": 262,
                  "name": "radius",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 263,
                  "name": "detail",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 264,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 303,
                    "name": "_EPolyhedronMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            297,
            314,
            317,
            292,
            303
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            265,
            272,
            244,
            237,
            284,
            220,
            226,
            277,
            251,
            232,
            258
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/pattern.ts",
          "line": 9,
          "character": 0
        }
      ]
    },
    {
      "id": 941,
      "name": "poly2d",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `poly2D` module has a set of functions for working with 2D polygons, on the XY plane."
      },
      "children": [
        {
          "id": 1021,
          "name": "_EBBoxMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1022,
              "name": "AABB",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 616,
                  "character": 4
                }
              ],
              "defaultValue": "\"aabb\""
            },
            {
              "id": 1023,
              "name": "OBB",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 617,
                  "character": 4
                }
              ],
              "defaultValue": "\"obb\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1022,
                1023
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 615,
              "character": 12
            }
          ]
        },
        {
          "id": 1017,
          "name": "_EBooleanMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1019,
              "name": "DIFFERENCE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 72,
                  "character": 4
                }
              ],
              "defaultValue": "\"difference\""
            },
            {
              "id": 1018,
              "name": "INTERSECT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 71,
                  "character": 4
                }
              ],
              "defaultValue": "\"intersect\""
            },
            {
              "id": 1020,
              "name": "SYMMETRIC",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 73,
                  "character": 4
                }
              ],
              "defaultValue": "\"symmetric\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1019,
                1018,
                1020
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 70,
              "character": 12
            }
          ]
        },
        {
          "id": 1004,
          "name": "_EClipEndType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1009,
              "name": "CLOSED_PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 37,
                  "character": 4
                }
              ],
              "defaultValue": "\"etClosedPolygon\""
            },
            {
              "id": 1008,
              "name": "CLOSED_PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 36,
                  "character": 4
                }
              ],
              "defaultValue": "\"etClosedLine\""
            },
            {
              "id": 1007,
              "name": "OPEN_BUTT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 35,
                  "character": 4
                }
              ],
              "defaultValue": "\"etOpenButt\""
            },
            {
              "id": 1006,
              "name": "OPEN_ROUND",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 34,
                  "character": 4
                }
              ],
              "defaultValue": "\"etOpenRound\""
            },
            {
              "id": 1005,
              "name": "OPEN_SQUARE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 33,
                  "character": 4
                }
              ],
              "defaultValue": "\"etOpenSquare\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1009,
                1008,
                1007,
                1006,
                1005
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 32,
              "character": 12
            }
          ]
        },
        {
          "id": 1000,
          "name": "_EClipJointType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1003,
              "name": "MITER",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 30,
                  "character": 4
                }
              ],
              "defaultValue": "\"jtMiter\""
            },
            {
              "id": 1002,
              "name": "ROUND",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 29,
                  "character": 4
                }
              ],
              "defaultValue": "\"jtRound\""
            },
            {
              "id": 1001,
              "name": "SQUARE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "defaultValue": "\"jtSquare\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1003,
                1002,
                1001
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 27,
              "character": 12
            }
          ]
        },
        {
          "id": 1010,
          "name": "_EOffset",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1012,
              "name": "BUTT_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 63,
                  "character": 4
                }
              ],
              "defaultValue": "\"butt_end\""
            },
            {
              "id": 1011,
              "name": "SQUARE_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 62,
                  "character": 4
                }
              ],
              "defaultValue": "\"square_end\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1012,
                1011
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 61,
              "character": 12
            }
          ]
        },
        {
          "id": 1013,
          "name": "_EOffsetRound",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 1015,
              "name": "BUTT_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 67,
                  "character": 4
                }
              ],
              "defaultValue": "\"butt_end\""
            },
            {
              "id": 1016,
              "name": "ROUND_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 68,
                  "character": 4
                }
              ],
              "defaultValue": "\"round_end\""
            },
            {
              "id": 1014,
              "name": "SQUARE_END",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/poly2d.ts",
                  "line": 66,
                  "character": 4
                }
              ],
              "defaultValue": "\"square_end\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                1015,
                1016,
                1014
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 65,
              "character": 12
            }
          ]
        },
        {
          "id": 955,
          "name": "BBoxPolygon",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 630,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 956,
              "name": "BBoxPolygon",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a polygon that is a 2D bounding box of the entities.\n\\n\nFor the method, 'aabb' generates an Axis Aligned Bounding Box, and 'obb' generates an Oriented Bounding Box.\n\\n",
                "returns": "A new polygon, the bounding box of the positions.\n"
              },
              "parameters": [
                {
                  "id": 957,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 958,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can bet extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 959,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the method for generating the bounding box."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1021,
                    "name": "_EBBoxMethod"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TId"
              }
            }
          ]
        },
        {
          "id": 964,
          "name": "Boolean",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 788,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 965,
              "name": "Boolean",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Perform a boolean operation on polylines or polygons.\n\\n\nThe entities in A can be either polyline or polygons.\nThe entities in B must be polygons.\nThe polygons in B are first unioned before the operation is performed.\nThe boolean operation is then performed between each polyline or polygon in A, and the unioned B polygons.\n\\n\nIf A is an empty list, then an empty list is returned.\nIf B is an empty list, then the A list is returned.\n\\n",
                "returns": "A list of new polylines and polygons.\n"
              },
              "parameters": [
                {
                  "id": 966,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 967,
                  "name": "a_entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of polyline or polygons, or entities from which polyline or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 968,
                  "name": "b_entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of polygons, or entities from which polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 969,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the boolean operator to apply."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1017,
                    "name": "_EBooleanMethod"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 995,
          "name": "Clean",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 1474,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 996,
              "name": "Clean",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Clean a polyline or polygon.\n\\n\nVertices that are closer together than the specified tolerance will be merged.\nVertices that are colinear within the tolerance distance will be deleted.\n\\n",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 997,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 998,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of polylines or polygons, or entities from which polylines or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 999,
                  "name": "tolerance",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The tolerance for deleting vertices from the polyline."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 951,
          "name": "ConvexHull",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 572,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 952,
              "name": "ConvexHull",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a voronoi subdivision of a polygon.",
                "returns": "A new polygons, the convex hull of the positions.\n"
              },
              "parameters": [
                {
                  "id": 953,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 954,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can bet extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "reference",
                "name": "TId"
              }
            }
          ]
        },
        {
          "id": 947,
          "name": "Delaunay",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 513,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 948,
              "name": "Delaunay",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a delaunay triangulation of set of positions.\n\\n",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 949,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 950,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 977,
          "name": "OffsetChamfer",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 985,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 978,
              "name": "OffsetChamfer",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Offset a polyline or polygon, with chamfered joints.",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 979,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 980,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of pollines or polygons, or entities from which polylines or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 981,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Offset distance"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 982,
                  "name": "end_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the type of end shape for open polylines'."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1010,
                    "name": "_EOffset"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 970,
          "name": "OffsetMitre",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 927,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 971,
              "name": "OffsetMitre",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Offset a polyline or polygon, with mitered joints.",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 972,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 973,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of pollines or polygons, or entities from which polylines or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 974,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Offset distance"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 975,
                  "name": "limit",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Mitre limit"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 976,
                  "name": "end_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the type of end shape for open polylines'."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1010,
                    "name": "_EOffset"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 983,
          "name": "OffsetRound",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 1042,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 984,
              "name": "OffsetRound",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Offset a polyline or polygon, with round joints.",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 985,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 986,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of pollines or polygons, or entities from which polylines or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 987,
                  "name": "dist",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Offset distance"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 988,
                  "name": "tolerance",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The tolerance for the rounded corners."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 989,
                  "name": "end_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the type of end shape for open polylines'."
                  },
                  "type": {
                    "type": "reference",
                    "id": 1013,
                    "name": "_EOffsetRound"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 990,
          "name": "Stitch",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 1116,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 991,
              "name": "Stitch",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds vertices to polyline and polygons at all locations where egdes intersect one another.\nThe vertices are welded.\nThis can be useful for creating networks that can be used for shortest path calculations.\n\\n\nThe input polyline and polygons are copied.\n\\n",
                "returns": "Copies of the input polyline and polygons, stiched.\n"
              },
              "parameters": [
                {
                  "id": 992,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 993,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list polylines or polygons, or entities from which polylines or polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 994,
                  "name": "tolerance",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The tolerance for extending open plines if they are almost intersecting."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 960,
          "name": "Union",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 746,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 961,
              "name": "Union",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create the union of a set of polygons.",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 962,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 963,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of polygons, or entities from which polygons can bet extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 942,
          "name": "Voronoi",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/poly2d.ts",
              "line": 395,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 943,
              "name": "Voronoi",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a voronoi subdivision of one or more polygons.\n\\n",
                "returns": "A list of new polygons.\n"
              },
              "parameters": [
                {
                  "id": 944,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 945,
                  "name": "pgons",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of polygons, or entities from which polygons can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 946,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of positions, or entities from which positions can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            1021,
            1017,
            1004,
            1000,
            1010,
            1013
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            955,
            964,
            995,
            951,
            947,
            977,
            970,
            983,
            990,
            960,
            942
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/poly2d.ts",
          "line": 6,
          "character": 0
        }
      ]
    },
    {
      "id": 102,
      "name": "query",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `query` module has functions for querying entities in the the model.\nMost of these functions all return a list of IDs of entities in the model."
      },
      "children": [
        {
          "id": 175,
          "name": "_EDataType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 178,
              "name": "BOOLEAN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 64,
                  "character": 4
                }
              ],
              "defaultValue": "\"boolean\""
            },
            {
              "id": 180,
              "name": "DICT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 66,
                  "character": 4
                }
              ],
              "defaultValue": "\"dict\""
            },
            {
              "id": 179,
              "name": "LIST",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 65,
                  "character": 4
                }
              ],
              "defaultValue": "\"list\""
            },
            {
              "id": 176,
              "name": "NUMBER",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 62,
                  "character": 4
                }
              ],
              "defaultValue": "\"number\""
            },
            {
              "id": 177,
              "name": "STRING",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 63,
                  "character": 4
                }
              ],
              "defaultValue": "\"string\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                178,
                180,
                179,
                176,
                177
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 61,
              "character": 12
            }
          ]
        },
        {
          "id": 192,
          "name": "_EEdgeMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 194,
              "name": "NEXT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 459,
                  "character": 4
                }
              ],
              "defaultValue": "\"next\""
            },
            {
              "id": 193,
              "name": "PREV",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 458,
                  "character": 4
                }
              ],
              "defaultValue": "\"previous\""
            },
            {
              "id": 195,
              "name": "PREV_NEXT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 460,
                  "character": 4
                }
              ],
              "defaultValue": "\"both\""
            },
            {
              "id": 196,
              "name": "TOUCH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 461,
                  "character": 4
                }
              ],
              "defaultValue": "\"touching\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                194,
                193,
                195,
                196
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 457,
              "character": 12
            }
          ]
        },
        {
          "id": 156,
          "name": "_EEntType",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 164,
              "name": "COLL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 23,
                  "character": 4
                }
              ],
              "defaultValue": "\"co\""
            },
            {
              "id": 159,
              "name": "EDGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 18,
                  "character": 4
                }
              ],
              "defaultValue": "\"_e\""
            },
            {
              "id": 163,
              "name": "PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 22,
                  "character": 4
                }
              ],
              "defaultValue": "\"pg\""
            },
            {
              "id": 162,
              "name": "PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 21,
                  "character": 4
                }
              ],
              "defaultValue": "\"pl\""
            },
            {
              "id": 161,
              "name": "POINT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 20,
                  "character": 4
                }
              ],
              "defaultValue": "\"pt\""
            },
            {
              "id": 157,
              "name": "POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 16,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps\""
            },
            {
              "id": 158,
              "name": "VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 17,
                  "character": 4
                }
              ],
              "defaultValue": "\"_v\""
            },
            {
              "id": 160,
              "name": "WIRE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 19,
                  "character": 4
                }
              ],
              "defaultValue": "\"_w\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                164,
                159,
                163,
                162,
                161,
                157,
                158,
                160
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 15,
              "character": 12
            }
          ]
        },
        {
          "id": 165,
          "name": "_EEntTypeAndMod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 173,
              "name": "COLL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 33,
                  "character": 4
                }
              ],
              "defaultValue": "\"co\""
            },
            {
              "id": 168,
              "name": "EDGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "defaultValue": "\"_e\""
            },
            {
              "id": 174,
              "name": "MOD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 34,
                  "character": 4
                }
              ],
              "defaultValue": "\"mo\""
            },
            {
              "id": 172,
              "name": "PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 32,
                  "character": 4
                }
              ],
              "defaultValue": "\"pg\""
            },
            {
              "id": 171,
              "name": "PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 31,
                  "character": 4
                }
              ],
              "defaultValue": "\"pl\""
            },
            {
              "id": 170,
              "name": "POINT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 30,
                  "character": 4
                }
              ],
              "defaultValue": "\"pt\""
            },
            {
              "id": 166,
              "name": "POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"ps\""
            },
            {
              "id": 167,
              "name": "VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 27,
                  "character": 4
                }
              ],
              "defaultValue": "\"_v\""
            },
            {
              "id": 169,
              "name": "WIRE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 29,
                  "character": 4
                }
              ],
              "defaultValue": "\"_w\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                173,
                168,
                174,
                172,
                171,
                170,
                166,
                167,
                169
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 25,
              "character": 12
            }
          ]
        },
        {
          "id": 181,
          "name": "_EFilterOperator",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 188,
              "name": "EQUAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 207,
                  "character": 4
                }
              ],
              "defaultValue": "\"=\""
            },
            {
              "id": 182,
              "name": "IS_EQUAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 201,
                  "character": 4
                }
              ],
              "defaultValue": "\"==\""
            },
            {
              "id": 186,
              "name": "IS_GREATER",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 205,
                  "character": 4
                }
              ],
              "defaultValue": "\">\""
            },
            {
              "id": 184,
              "name": "IS_GREATER_OR_EQUAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 203,
                  "character": 4
                }
              ],
              "defaultValue": "\">=\""
            },
            {
              "id": 187,
              "name": "IS_LESS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 206,
                  "character": 4
                }
              ],
              "defaultValue": "\"<\""
            },
            {
              "id": 185,
              "name": "IS_LESS_OR_EQUAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 204,
                  "character": 4
                }
              ],
              "defaultValue": "\"<=\""
            },
            {
              "id": 183,
              "name": "IS_NOT_EQUAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 202,
                  "character": 4
                }
              ],
              "defaultValue": "\"!=\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                188,
                182,
                186,
                184,
                187,
                185,
                183
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 200,
              "character": 12
            }
          ]
        },
        {
          "id": 189,
          "name": "_ESortMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 191,
              "name": "ASCENDING",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 310,
                  "character": 4
                }
              ],
              "defaultValue": "\"ascending\""
            },
            {
              "id": 190,
              "name": "DESCENDING",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 309,
                  "character": 4
                }
              ],
              "defaultValue": "\"descending\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                191,
                190
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 308,
              "character": 12
            }
          ]
        },
        {
          "id": 197,
          "name": "_ETypeQueryEnum",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 198,
              "name": "EXISTS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 593,
                  "character": 4
                }
              ],
              "defaultValue": "\"exists\""
            },
            {
              "id": 217,
              "name": "HAS_HOLES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 612,
                  "character": 4
                }
              ],
              "defaultValue": "\"has_holes\""
            },
            {
              "id": 218,
              "name": "HAS_NO_HOLES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 613,
                  "character": 4
                }
              ],
              "defaultValue": "\"has_no_holes\""
            },
            {
              "id": 215,
              "name": "IS_CLOSED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 610,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_closed\""
            },
            {
              "id": 208,
              "name": "IS_COLL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 603,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_collection\""
            },
            {
              "id": 203,
              "name": "IS_EDGE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 598,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_edge\""
            },
            {
              "id": 216,
              "name": "IS_HOLE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 611,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_hole\""
            },
            {
              "id": 209,
              "name": "IS_OBJ",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 604,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_object\""
            },
            {
              "id": 214,
              "name": "IS_OPEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 609,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_open\""
            },
            {
              "id": 207,
              "name": "IS_PGON",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 602,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_polygon\""
            },
            {
              "id": 213,
              "name": "IS_PGON_TOPO",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 608,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_polygon_topology\""
            },
            {
              "id": 206,
              "name": "IS_PLINE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 601,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_polyline\""
            },
            {
              "id": 212,
              "name": "IS_PLINE_TOPO",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 607,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_polyline_topology\""
            },
            {
              "id": 205,
              "name": "IS_POINT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 600,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_point\""
            },
            {
              "id": 211,
              "name": "IS_POINT_TOPO",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 606,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_point_topology\""
            },
            {
              "id": 199,
              "name": "IS_POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 594,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_position\""
            },
            {
              "id": 210,
              "name": "IS_TOPO",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 605,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_topology\""
            },
            {
              "id": 201,
              "name": "IS_UNUSED_POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 596,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_unused_posi\""
            },
            {
              "id": 200,
              "name": "IS_USED_POSI",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 595,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_used_posi\""
            },
            {
              "id": 202,
              "name": "IS_VERT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 597,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_vertex\""
            },
            {
              "id": 204,
              "name": "IS_WIRE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/query.ts",
                  "line": 599,
                  "character": 4
                }
              ],
              "defaultValue": "\"is_wire\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                198,
                217,
                218,
                215,
                208,
                203,
                216,
                209,
                214,
                207,
                213,
                206,
                212,
                205,
                211,
                199,
                210,
                201,
                200,
                202,
                204
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 592,
              "character": 12
            }
          ]
        },
        {
          "id": 146,
          "name": "Edge",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 474,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 147,
              "name": "Edge",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Given an edge, returns other edges.\n- If \"previous\" is selected, it returns the previous edge in the wire or null if there is no previous edge.\n- If \"next\" is selected, it returns the next edge in the wire or null if there is no next edge.\n- If \"both\" is selected, it returns a list of two edges, [previous, next]. Either can be null.\n- If \"touching\" is selected, it returns a list of edges from other wires that share the same start and end positions (in any order).",
                "returns": "Entities, an edge or list of edges\n"
              },
              "parameters": [
                {
                  "id": 148,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 149,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An edge or list of edges."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 150,
                  "name": "edge_query_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the types of edges to return."
                  },
                  "type": {
                    "type": "reference",
                    "id": 192,
                    "name": "_EEdgeMethod"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "TId"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 108,
          "name": "Filter",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 165,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 109,
              "name": "Filter",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Filter a list of entities based on an attribute value.\n\\n\nThe result will always be a list of entities, even if there is only one entity.\nIn a case where you want only one entity, remember to get the first item in the list.\n\\n",
                "returns": "Entities, a list of entities that match the conditions specified in 'expr'.\n"
              },
              "parameters": [
                {
                  "id": 110,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 111,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of entities to filter. The entities must all be of the same type"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 112,
                  "name": "attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The attribute to use for filtering. Can be `name`, `[name, index]`, or `[name, key]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 113,
                  "name": "operator_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the operator to use for filtering"
                  },
                  "type": {
                    "type": "reference",
                    "id": 181,
                    "name": "_EFilterOperator"
                  }
                },
                {
                  "id": 114,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The attribute value to use for filtering."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TAttribDataTypes"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 103,
          "name": "Get",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 85,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 104,
              "name": "Get",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Get entities from a list of entities.\nFor example, you can get the position entities from a list of polygon entities.\n\\n\nThe result will always be a list of entities, even if there is only one entity.\nIn a case where you want only one entity, remember to get the first item in the list.\n\\n\nThe resulting list of entities will not contain duplicate entities.\n\\n",
                "returns": "Entities, a list of entities.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "positions = query.Get('positions', [polyline1, polyline2])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns a list of positions that are part of polyline1 and polyline2.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 105,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 106,
                  "name": "ent_type_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the type of entity to get."
                  },
                  "type": {
                    "type": "reference",
                    "id": 156,
                    "name": "_EEntType"
                  }
                },
                {
                  "id": 107,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Optional, list of entities to get entities from, or null to get all entities in the model."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "array",
                      "elementType": {
                        "type": "reference",
                        "name": "TId"
                      }
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 115,
          "name": "Invert",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 275,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 116,
              "name": "Invert",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a list of entities that are not part of the specified entities.\nFor example, you can get the position entities that are not part of a list of polygon entities.\n\\n\nThis function does the opposite of query.Get().\nWhile query.Get() gets entities that are part of of the list of entities,\nthis function gets the entities that are not part of the list of entities.\n\\n",
                "returns": "Entities, a list of entities that match the type specified in 'ent_type_enum', and that are not in entities.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "positions = query.Invert('positions', [polyline1, polyline2])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns a list of positions that are not part of polyline1 and polyline2.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 117,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 118,
                  "name": "ent_type_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, specifies what type of entities will be returned."
                  },
                  "type": {
                    "type": "reference",
                    "id": 156,
                    "name": "_EEntType"
                  }
                },
                {
                  "id": 119,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of entities to be excluded."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 136,
          "name": "Neighbor",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 423,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 137,
              "name": "Neighbor",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a list of neighboring entities. In order to qualify as a neighbor,\nentities must not be part of the set of input entities, but must be welded to one or more entities in the input.\n\\n",
                "returns": "Entities, a list of welded neighbors",
                "tags": [
                  {
                    "tag": "example",
                    "text": "query.neighbor('edges', [polyline1,polyline2,polyline3])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns list of edges that are welded to polyline1, polyline2, or polyline3.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 138,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 139,
                  "name": "ent_type_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the types of neighbors to return"
                  },
                  "type": {
                    "type": "reference",
                    "id": 156,
                    "name": "_EEntType"
                  }
                },
                {
                  "id": 140,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of entities."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 126,
          "name": "Perimeter",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 378,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 127,
              "name": "Perimeter",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns a list of perimeter entities. In order to qualify as a perimeter entity,\nentities must be part of the set of input entities and must have naked edges.\n\\n",
                "returns": "Entities, a list of perimeter entities.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "query.Perimeter('edges', [polygon1,polygon2,polygon])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns list of edges that are at the perimeter of polygon1, polygon2, or polygon3.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 128,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 129,
                  "name": "ent_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the type of perimeter entities to return"
                  },
                  "type": {
                    "type": "reference",
                    "id": 156,
                    "name": "_EEntType"
                  }
                },
                {
                  "id": 130,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of entities."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 120,
          "name": "Sort",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 325,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 121,
              "name": "Sort",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sorts entities based on an attribute.\n\\n\nIf the attribute is a list, and index can also be specified as follows: #@name1[index].\n\\n",
                "returns": "Entities, a list of sorted entities.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "sorted_list = query.Sort( [pos1, pos2, pos3], #@xyz[2], descending)"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns a list of three positions, sorted according to the descending z value.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 122,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 123,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "List of two or more entities to be sorted, all of the same entity type."
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                },
                {
                  "id": 124,
                  "name": "attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Attribute name to use for sorting. Can be `name`, `[name, index]`, or `[name, key]`."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "number"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 125,
                  "name": "method_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, sort descending or ascending."
                  },
                  "type": {
                    "type": "reference",
                    "id": 189,
                    "name": "_ESortMethod"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 151,
          "name": "Type",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 579,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 152,
              "name": "Type",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Checks the type of an entity.\n\\n\n- For is\\_used\\_posi, returns true if the entity is a posi, and it is used by at least one vertex.\n- For is\\_unused\\_posi, it returns the opposite of is\\_used\\_posi.\n- For is\\_object, returns true if the entity is a point, a polyline, or a polygon.\n- For is\\_topology, returns true if the entity is a vertex, an edge, a wire, or a face.\n- For is\\_point\\_topology, is\\_polyline\\_topology, and is\\_polygon\\_topology, returns true.\nif the entity is a topological entity, and it is part of an object of the specified type.\n- For is\\_open, returns true if the entity is a wire or polyline and is open. For is\\_closed, it returns the opposite of is\\_open.\n- For is\\_hole, returns true if the entity is a wire, and it defines a hole in a face.\n- For has\\_holes, returns true if the entity is a face or polygon, and it has holes.\n- For has\\_no\\_holes, it returns the opposite of has\\_holes.",
                "returns": "Boolean or list of boolean in input sequence.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "query.Type([polyline1, polyline2, polygon1], is\\_polyline )"
                  },
                  {
                    "tag": "example_info",
                    "text": "Returns a list [true, true, false] if polyline1 and polyline2 are polylines but polygon1 is not a polyline.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 153,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 154,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "An entity, or a list of entities."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 155,
                  "name": "type_query_enum",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, select the conditions to test agains."
                  },
                  "type": {
                    "type": "reference",
                    "id": 197,
                    "name": "_ETypeQueryEnum"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 141,
          "name": "_neighbors",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 442,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 142,
              "name": "_neighbors",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 143,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 144,
                  "name": "select_ent_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "EEntType"
                  }
                },
                {
                  "id": 145,
                  "name": "ents_arr",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TEntTypeIdx"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TEntTypeIdx"
                }
              }
            }
          ]
        },
        {
          "id": 131,
          "name": "_perimeter",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/query.ts",
              "line": 397,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 132,
              "name": "_perimeter",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 133,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 134,
                  "name": "select_ent_type",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "EEntType"
                  }
                },
                {
                  "id": 135,
                  "name": "ents_arr",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TEntTypeIdx"
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TEntTypeIdx"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            175,
            192,
            156,
            165,
            181,
            189,
            197
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            146,
            108,
            103,
            115,
            136,
            126,
            120,
            151,
            141,
            131
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/query.ts",
          "line": 7,
          "character": 0
        }
      ]
    },
    {
      "id": 1121,
      "name": "util",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `util` module has some utility functions used for debugging."
      },
      "children": [
        {
          "id": 1145,
          "name": "EntityInfo",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 190,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1146,
              "name": "EntityInfo",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns an html string representation of one or more entities in the model.\nThe string can be printed to the console for viewing.",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 1147,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1148,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "One or more objects ot collections."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 1152,
          "name": "ModelCheck",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 443,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1153,
              "name": "ModelCheck",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Checks the internal consistency of the model. Used for debugigng Mobius.",
                "returns": "Text that summarises what is in the model, click print to see this text.\n"
              },
              "parameters": [
                {
                  "id": 1154,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 1155,
          "name": "ModelCompare",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 478,
              "character": 22
            }
          ],
          "signatures": [
            {
              "id": 1156,
              "name": "ModelCompare",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Compares two models. Used for grading models.",
                "text": "Checks that every entity in this model also exists in the input_data.\n\nAdditional entitis in the input data will not affect the score.\n\nAttributes at the model level are ignored except for the `material` attributes.\n\nFor grading, this model is assumed to be the answer model, and the input model is assumed to be\nthe model submitted by the student.\n\nThe order or entities in this model may be modified in the comparison process.\n\nFor specifying the location of the GI Model, you can either specify a URL, or the name of a file in LocalStorage.\nIn the latter case, you do not specify a path, you just specify the file name, e.g. 'my_model.gi'\n",
                "returns": "Text that summarises the comparison between the two models.\n"
              },
              "parameters": [
                {
                  "id": 1157,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1158,
                  "name": "input_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The location of the GI Model to compare this model to."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1149,
          "name": "ModelInfo",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 369,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1150,
              "name": "ModelInfo",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns an html string representation of the contents of this model.\nThe string can be printed to the console for viewing.",
                "returns": "Text that summarises what is in the model, click print to see this text.\n"
              },
              "parameters": [
                {
                  "id": 1151,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 1163,
          "name": "ModelMerge",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 503,
              "character": 22
            }
          ],
          "signatures": [
            {
              "id": 1164,
              "name": "ModelMerge",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Merges data from another model into this model.\nThis is the same as importing the model, except that no collection is created.",
                "text": "For specifying the location of the GI Model, you can either specify a URL, or the name of a file in LocalStorage.\nIn the latter case, you do not specify a path, you just specify the file name, e.g. 'my_model.gi'\n",
                "returns": "Text that summarises the comparison between the two models.\n"
              },
              "parameters": [
                {
                  "id": 1165,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1166,
                  "name": "input_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The location of the GI Model to import into this model to."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1140,
          "name": "ParamInfo",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 178,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1141,
              "name": "ParamInfo",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns am html string representation of the parameters in this model.\nThe string can be printed to the console for viewing.",
                "returns": "Text that summarises what is in the model.\n"
              },
              "parameters": [
                {
                  "id": 1142,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1143,
                  "name": "__constList__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 1144,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {}
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 1122,
          "name": "Select",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 22,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1123,
              "name": "Select",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Select entities in the model.",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 1124,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1125,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "array",
                          "elementType": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1171,
          "name": "SendData",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 522,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1172,
              "name": "SendData",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Post a message to the parent window.",
                "returns": "Text that summarises what is in the model, click print to see this text.\n"
              },
              "parameters": [
                {
                  "id": 1173,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1174,
                  "name": "data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The data to send, a list or a dictionary."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1126,
          "name": "VrHotspot",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 73,
              "character": 17
            }
          ],
          "signatures": [
            {
              "id": 1127,
              "name": "VrHotspot",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Creta a VR hotspot. In the VR Viewer, you can teleport to such hotspots.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 1128,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1129,
                  "name": "point",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A point object to be used for creating hotspots."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1130,
                  "name": "name",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A name for the VR hotspots. If `null`, a default name will be created."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1131,
                  "name": "camera_rot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The rotation of the camera direction when you teleport yo the hotspot. The\nrotation is specified in degrees, in the counter-clockwise direction, starting from the Y axis.\nIf `null`, the camera rotation will default to 0."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1132,
          "name": "VrPanorama",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 124,
              "character": 17
            }
          ],
          "signatures": [
            {
              "id": 1133,
              "name": "VrPanorama",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Create a VR panorama hotspot. In the VR Viewer, you can teleport to such hotspots.When you enter\nthe hotspot, the panorama images will be loaded into the view. \\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 1134,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1135,
                  "name": "point",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The point object to be used for creating a panorama. If this point is already\ndefined as a VR hotspot, then the panorama hotspot will inherit the name and camera angle."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 1136,
                  "name": "back_url",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The URL of the 360 degree panorama image to be used for the background."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1137,
                  "name": "back_rot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1138,
                  "name": "fore_url",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The URL of the 360 degree panorama image to be used for the foreground. If `null`\nthen no foreground image will be used."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                },
                {
                  "id": 1139,
                  "name": "fore_rot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The rotation of the forground panorama image, in degrees, in the\ncounter-clockwise direction. If `null`, then the foreground rotation will be equal to the background rotation."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 1159,
          "name": "_Async_Param_ModelCompare",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 488,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1160,
              "name": "_Async_Param_ModelCompare",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1161,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1162,
                  "name": "input_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        },
        {
          "id": 1167,
          "name": "_Async_Param_ModelMerge",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/util.ts",
              "line": 511,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 1168,
              "name": "_Async_Param_ModelMerge",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 1169,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 1170,
                  "name": "input_data",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "name": "TId"
                    }
                  }
                ],
                "name": "Promise"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            1145,
            1152,
            1155,
            1149,
            1163,
            1140,
            1122,
            1171,
            1126,
            1132,
            1159,
            1167
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/util.ts",
          "line": 6,
          "character": 0
        }
      ]
    },
    {
      "id": 774,
      "name": "visualize",
      "kind": 4,
      "kindString": "Namespace",
      "flags": {},
      "comment": {
        "shortText": "The `visualize` module has functions for defining various settings for the 3D viewer.\nColor is saved as vertex attributes."
      },
      "children": [
        {
          "id": 818,
          "name": "_EColorRampMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 857,
              "name": "ACCENT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 179,
                  "character": 4
                }
              ],
              "defaultValue": "\"Accent\""
            },
            {
              "id": 820,
              "name": "BLACK_BODY",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 142,
                  "character": 4
                }
              ],
              "defaultValue": "\"black_body\""
            },
            {
              "id": 844,
              "name": "BLUES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 166,
                  "character": 4
                }
              ],
              "defaultValue": "\"Blues\""
            },
            {
              "id": 826,
              "name": "BLUE_GREEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 148,
                  "character": 4
                }
              ],
              "defaultValue": "\"blue_green\""
            },
            {
              "id": 824,
              "name": "BLUE_RED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 146,
                  "character": 4
                }
              ],
              "defaultValue": "\"blue_red\""
            },
            {
              "id": 853,
              "name": "BRBG",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 175,
                  "character": 4
                }
              ],
              "defaultValue": "\"BrBG\""
            },
            {
              "id": 832,
              "name": "BUGN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 154,
                  "character": 4
                }
              ],
              "defaultValue": "\"BuGn\""
            },
            {
              "id": 830,
              "name": "BUPU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 152,
                  "character": 4
                }
              ],
              "defaultValue": "\"BuPu\""
            },
            {
              "id": 860,
              "name": "DARK2",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 182,
                  "character": 4
                }
              ],
              "defaultValue": "\"Dark2\""
            },
            {
              "id": 819,
              "name": "FALSE_COLOR",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 141,
                  "character": 4
                }
              ],
              "defaultValue": "\"false_color\""
            },
            {
              "id": 840,
              "name": "GNBU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 162,
                  "character": 4
                }
              ],
              "defaultValue": "\"GnBu\""
            },
            {
              "id": 837,
              "name": "GREENS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 159,
                  "character": 4
                }
              ],
              "defaultValue": "\"Greens\""
            },
            {
              "id": 825,
              "name": "GREEN_RED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 147,
                  "character": 4
                }
              ],
              "defaultValue": "\"green_red\""
            },
            {
              "id": 841,
              "name": "GREYS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 163,
                  "character": 4
                }
              ],
              "defaultValue": "\"Greys\""
            },
            {
              "id": 827,
              "name": "GREY_SCALE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 149,
                  "character": 4
                }
              ],
              "defaultValue": "\"grey_scale\""
            },
            {
              "id": 831,
              "name": "ORANGES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 153,
                  "character": 4
                }
              ],
              "defaultValue": "\"Oranges\""
            },
            {
              "id": 828,
              "name": "ORRD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 150,
                  "character": 4
                }
              ],
              "defaultValue": "\"OrRd\""
            },
            {
              "id": 861,
              "name": "PAIRED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 183,
                  "character": 4
                }
              ],
              "defaultValue": "\"Paired\""
            },
            {
              "id": 863,
              "name": "PASTEL1",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 185,
                  "character": 4
                }
              ],
              "defaultValue": "\"Pastel1\""
            },
            {
              "id": 862,
              "name": "PASTEL2",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 184,
                  "character": 4
                }
              ],
              "defaultValue": "\"Pastel2\""
            },
            {
              "id": 850,
              "name": "PIYG",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 172,
                  "character": 4
                }
              ],
              "defaultValue": "\"PiYG\""
            },
            {
              "id": 851,
              "name": "PRGN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 173,
                  "character": 4
                }
              ],
              "defaultValue": "\"PRGn\""
            },
            {
              "id": 829,
              "name": "PUBU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 151,
                  "character": 4
                }
              ],
              "defaultValue": "\"PuBu\""
            },
            {
              "id": 845,
              "name": "PUBUGN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 167,
                  "character": 4
                }
              ],
              "defaultValue": "\"PuBuGn\""
            },
            {
              "id": 855,
              "name": "PUOR",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 177,
                  "character": 4
                }
              ],
              "defaultValue": "\"PuOr\""
            },
            {
              "id": 843,
              "name": "PURD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 165,
                  "character": 4
                }
              ],
              "defaultValue": "\"PuRd\""
            },
            {
              "id": 839,
              "name": "PURPLES",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 161,
                  "character": 4
                }
              ],
              "defaultValue": "\"Purples\""
            },
            {
              "id": 849,
              "name": "RDBU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 171,
                  "character": 4
                }
              ],
              "defaultValue": "\"RdBu\""
            },
            {
              "id": 854,
              "name": "RDGY",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 176,
                  "character": 4
                }
              ],
              "defaultValue": "\"RdGy\""
            },
            {
              "id": 836,
              "name": "RDPU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 158,
                  "character": 4
                }
              ],
              "defaultValue": "\"RdPu\""
            },
            {
              "id": 852,
              "name": "RDYLBU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 174,
                  "character": 4
                }
              ],
              "defaultValue": "\"RdYlBu\""
            },
            {
              "id": 848,
              "name": "RDYLGN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 170,
                  "character": 4
                }
              ],
              "defaultValue": "\"RdYlGn\""
            },
            {
              "id": 835,
              "name": "REDS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 157,
                  "character": 4
                }
              ],
              "defaultValue": "\"Reds\""
            },
            {
              "id": 858,
              "name": "SET1",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 180,
                  "character": 4
                }
              ],
              "defaultValue": "\"Set1\""
            },
            {
              "id": 856,
              "name": "SET2",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 178,
                  "character": 4
                }
              ],
              "defaultValue": "\"Set2\""
            },
            {
              "id": 859,
              "name": "SET3",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 181,
                  "character": 4
                }
              ],
              "defaultValue": "\"Set3\""
            },
            {
              "id": 847,
              "name": "SPECTRAL",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 169,
                  "character": 4
                }
              ],
              "defaultValue": "\"Spectral\""
            },
            {
              "id": 846,
              "name": "VIRIDIS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 168,
                  "character": 4
                }
              ],
              "defaultValue": "\"Viridis\""
            },
            {
              "id": 823,
              "name": "WHITE_BLUE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 145,
                  "character": 4
                }
              ],
              "defaultValue": "\"white_blue\""
            },
            {
              "id": 822,
              "name": "WHITE_GREEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 144,
                  "character": 4
                }
              ],
              "defaultValue": "\"white_green\""
            },
            {
              "id": 821,
              "name": "WHITE_RED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 143,
                  "character": 4
                }
              ],
              "defaultValue": "\"white_red\""
            },
            {
              "id": 834,
              "name": "YLGN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 156,
                  "character": 4
                }
              ],
              "defaultValue": "\"YlGn\""
            },
            {
              "id": 838,
              "name": "YLGNBU",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 160,
                  "character": 4
                }
              ],
              "defaultValue": "\"YlGnBu\""
            },
            {
              "id": 833,
              "name": "YLORBR",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 155,
                  "character": 4
                }
              ],
              "defaultValue": "\"YlOrBr\""
            },
            {
              "id": 842,
              "name": "YLORRD",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 164,
                  "character": 4
                }
              ],
              "defaultValue": "\"YlOrRd\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                857,
                820,
                844,
                826,
                824,
                853,
                832,
                830,
                860,
                819,
                840,
                837,
                825,
                841,
                827,
                831,
                828,
                861,
                863,
                862,
                850,
                851,
                829,
                845,
                855,
                843,
                839,
                849,
                854,
                836,
                852,
                848,
                835,
                858,
                856,
                859,
                847,
                846,
                823,
                822,
                821,
                834,
                838,
                833,
                842
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 140,
              "character": 12
            }
          ]
        },
        {
          "id": 864,
          "name": "_EEdgeMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 866,
              "name": "HIDDEN",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 266,
                  "character": 4
                }
              ],
              "defaultValue": "\"hidden\""
            },
            {
              "id": 865,
              "name": "VISIBLE",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 265,
                  "character": 4
                }
              ],
              "defaultValue": "\"visible\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                866,
                865
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 264,
              "character": 12
            }
          ]
        },
        {
          "id": 867,
          "name": "_EMeshMethod",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 868,
              "name": "FACETED",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 330,
                  "character": 4
                }
              ],
              "defaultValue": "\"faceted\""
            },
            {
              "id": 869,
              "name": "SMOOTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 331,
                  "character": 4
                }
              ],
              "defaultValue": "\"smooth\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                868,
                869
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 329,
              "character": 12
            }
          ]
        },
        {
          "id": 811,
          "name": "_ESide",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 813,
              "name": "BACK",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 22,
                  "character": 4
                }
              ],
              "defaultValue": "\"back\""
            },
            {
              "id": 814,
              "name": "BOTH",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 23,
                  "character": 4
                }
              ],
              "defaultValue": "\"both\""
            },
            {
              "id": 812,
              "name": "FRONT",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 21,
                  "character": 4
                }
              ],
              "defaultValue": "\"front\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                813,
                814,
                812
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 20,
              "character": 12
            }
          ]
        },
        {
          "id": 815,
          "name": "_Ecolors",
          "kind": 8,
          "kindString": "Enumeration",
          "flags": {},
          "children": [
            {
              "id": 816,
              "name": "NO_VERT_COLORS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 26,
                  "character": 4
                }
              ],
              "defaultValue": "\"none\""
            },
            {
              "id": 817,
              "name": "VERT_COLORS",
              "kind": 16,
              "kindString": "Enumeration member",
              "flags": {},
              "sources": [
                {
                  "fileName": "modules/basic/visualize.ts",
                  "line": 27,
                  "character": 4
                }
              ],
              "defaultValue": "\"apply_rgb\""
            }
          ],
          "groups": [
            {
              "title": "Enumeration members",
              "kind": 16,
              "children": [
                816,
                817
              ]
            }
          ],
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 25,
              "character": 12
            }
          ]
        },
        {
          "id": 807,
          "name": "BBox",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 640,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 808,
              "name": "BBox",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Visualises a bounding box by adding geometry to the model.",
                "returns": "Entities, twelve polylines representing the box.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "bbox1 = virtual.viBBox(position1, vector1, [0,1,0])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a plane with position1 on it and normal = cross product of vector1 with y-axis.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 809,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 810,
                  "name": "bboxes",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of lists."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TBBox"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 775,
          "name": "Color",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 37,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 776,
              "name": "Color",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets color by creating a vertex attribute called 'rgb' and setting the value.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 777,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 778,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The entities for which to set the color."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 779,
                  "name": "color",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The color, [0,0,0] is black, [1,1,1] is white."
                  },
                  "type": {
                    "type": "reference",
                    "name": "TColor"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 787,
          "name": "Edge",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 280,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 788,
              "name": "Edge",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Controls how edges are visualized by setting the visibility of the edge.\n\\n\nThe method can either be 'visible' or 'hidden'.\n'visible' means that an edge line will be visible.\n'hidden' means that no edge lines will be visible.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 789,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 790,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "A list of edges, or other entities from which edges can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 791,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, visible or hidden."
                  },
                  "type": {
                    "type": "reference",
                    "id": 864,
                    "name": "_EEdgeMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 780,
          "name": "Gradient",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 92,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 781,
              "name": "Gradient",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Generates a colour range based on a numeric attribute.\nSets the color by creating a vertex attribute called 'rgb' and setting the value.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 782,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 783,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The entities for which to set the color."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 784,
                  "name": "attrib",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The numeric attribute to be used to create the gradient.\nYou can spacify an attribute with an index. For example, ['xyz', 2] will create a gradient based on height."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 785,
                  "name": "range",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The range of the attribute, [minimum, maximum].\nIf only one number, it defaults to [0, maximum]. If null, then the range will be auto-calculated."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "id": 786,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the colour gradient to use."
                  },
                  "type": {
                    "type": "reference",
                    "id": 818,
                    "name": "_EColorRampMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 792,
          "name": "Mesh",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 344,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 793,
              "name": "Mesh",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Controls how polygon meshes are visualized by creating normals on vertices.\n\\n\nThe method can either be 'faceted' or 'smooth'.\n'faceted' means that the normal direction for each vertex will be perpendicular to the polygon to which it belongs.\n'smooth' means that the normal direction for each vertex will be the average of all polygons welded to this vertex.\n\\n",
                "returns": "void\n"
              },
              "parameters": [
                {
                  "id": 794,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 795,
                  "name": "entities",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Vertices belonging to polygons, or entities from which polygon vertices can be extracted."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 796,
                  "name": "method",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Enum, the types of normals to create, faceted or smooth."
                  },
                  "type": {
                    "type": "reference",
                    "id": 867,
                    "name": "_EMeshMethod"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 802,
          "name": "Plane",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 561,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 803,
              "name": "Plane",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Visualises a plane or a list of planes by creating polylines.",
                "returns": "Entities, a square plane polyline and three axis polyline.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "plane1 = visualize.Plane(position1, vector1, [0,1,0])"
                  },
                  {
                    "tag": "example_info",
                    "text": "Creates a plane with position1 on it and normal = cross product of vector1 with y-axis.\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 804,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 805,
                  "name": "planes",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TPlane"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TPlane"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 806,
                  "name": "scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        },
        {
          "id": 797,
          "name": "Ray",
          "kind": 64,
          "kindString": "Function",
          "flags": {},
          "sources": [
            {
              "fileName": "modules/basic/visualize.ts",
              "line": 493,
              "character": 16
            }
          ],
          "signatures": [
            {
              "id": 798,
              "name": "Ray",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Visualises a ray or a list of rays by creating a polyline with an arrow head.",
                "returns": "entities, a line with an arrow head representing the ray.",
                "tags": [
                  {
                    "tag": "example",
                    "text": "ray1 = visualize.Ray([[1,2,3],[0,0,1]])\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 799,
                  "name": "__model__",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {},
                  "type": {
                    "type": "reference",
                    "name": "GIModel"
                  }
                },
                {
                  "id": 800,
                  "name": "rays",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Polylines representing the ray or rays."
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "TRay"
                      },
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "TRay"
                        }
                      }
                    ]
                  }
                },
                {
                  "id": 801,
                  "name": "scale",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "Scales the arrow head of the vector."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "name": "TId"
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Enumerations",
          "kind": 8,
          "children": [
            818,
            864,
            867,
            811,
            815
          ]
        },
        {
          "title": "Functions",
          "kind": 64,
          "children": [
            807,
            775,
            787,
            780,
            792,
            802,
            797
          ]
        }
      ],
      "sources": [
        {
          "fileName": "modules/basic/visualize.ts",
          "line": 7,
          "character": 0
        }
      ]
    },
    {
      "id": 1924,
      "name": "_parameterTypes",
      "kind": 32,
      "kindString": "Variable",
      "flags": {},
      "sources": [
        {
          "fileName": "_parameterTypes.ts",
          "line": 4,
          "character": 13
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1925,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 1946,
              "name": "addData",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_model.addGiData'"
            },
            {
              "id": 1955,
              "name": "asyncFuncs",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              },
              "defaultValue": "..."
            },
            {
              "id": 1942,
              "name": "cloneFn",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1943,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "signatures": [
                    {
                      "id": 1944,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "comment": {
                        "shortText": "Clone a model."
                      },
                      "parameters": [
                        {
                          "id": 1945,
                          "name": "model",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "comment": {
                            "shortText": "The model to clone.\n"
                          },
                          "type": {
                            "type": "reference",
                            "name": "GIModel"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "name": "GIModel"
                      }
                    }
                  ]
                }
              },
              "defaultValue": "..."
            },
            {
              "id": 1929,
              "name": "console",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'__console__'"
            },
            {
              "id": 1926,
              "name": "constList",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'__constList__'"
            },
            {
              "id": 1930,
              "name": "fileName",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'__fileName__'"
            },
            {
              "id": 1950,
              "name": "getattrib",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'attrib.Get'"
            },
            {
              "id": 1928,
              "name": "input",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'__input__'"
            },
            {
              "id": 1936,
              "name": "merge",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_model.__merge__'"
            },
            {
              "id": 1937,
              "name": "mergeFn",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1938,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "signatures": [
                    {
                      "id": 1939,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "comment": {
                        "shortText": "Merges the second model into the first model. The geometry, attribues, and groups are all merged.\nIf the models contain contain groups with the same names, then the groups will be merged."
                      },
                      "parameters": [
                        {
                          "id": 1940,
                          "name": "model1",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "comment": {
                            "shortText": "The model to merge into."
                          },
                          "type": {
                            "type": "reference",
                            "name": "GIModel"
                          }
                        },
                        {
                          "id": 1941,
                          "name": "model2",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "comment": {
                            "shortText": "The model to merge from    .\n"
                          },
                          "type": {
                            "type": "reference",
                            "name": "GIModel"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ]
                }
              },
              "defaultValue": "..."
            },
            {
              "id": 1927,
              "name": "model",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'__model__'"
            },
            {
              "id": 1931,
              "name": "new",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_model.__new__'"
            },
            {
              "id": 1932,
              "name": "newFn",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1933,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "signatures": [
                    {
                      "id": 1934,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "comment": {
                        "shortText": "Creates a new empty model.",
                        "returns": "New model empty.\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "GIModel"
                      }
                    }
                  ]
                }
              },
              "defaultValue": "..."
            },
            {
              "id": 1935,
              "name": "newMeta",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "query",
                "queryType": {
                  "type": "reference",
                  "name": "GIMetaData"
                }
              },
              "defaultValue": "..."
            },
            {
              "id": 1948,
              "name": "postprocess",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_model.__postprocess__'"
            },
            {
              "id": 1947,
              "name": "preprocess",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_model.__preprocess__'"
            },
            {
              "id": 1952,
              "name": "queryFilter",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'query.Filter'"
            },
            {
              "id": 1951,
              "name": "queryGet",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'query.Get'"
            },
            {
              "id": 1954,
              "name": "return",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_Output.Return'"
            },
            {
              "id": 1953,
              "name": "select",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'_model.__select__'"
            },
            {
              "id": 1949,
              "name": "setattrib",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "'attrib.Set'"
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                1946,
                1955,
                1942,
                1929,
                1926,
                1930,
                1950,
                1928,
                1936,
                1937,
                1927,
                1931,
                1932,
                1935,
                1948,
                1947,
                1952,
                1951,
                1954,
                1953,
                1949
              ]
            }
          ]
        }
      },
      "defaultValue": "..."
    },
    {
      "id": 1956,
      "name": "_varString",
      "kind": 32,
      "kindString": "Variable",
      "flags": {},
      "sources": [
        {
          "fileName": "_parameterTypes.ts",
          "line": 42,
          "character": 13
        }
      ],
      "type": {
        "type": "literal",
        "value": "PI = __modules__._constants.PI;\nXY = __modules__._constants.XY;\nYZ = __modules__._constants.YZ;\nZX = __modules__._constants.ZX;\nYX = __modules__._constants.YX;\nZY = __modules__._constants.ZY;\nXZ = __modules__._constants.XZ;\nisNum = __modules__._types.isNum;\nisInt = __modules__._types.isInt;\nisFlt = __modules__._types.isFlt;\nisBool = __modules__._types.isBool;\nisStr = __modules__._types.isStr;\nisList = __modules__._types.isList;\nisDict = __modules__._types.isDict;\nisVec2 = __modules__._types.isVec2;\nisVec3 = __modules__._types.isVec3;\nisCol = __modules__._types.isCol;\nisRay = __modules__._types.isRay;\nisPln = __modules__._types.isPln;\nisNaN = __modules__._types.isNaN;\nisNull = __modules__._types.isNull;\nisUndef = __modules__._types.isUndef;\nstrRepl = __modules__._strs.strRepl;\nstrUpp = __modules__._strs.strUpp;\nstrLow = __modules__._strs.strLow;\nstrTrim = __modules__._strs.strTrim;\nstrTrimR = __modules__._strs.strTrimR;\nstrTrimL = __modules__._strs.strTrimL;\nstrSub = __modules__._strs.strSub;\nstrStarts = __modules__._strs.strStarts;\nstrEnds = __modules__._strs.strEnds;\nstrPadL = __modules__._strs.strPadL;\nstrPadR = __modules__._strs.strPadR;\nisApprox = __modules__._util.isApprox;\nisIn = __modules__._util.isIn;\nisWithin = __modules__._util.isWithin;\nmin = __modules__._math.min;\nmax = __modules__._math.max;\npow = __modules__._math.pow;\nsqrt = __modules__._math.sqrt;\nexp = __modules__._math.exp;\nlog = __modules__._math.log;\nround = __modules__._math.round;\nsigFig = __modules__._math.sigFig;\nceil = __modules__._math.ceil;\nfloor = __modules__._math.floor;\nabs = __modules__._math.abs;\nsin = __modules__._math.sin;\nasin = __modules__._math.asin;\nsinh = __modules__._math.sinh;\nasinh = __modules__._math.asinh;\ncos = __modules__._math.cos;\nacos = __modules__._math.acos;\ncosh = __modules__._math.cosh;\nacosh = __modules__._math.acosh;\ntan = __modules__._math.tan;\natan = __modules__._math.atan;\ntanh = __modules__._math.tanh;\natanh = __modules__._math.atanh;\natan2 = __modules__._math.atan2;\nboolean = __modules__._mathjs.boolean;\nnumber = __modules__._mathjs.number;\nstring = __modules__._mathjs.string;\nmad = __modules__._mathjs.mad;\nmean = __modules__._mathjs.mean;\nmedian = __modules__._mathjs.median;\nmode = __modules__._mathjs.mode;\nprod = __modules__._mathjs.prod;\nstd = __modules__._mathjs.std;\nvari = __modules__._mathjs.vari;\nsum = __modules__._mathjs.sum;\nhypot = __modules__._mathjs.hypot;\nnorm = __modules__._mathjs.norm;\nsquare = __modules__._mathjs.square;\ncube = __modules__._mathjs.cube;\nremap = __modules__._arithmetic.remap;\ndistance = __modules__._geometry.distance;\ndistanceM = __modules__._geometry.distanceM;\ndistanceMS = __modules__._geometry.distanceMS;\nintersect = __modules__._geometry.intersect;\nproject = __modules__._geometry.project;\nrange = __modules__._list.range;\nlen = __modules__._common.len;\nlistCount = __modules__._list.listCount;\nlistCopy = __modules__._list.listCopy;\nlistRep = __modules__._list.listRep;\nlistLast = __modules__._list.listLast;\nlistGet = __modules__._list.listGet;\nlistFind = __modules__._list.listFind;\nlistHas = __modules__._list.listHas;\nlistJoin = __modules__._list.listJoin;\nlistFlat = __modules__._list.listFlat;\nlistRot = __modules__._list.listRot;\nlistSlice = __modules__._list.listSlice;\nlistRev = __modules__._list.listRev;\nlistCull = __modules__._list.listCull;\nlistSort = __modules__._list.listSort;\nlistZip = __modules__._list.listZip;\nlistEq = __modules__._list.listEq;\ndictGet = __modules__._dict.dictGet;\ndictKeys = __modules__._dict.dictKeys;\ndictVals = __modules__._dict.dictVals;\ndictHasKey = __modules__._dict.dictHasKey;\ndictHasVal = __modules__._dict.dictHasVal;\ndictFind = __modules__._dict.dictFind;\ndictCopy = __modules__._dict.dictCopy;\ndictEq = __modules__._dict.dictEq;\nsetMake = __modules__._set.setMake;\nsetUni = __modules__._set.setUni;\nsetInt = __modules__._set.setInt;\nsetDif = __modules__._set.setDif;\nvecAdd = __modules__._vec.vecAdd;\nvecSub = __modules__._vec.vecSub;\nvecDiv = __modules__._vec.vecDiv;\nvecMult = __modules__._vec.vecMult;\nvecSum = __modules__._vec.vecSum;\nvecLen = __modules__._vec.vecLen;\nvecSetLen = __modules__._vec.vecSetLen;\nvecNorm = __modules__._vec.vecNorm;\nvecRev = __modules__._vec.vecRev;\nvecFromTo = __modules__._vec.vecFromTo;\nvecAng = __modules__._vec.vecAng;\nvecAng2 = __modules__._vec.vecAng2;\nvecDot = __modules__._vec.vecDot;\nvecCross = __modules__._vec.vecCross;\nvecEqual = __modules__._vec.vecEqual;\nvecLtoG = __modules__._vec.vecLtoG;\nvecGtoL = __modules__._vec.vecGtoL;\nplnMake = __modules__._plane.plnMake;\nplnCopy = __modules__._plane.plnCopy;\nplnMove = __modules__._plane.plnMove;\nplnRot = __modules__._plane.plnRot;\nplnLMove = __modules__._plane.plnLMove;\nplnLRotX = __modules__._plane.plnLRotX;\nplnLRotY = __modules__._plane.plnLRotY;\nplnLRotZ = __modules__._plane.plnLRotZ;\nrayMake = __modules__._ray.rayMake;\nrayCopy = __modules__._ray.rayCopy;\nrayMove = __modules__._ray.rayMove;\nrayRot = __modules__._ray.rayRot;\nrayLMove = __modules__._ray.rayLMove;\nrayFromPln = __modules__._ray.rayFromPln;\nrayLtoG = __modules__._ray.rayLtoG;\nrayGtoL = __modules__._ray.rayGtoL;\ncolFalse = __modules__._colors.colFalse;\ncolScale = __modules__._colors.colScale;\nradToDeg = __modules__._conversion.radToDeg;\ndegToRad = __modules__._conversion.degToRad;\nnumToStr = __modules__._conversion.numToStr;\nrand = __modules__._rand.rand;\nrandInt = __modules__._rand.randInt;\nrandPick = __modules__._rand.randPick;"
      },
      "defaultValue": "..."
    }
  ],
  "groups": [
    {
      "title": "Namespaces",
      "kind": 4,
      "children": [
        1919,
        1912,
        1850,
        1778,
        1885,
        1864,
        1792,
        1669,
        1697,
        1175,
        1279,
        1,
        1623,
        1466,
        1577,
        1830,
        1411,
        1340,
        1893,
        1485,
        603,
        491,
        716,
        579,
        87,
        436,
        930,
        1024,
        28,
        321,
        870,
        398,
        219,
        941,
        102,
        1121,
        774
      ]
    },
    {
      "title": "Variables",
      "kind": 32,
      "children": [
        1924,
        1956
      ]
    }
  ],
  "sources": [
    {
      "fileName": "modules/index.ts",
      "line": 6,
      "character": 0
    }
  ]
}