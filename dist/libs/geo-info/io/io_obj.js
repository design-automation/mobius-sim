"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportPosiBasedObj = exports.exportVertBasedObj = exports.importObj = void 0;
const common_1 = require("../common");
const NOGROUPS = '---nogroups---';
/**
 * Import obj
 */
function importObj(model, obj_str) {
    let EObjLine;
    (function (EObjLine) {
        EObjLine["OBJ_COMMENT"] = "#";
        EObjLine["OBJ_COORD"] = "v ";
        EObjLine["OBJ_TEXTURE"] = "vt ";
        EObjLine["OBJ_NORMAL"] = "vn ";
        EObjLine["OBJ_FACE"] = "f ";
        EObjLine["OBJ_LINE"] = "l ";
    })(EObjLine || (EObjLine = {}));
    const obj_lines = obj_str.split(/\r?\n/);
    const coords = [];
    const normals = [];
    const textures = [];
    const faces = [];
    const plines = [];
    for (const obj_line of obj_lines) {
        if (obj_line.startsWith(EObjLine.OBJ_COMMENT)) {
            // Do not do anything
        }
        else if (obj_line.startsWith(EObjLine.OBJ_COORD)) {
            const coord = obj_line.split(' ').slice(1, 4).map(v => parseFloat(v));
            coords.push(coord);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_TEXTURE)) {
            const normal = obj_line.split(' ').slice(1, 4).map(v => parseFloat(v));
            normals.push(normal);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_NORMAL)) {
            const texture = obj_line.split(' ').slice(1, 3).map(v => parseFloat(v));
            textures.push(texture);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_FACE)) {
            const face_strs = obj_line.split(' ').slice(1);
            const v_indexes = [];
            const t_indexes = [];
            const n_indexes = [];
            face_strs.forEach(face_str => {
                const face_sub_indexes = face_str.split('/').map(str => parseInt(str, 10) - 1);
                v_indexes.push(face_sub_indexes[0]);
                t_indexes.push(face_sub_indexes[1]);
                n_indexes.push(face_sub_indexes[2]);
            });
            faces.push([v_indexes, t_indexes, n_indexes]);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_LINE)) {
            const pline = obj_line.split(' ').slice(1).map(v => parseInt(v, 10) - 1);
            plines.push(pline);
        }
        else {
            console.log('Found unrecognised line of data in OBJ file');
        }
    }
    for (const coord of coords) {
        const posi_i = model.modeldata.geom.add.addPosi();
        model.modeldata.attribs.set.setEntAttribVal(common_1.EEntType.POSI, posi_i, common_1.EAttribNames.COORDS, coord);
    }
    for (const face of faces) {
        const face_i = model.modeldata.geom.add.addPgon(face[0]);
        // TODO: texture uv
        // TODO: normals
    }
    return model;
}
exports.importObj = importObj;
/**
 * Export to obj
 */
function exportVertBasedObj(model, entities, ssid) {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib = model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.VERT, common_1.EAttribNames.COLOR);
    const has_normal_attrib = model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.VERT, common_1.EAttribNames.NORMAL);
    const has_texture_attrib = model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.VERT, common_1.EAttribNames.TEXTURE);
    // get the polgons, polylines, verts, posis
    const [pgons_i, plines_i] = _getPgonsPlines(model, entities, ssid);
    const [verts_i, posis_i] = _getVertsPosis(model, pgons_i, plines_i);
    // vertices, v
    const vert_i_to_obj_v = [];
    let num_v = 0;
    for (let i = 0; i < verts_i.length; i++) {
        const vert_i = verts_i[i];
        const coord = model.modeldata.attribs.posis.getVertCoords(vert_i);
        if (has_color_attrib) {
            let color = model.modeldata.attribs.get.getEntAttribVal(common_1.EEntType.VERT, vert_i, common_1.EAttribNames.COLOR);
            if (color === undefined) {
                color = [1, 1, 1];
            }
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + ' ' + color.map(c => c.toString()).join(' ') + '\n';
        }
        else {
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + '\n';
        }
        vert_i_to_obj_v[vert_i] = i;
        num_v += 1;
    }
    // textures, vt
    const [num_vt, vert_i_obj_vt, vt_str] = _getTexturesStr(model, verts_i, has_texture_attrib);
    // normals, vn
    const [num_vn, vert_i_obj_vn, vn_str] = _getNormalsStr(model, verts_i, has_normal_attrib);
    // polygons, f
    const [keys_pgons, map_colls_to_pgons] = _getGroups(model, common_1.EEntType.PGON, pgons_i);
    // polygons, f
    for (const key of keys_pgons) {
        const [names, group_pgons_i] = map_colls_to_pgons.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pgon_i of group_pgons_i) {
            const pgon_verts_i_outer = model.modeldata.geom.nav.navAnyToVert(common_1.EEntType.PGON, pgon_i);
            // const verts_i_outer = verts_i[0];
            // TODO what about holes
            f_str += 'f ';
            for (const vert_i of pgon_verts_i_outer) {
                // v
                f_str += (1 + vert_i_to_obj_v[vert_i]);
                if (has_texture_attrib || has_normal_attrib) {
                    // vt
                    if (has_texture_attrib) {
                        // TODO ignore them for now
                        f_str += '/';
                    }
                    else {
                        f_str += '/';
                    }
                    // vn
                    if (has_normal_attrib && vert_i_obj_vn[vert_i] !== undefined) {
                        f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);
                    }
                    else {
                        f_str += '/';
                    }
                }
                f_str += ' ';
            }
            f_str += '\n';
        }
    }
    // polylines, l
    const [keys_plines, map_colls_to_plines] = _getGroups(model, common_1.EEntType.PLINE, plines_i);
    // process all the groups
    for (const key of keys_plines) {
        const [names, group_plines_i] = map_colls_to_plines.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pline_i of group_plines_i) {
            const pline_verts_i = model.modeldata.geom.nav.navAnyToVert(common_1.EEntType.PLINE, pline_i);
            l_str += 'l ' + pline_verts_i.map(vert_i => (vert_i_to_obj_v[vert_i] + 1).toString()).join(' ') + '\n';
        }
    }
    // result
    return h_str + v_str + vt_str + vn_str + f_str + l_str;
}
exports.exportVertBasedObj = exportVertBasedObj;
/**
 * Export to obj
 */
function exportPosiBasedObj(model, entities, ssid) {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib = model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.VERT, common_1.EAttribNames.COLOR);
    const has_normal_attrib = model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.VERT, common_1.EAttribNames.NORMAL);
    const has_texture_attrib = model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.VERT, common_1.EAttribNames.TEXTURE);
    // get the polgons, polylines, verts, posis
    const [pgons_i, plines_i] = _getPgonsPlines(model, entities, ssid);
    const [verts_i, posis_i] = _getVertsPosis(model, pgons_i, plines_i);
    // positions
    let num_v = 0;
    const posi_i_to_obj_v = [];
    for (let i = 0; i < posis_i.length; i++) {
        const posi_i = posis_i[i];
        const coord = model.modeldata.attribs.posis.getPosiCoords(posi_i);
        if (has_color_attrib) {
            // get the average color from the verts
            const posi_verts_i = model.modeldata.geom.nav.navPosiToVert(posi_i);
            let color = [0, 0, 0];
            for (const posi_vert_i of posi_verts_i) {
                let vert_color = model.modeldata.attribs.get.getEntAttribVal(common_1.EEntType.VERT, posi_vert_i, common_1.EAttribNames.COLOR);
                if (vert_color === undefined) {
                    vert_color = [1, 1, 1];
                }
                color = [color[0] + vert_color[0], color[1] + vert_color[1], color[2] + vert_color[2]];
            }
            const div = posi_verts_i.length;
            color = [color[0] / div, color[1] / div, color[2] / div];
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + ' ' + color.map(c => c.toString()).join(' ') + '\n';
        }
        else {
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + '\n';
        }
        posi_i_to_obj_v[posi_i] = i;
        num_v += 1;
    }
    // textures, vt
    const [num_vt, vert_i_obj_vt, vt_str] = _getTexturesStr(model, verts_i, has_texture_attrib);
    // normals, vn
    const [num_vn, vert_i_obj_vn, vn_str] = _getNormalsStr(model, verts_i, has_normal_attrib);
    // polygons, f
    const [keys_pgons, map_colls_to_pgons] = _getGroups(model, common_1.EEntType.PGON, pgons_i);
    // process all the groups
    for (const key of keys_pgons) {
        const [names, group_pgons_i] = map_colls_to_pgons.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pgon_i of group_pgons_i) {
            const pgon_verts_i_outer = model.modeldata.geom.nav.navAnyToVert(common_1.EEntType.PGON, pgon_i);
            // const verts_i_outer = verts_i[0];
            // TODO what about holes
            f_str += 'f ';
            for (const vert_i of pgon_verts_i_outer) {
                // v
                f_str += (1 + posi_i_to_obj_v[model.modeldata.geom.nav.navVertToPosi(vert_i)]);
                if (has_texture_attrib || has_normal_attrib) {
                    // vt
                    if (has_texture_attrib && vert_i_obj_vt[vert_i] !== undefined) {
                        // TODO ignore them for now
                        f_str += '/';
                    }
                    else {
                        f_str += '/';
                    }
                    // vn
                    if (has_normal_attrib && vert_i_obj_vn[vert_i] !== undefined) {
                        f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);
                    }
                    else {
                        f_str += '/';
                    }
                }
                f_str += ' ';
            }
            f_str += '\n';
        }
    }
    // polylines, l
    const [keys_plines, map_colls_to_plines] = _getGroups(model, common_1.EEntType.PLINE, plines_i);
    // process all the groups
    for (const key of keys_plines) {
        const [names, group_plines_i] = map_colls_to_plines.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pline_i of group_plines_i) {
            const pline_verts_i = model.modeldata.geom.nav.navAnyToVert(common_1.EEntType.PLINE, pline_i);
            l_str += 'l ' + pline_verts_i.map(vert_i => (posi_i_to_obj_v[model.modeldata.geom.nav.navVertToPosi(vert_i)] + 1).toString()).join(' ') + '\n';
        }
    }
    // result
    return h_str + v_str + vt_str + vn_str + f_str + l_str;
}
exports.exportPosiBasedObj = exportPosiBasedObj;
/**
 * Get the textures
 */
function _getTexturesStr(model, verts_i, has_texture_attrib) {
    let vt_str = '';
    // textures, vt
    let num_vt = 0;
    const vert_i_obj_vt = []; // sparse array
    if (has_texture_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i = verts_i[i];
            const texture = model.modeldata.attribs.get.getEntAttribVal(common_1.EEntType.VERT, vert_i, common_1.EAttribNames.TEXTURE);
            if (texture !== undefined) {
                vt_str += 'vt ' + texture.map(v => v.toString()).join(' ') + '\n';
                vert_i_obj_vt[vert_i] = i;
                num_vt += 1;
            }
        }
    }
    return [num_vt, vert_i_obj_vt, vt_str];
}
/**
 * Get the normals
 */
function _getNormalsStr(model, verts_i, has_normal_attrib) {
    let vn_str = '';
    // normals, vn
    let num_vn = 0;
    const vert_i_obj_vn = []; // sparse array
    if (has_normal_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i = verts_i[i];
            const normal = model.modeldata.attribs.get.getEntAttribVal(common_1.EEntType.VERT, vert_i, common_1.EAttribNames.NORMAL);
            if (normal !== undefined) {
                vn_str += 'vn ' + normal.map(v => v.toString()).join(' ') + '\n';
                vert_i_obj_vn[vert_i] = i;
                num_vn += 1;
            }
        }
    }
    return [num_vn, vert_i_obj_vn, vn_str];
}
/**
 * Get the groups
 */
function _getGroups(model, ent_type, ents_i) {
    const map_colls_to_ents = new Map();
    // check if the name attribut exists
    if (!model.modeldata.attribs.query.hasEntAttrib(common_1.EEntType.COLL, 'name')) {
        return [[NOGROUPS], map_colls_to_ents.set(NOGROUPS, [[], ents_i])];
    }
    // get the collections of each entity
    for (const ent_i of ents_i) {
        const colls_i = model.modeldata.geom.nav.navAnyToColl(ent_type, ent_i);
        const set_all_colls_i = new Set();
        for (const coll_i of colls_i) {
            set_all_colls_i.add(coll_i);
            for (const anc_coll_i of model.modeldata.geom.modeldata.geom.nav.navCollToCollAncestors(coll_i)) {
                set_all_colls_i.add(anc_coll_i);
            }
        }
        const names = model.modeldata.attribs.get.getEntAttribVal(common_1.EEntType.COLL, Array.from(set_all_colls_i), 'name');
        let key = NOGROUPS;
        if (names.length > 0) {
            names.sort();
            key = names.join('-');
        }
        if (!map_colls_to_ents.has(key)) {
            map_colls_to_ents.set(key, [names, []]);
        }
        map_colls_to_ents.get(key)[1].push(ent_i);
    }
    // make sure the ---nogroups--- key is first in the list
    let keys = Array.from(map_colls_to_ents.keys());
    const ng_i = keys.indexOf(NOGROUPS);
    if (ng_i > 0) {
        keys = keys.splice(ng_i, 1).splice(0, 0, NOGROUPS);
    }
    // return the keys arrays, and the map
    return [keys, map_colls_to_ents];
}
/**
 * Get all the polygons and polyline entities.
 */
function _getPgonsPlines(model, entities, ssid) {
    let pgons_i = [];
    let plines_i = [];
    if (entities === null) {
        pgons_i = model.modeldata.geom.snapshot.getEnts(ssid, common_1.EEntType.PGON);
        plines_i = model.modeldata.geom.snapshot.getEnts(ssid, common_1.EEntType.PLINE);
    }
    else {
        for (const [ent_type, ent_i] of entities) {
            if (ent_type === common_1.EEntType.PGON) {
                pgons_i.push(ent_i);
            }
            else if (ent_type === common_1.EEntType.PLINE) {
                plines_i.push(ent_i);
            }
            else if (ent_type === common_1.EEntType.COLL) {
                for (const pgon_i of model.modeldata.geom.nav.navAnyToPgon(common_1.EEntType.COLL, ent_i)) {
                    pgons_i.push(pgon_i);
                }
                for (const pline_i of model.modeldata.geom.nav.navAnyToPline(common_1.EEntType.COLL, ent_i)) {
                    plines_i.push(pline_i);
                }
            }
        }
    }
    return [pgons_i, plines_i];
}
/**
 * Get all the posis from the polygon and polyline entities.
 */
function _getVertsPosis(model, pgons_i, plines_i) {
    const posis_i = new Set();
    const verts_i = new Set();
    for (const pgon_i of pgons_i) {
        for (const vert_i of model.modeldata.geom.nav.navAnyToVert(common_1.EEntType.PGON, pgon_i)) {
            verts_i.add(vert_i);
        }
        for (const posi_i of model.modeldata.geom.nav.navAnyToPosi(common_1.EEntType.PGON, pgon_i)) {
            posis_i.add(posi_i);
        }
    }
    for (const pline_i of plines_i) {
        for (const vert_i of model.modeldata.geom.nav.navAnyToVert(common_1.EEntType.PLINE, pline_i)) {
            verts_i.add(vert_i);
        }
        for (const posi_i of model.modeldata.geom.nav.navAnyToPosi(common_1.EEntType.PLINE, pline_i)) {
            posis_i.add(posi_i);
        }
    }
    return [Array.from(verts_i), Array.from(posis_i)];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9fb2JqLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYnMvZ2VvLWluZm8vaW8vaW9fb2JqLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHNDQUF1RztBQUV2RyxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztBQUVsQzs7R0FFRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxLQUFjLEVBQUUsT0FBZTtJQUNyRCxJQUFLLFFBT0o7SUFQRCxXQUFLLFFBQVE7UUFDVCw2QkFBaUIsQ0FBQTtRQUNqQiw0QkFBZ0IsQ0FBQTtRQUNoQiwrQkFBbUIsQ0FBQTtRQUNuQiw4QkFBa0IsQ0FBQTtRQUNsQiwyQkFBZSxDQUFBO1FBQ2YsMkJBQWUsQ0FBQTtJQUNuQixDQUFDLEVBUEksUUFBUSxLQUFSLFFBQVEsUUFPWjtJQUNELE1BQU0sU0FBUyxHQUFhLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkQsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFjLEVBQUUsQ0FBQztJQUM5QixNQUFNLFFBQVEsR0FBZSxFQUFFLENBQUM7SUFDaEMsTUFBTSxLQUFLLEdBQWlCLEVBQUUsQ0FBQztJQUMvQixNQUFNLE1BQU0sR0FBZSxFQUFFLENBQUM7SUFDOUIsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUUsRUFBRTtZQUM3QyxxQkFBcUI7U0FDeEI7YUFBTSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBRSxFQUFFO1lBQ2xELE1BQU0sS0FBSyxHQUFTLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENB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