import { EAttribNames, EEntType } from '../common';
const NOGROUPS = '---nogroups---';
/**
 * Import obj
 */
export function importObj(model, obj_str) {
    let EObjLine;
    (function (EObjLine) {
        EObjLine["OBJ_COMMENT"] = "#";
        EObjLine["OBJ_COORD"] = "v ";
        EObjLine["OBJ_TEXTURE"] = "vt ";
        EObjLine["OBJ_NORMAL"] = "vn ";
        EObjLine["OBJ_FACE"] = "f ";
        EObjLine["OBJ_LINE"] = "l ";
    })(EObjLine || (EObjLine = {}));
    const obj_lines = obj_str.split(/\r?\n/);
    const coords = [];
    const normals = [];
    const textures = [];
    const faces = [];
    const plines = [];
    for (const obj_line of obj_lines) {
        if (obj_line.startsWith(EObjLine.OBJ_COMMENT)) {
            // Do not do anything
        }
        else if (obj_line.startsWith(EObjLine.OBJ_COORD)) {
            const coord = obj_line.split(' ').slice(1, 4).map(v => parseFloat(v));
            coords.push(coord);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_TEXTURE)) {
            const normal = obj_line.split(' ').slice(1, 4).map(v => parseFloat(v));
            normals.push(normal);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_NORMAL)) {
            const texture = obj_line.split(' ').slice(1, 3).map(v => parseFloat(v));
            textures.push(texture);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_FACE)) {
            const face_strs = obj_line.split(' ').slice(1);
            const v_indexes = [];
            const t_indexes = [];
            const n_indexes = [];
            face_strs.forEach(face_str => {
                const face_sub_indexes = face_str.split('/').map(str => parseInt(str, 10) - 1);
                v_indexes.push(face_sub_indexes[0]);
                t_indexes.push(face_sub_indexes[1]);
                n_indexes.push(face_sub_indexes[2]);
            });
            faces.push([v_indexes, t_indexes, n_indexes]);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_LINE)) {
            const pline = obj_line.split(' ').slice(1).map(v => parseInt(v, 10) - 1);
            plines.push(pline);
        }
        else {
            console.log('Found unrecognised line of data in OBJ file');
        }
    }
    for (const coord of coords) {
        const posi_i = model.modeldata.geom.add.addPosi();
        model.modeldata.attribs.set.setEntAttribVal(EEntType.POSI, posi_i, EAttribNames.COORDS, coord);
    }
    for (const face of faces) {
        const face_i = model.modeldata.geom.add.addPgon(face[0]);
        // TODO: texture uv
        // TODO: normals
    }
    return model;
}
/**
 * Export to obj
 */
export function exportVertBasedObj(model, entities, ssid) {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib = model.modeldata.attribs.query.hasEntAttrib(EEntType.VERT, EAttribNames.COLOR);
    const has_normal_attrib = model.modeldata.attribs.query.hasEntAttrib(EEntType.VERT, EAttribNames.NORMAL);
    const has_texture_attrib = model.modeldata.attribs.query.hasEntAttrib(EEntType.VERT, EAttribNames.TEXTURE);
    // get the polgons, polylines, verts, posis
    const [pgons_i, plines_i] = _getPgonsPlines(model, entities, ssid);
    const [verts_i, posis_i] = _getVertsPosis(model, pgons_i, plines_i);
    // vertices, v
    const vert_i_to_obj_v = [];
    let num_v = 0;
    for (let i = 0; i < verts_i.length; i++) {
        const vert_i = verts_i[i];
        const coord = model.modeldata.attribs.posis.getVertCoords(vert_i);
        if (has_color_attrib) {
            let color = model.modeldata.attribs.get.getEntAttribVal(EEntType.VERT, vert_i, EAttribNames.COLOR);
            if (color === undefined) {
                color = [1, 1, 1];
            }
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + ' ' + color.map(c => c.toString()).join(' ') + '\n';
        }
        else {
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + '\n';
        }
        vert_i_to_obj_v[vert_i] = i;
        num_v += 1;
    }
    // textures, vt
    const [num_vt, vert_i_obj_vt, vt_str] = _getTexturesStr(model, verts_i, has_texture_attrib);
    // normals, vn
    const [num_vn, vert_i_obj_vn, vn_str] = _getNormalsStr(model, verts_i, has_normal_attrib);
    // polygons, f
    const [keys_pgons, map_colls_to_pgons] = _getGroups(model, EEntType.PGON, pgons_i);
    // polygons, f
    for (const key of keys_pgons) {
        const [names, group_pgons_i] = map_colls_to_pgons.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pgon_i of group_pgons_i) {
            const pgon_verts_i_outer = model.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i);
            // const verts_i_outer = verts_i[0];
            // TODO what about holes
            f_str += 'f ';
            for (const vert_i of pgon_verts_i_outer) {
                // v
                f_str += (1 + vert_i_to_obj_v[vert_i]);
                if (has_texture_attrib || has_normal_attrib) {
                    // vt
                    if (has_texture_attrib) {
                        // TODO ignore them for now
                        f_str += '/';
                    }
                    else {
                        f_str += '/';
                    }
                    // vn
                    if (has_normal_attrib && vert_i_obj_vn[vert_i] !== undefined) {
                        f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);
                    }
                    else {
                        f_str += '/';
                    }
                }
                f_str += ' ';
            }
            f_str += '\n';
        }
    }
    // polylines, l
    const [keys_plines, map_colls_to_plines] = _getGroups(model, EEntType.PLINE, plines_i);
    // process all the groups
    for (const key of keys_plines) {
        const [names, group_plines_i] = map_colls_to_plines.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pline_i of group_plines_i) {
            const pline_verts_i = model.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i);
            l_str += 'l ' + pline_verts_i.map(vert_i => (vert_i_to_obj_v[vert_i] + 1).toString()).join(' ') + '\n';
        }
    }
    // result
    return h_str + v_str + vt_str + vn_str + f_str + l_str;
}
/**
 * Export to obj
 */
export function exportPosiBasedObj(model, entities, ssid) {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib = model.modeldata.attribs.query.hasEntAttrib(EEntType.VERT, EAttribNames.COLOR);
    const has_normal_attrib = model.modeldata.attribs.query.hasEntAttrib(EEntType.VERT, EAttribNames.NORMAL);
    const has_texture_attrib = model.modeldata.attribs.query.hasEntAttrib(EEntType.VERT, EAttribNames.TEXTURE);
    // get the polgons, polylines, verts, posis
    const [pgons_i, plines_i] = _getPgonsPlines(model, entities, ssid);
    const [verts_i, posis_i] = _getVertsPosis(model, pgons_i, plines_i);
    // positions
    let num_v = 0;
    const posi_i_to_obj_v = [];
    for (let i = 0; i < posis_i.length; i++) {
        const posi_i = posis_i[i];
        const coord = model.modeldata.attribs.posis.getPosiCoords(posi_i);
        if (has_color_attrib) {
            // get the average color from the verts
            const posi_verts_i = model.modeldata.geom.nav.navPosiToVert(posi_i);
            let color = [0, 0, 0];
            for (const posi_vert_i of posi_verts_i) {
                let vert_color = model.modeldata.attribs.get.getEntAttribVal(EEntType.VERT, posi_vert_i, EAttribNames.COLOR);
                if (vert_color === undefined) {
                    vert_color = [1, 1, 1];
                }
                color = [color[0] + vert_color[0], color[1] + vert_color[1], color[2] + vert_color[2]];
            }
            const div = posi_verts_i.length;
            color = [color[0] / div, color[1] / div, color[2] / div];
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + ' ' + color.map(c => c.toString()).join(' ') + '\n';
        }
        else {
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + '\n';
        }
        posi_i_to_obj_v[posi_i] = i;
        num_v += 1;
    }
    // textures, vt
    const [num_vt, vert_i_obj_vt, vt_str] = _getTexturesStr(model, verts_i, has_texture_attrib);
    // normals, vn
    const [num_vn, vert_i_obj_vn, vn_str] = _getNormalsStr(model, verts_i, has_normal_attrib);
    // polygons, f
    const [keys_pgons, map_colls_to_pgons] = _getGroups(model, EEntType.PGON, pgons_i);
    // process all the groups
    for (const key of keys_pgons) {
        const [names, group_pgons_i] = map_colls_to_pgons.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pgon_i of group_pgons_i) {
            const pgon_verts_i_outer = model.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i);
            // const verts_i_outer = verts_i[0];
            // TODO what about holes
            f_str += 'f ';
            for (const vert_i of pgon_verts_i_outer) {
                // v
                f_str += (1 + posi_i_to_obj_v[model.modeldata.geom.nav.navVertToPosi(vert_i)]);
                if (has_texture_attrib || has_normal_attrib) {
                    // vt
                    if (has_texture_attrib && vert_i_obj_vt[vert_i] !== undefined) {
                        // TODO ignore them for now
                        f_str += '/';
                    }
                    else {
                        f_str += '/';
                    }
                    // vn
                    if (has_normal_attrib && vert_i_obj_vn[vert_i] !== undefined) {
                        f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);
                    }
                    else {
                        f_str += '/';
                    }
                }
                f_str += ' ';
            }
            f_str += '\n';
        }
    }
    // polylines, l
    const [keys_plines, map_colls_to_plines] = _getGroups(model, EEntType.PLINE, plines_i);
    // process all the groups
    for (const key of keys_plines) {
        const [names, group_plines_i] = map_colls_to_plines.get(key);
        if (key !== NOGROUPS) {
            f_str += 'g ' + names.join(' ') + '\n';
        }
        for (const pline_i of group_plines_i) {
            const pline_verts_i = model.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i);
            l_str += 'l ' + pline_verts_i.map(vert_i => (posi_i_to_obj_v[model.modeldata.geom.nav.navVertToPosi(vert_i)] + 1).toString()).join(' ') + '\n';
        }
    }
    // result
    return h_str + v_str + vt_str + vn_str + f_str + l_str;
}
/**
 * Get the textures
 */
function _getTexturesStr(model, verts_i, has_texture_attrib) {
    let vt_str = '';
    // textures, vt
    let num_vt = 0;
    const vert_i_obj_vt = []; // sparse array
    if (has_texture_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i = verts_i[i];
            const texture = model.modeldata.attribs.get.getEntAttribVal(EEntType.VERT, vert_i, EAttribNames.TEXTURE);
            if (texture !== undefined) {
                vt_str += 'vt ' + texture.map(v => v.toString()).join(' ') + '\n';
                vert_i_obj_vt[vert_i] = i;
                num_vt += 1;
            }
        }
    }
    return [num_vt, vert_i_obj_vt, vt_str];
}
/**
 * Get the normals
 */
function _getNormalsStr(model, verts_i, has_normal_attrib) {
    let vn_str = '';
    // normals, vn
    let num_vn = 0;
    const vert_i_obj_vn = []; // sparse array
    if (has_normal_attrib) {
        for (let i = 0; i < verts_i.length; i++) {
            const vert_i = verts_i[i];
            const normal = model.modeldata.attribs.get.getEntAttribVal(EEntType.VERT, vert_i, EAttribNames.NORMAL);
            if (normal !== undefined) {
                vn_str += 'vn ' + normal.map(v => v.toString()).join(' ') + '\n';
                vert_i_obj_vn[vert_i] = i;
                num_vn += 1;
            }
        }
    }
    return [num_vn, vert_i_obj_vn, vn_str];
}
/**
 * Get the groups
 */
function _getGroups(model, ent_type, ents_i) {
    const map_colls_to_ents = new Map();
    // check if the name attribut exists
    if (!model.modeldata.attribs.query.hasEntAttrib(EEntType.COLL, 'name')) {
        return [[NOGROUPS], map_colls_to_ents.set(NOGROUPS, [[], ents_i])];
    }
    // get the collections of each entity
    for (const ent_i of ents_i) {
        const colls_i = model.modeldata.geom.nav.navAnyToColl(ent_type, ent_i);
        const set_all_colls_i = new Set();
        for (const coll_i of colls_i) {
            set_all_colls_i.add(coll_i);
            for (const anc_coll_i of model.modeldata.geom.modeldata.geom.nav.navCollToCollAncestors(coll_i)) {
                set_all_colls_i.add(anc_coll_i);
            }
        }
        const names = model.modeldata.attribs.get.getEntAttribVal(EEntType.COLL, Array.from(set_all_colls_i), 'name');
        let key = NOGROUPS;
        if (names.length > 0) {
            names.sort();
            key = names.join('-');
        }
        if (!map_colls_to_ents.has(key)) {
            map_colls_to_ents.set(key, [names, []]);
        }
        map_colls_to_ents.get(key)[1].push(ent_i);
    }
    // make sure the ---nogroups--- key is first in the list
    let keys = Array.from(map_colls_to_ents.keys());
    const ng_i = keys.indexOf(NOGROUPS);
    if (ng_i > 0) {
        keys = keys.splice(ng_i, 1).splice(0, 0, NOGROUPS);
    }
    // return the keys arrays, and the map
    return [keys, map_colls_to_ents];
}
/**
 * Get all the polygons and polyline entities.
 */
function _getPgonsPlines(model, entities, ssid) {
    let pgons_i = [];
    let plines_i = [];
    if (entities === null) {
        pgons_i = model.modeldata.geom.snapshot.getEnts(ssid, EEntType.PGON);
        plines_i = model.modeldata.geom.snapshot.getEnts(ssid, EEntType.PLINE);
    }
    else {
        for (const [ent_type, ent_i] of entities) {
            if (ent_type === EEntType.PGON) {
                pgons_i.push(ent_i);
            }
            else if (ent_type === EEntType.PLINE) {
                plines_i.push(ent_i);
            }
            else if (ent_type === EEntType.COLL) {
                for (const pgon_i of model.modeldata.geom.nav.navAnyToPgon(EEntType.COLL, ent_i)) {
                    pgons_i.push(pgon_i);
                }
                for (const pline_i of model.modeldata.geom.nav.navAnyToPline(EEntType.COLL, ent_i)) {
                    plines_i.push(pline_i);
                }
            }
        }
    }
    return [pgons_i, plines_i];
}
/**
 * Get all the posis from the polygon and polyline entities.
 */
function _getVertsPosis(model, pgons_i, plines_i) {
    const posis_i = new Set();
    const verts_i = new Set();
    for (const pgon_i of pgons_i) {
        for (const vert_i of model.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i)) {
            verts_i.add(vert_i);
        }
        for (const posi_i of model.modeldata.geom.nav.navAnyToPosi(EEntType.PGON, pgon_i)) {
            posis_i.add(posi_i);
        }
    }
    for (const pline_i of plines_i) {
        for (const vert_i of model.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i)) {
            verts_i.add(vert_i);
        }
        for (const posi_i of model.modeldata.geom.nav.navAnyToPosi(EEntType.PLINE, pline_i)) {
            posis_i.add(posi_i);
        }
    }
    return [Array.from(verts_i), Array.from(posis_i)];
}
//# sourceMappingURL=data:application/json;base64,