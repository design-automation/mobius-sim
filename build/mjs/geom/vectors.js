import * as three from 'three';
import * as mathjs from 'mathjs';
const EPS = 1e-6;
//  Vectors using Txyz =======================================================================================================
export function vecEqual(v1, v2, tol) {
    if (Math.abs(v1[0] - v2[0]) > tol) {
        return false;
    }
    if (Math.abs(v1[1] - v2[1]) > tol) {
        return false;
    }
    if (Math.abs(v1[2] - v2[2]) > tol) {
        return false;
    }
    return true;
}
export function vecSub(v1, v2, norm = false) {
    const v3 = [
        v1[0] - v2[0],
        v1[1] - v2[1],
        v1[2] - v2[2],
    ];
    if (norm) {
        return vecNorm(v3);
    }
    return v3;
}
export function vecsSub(vecs, norm = false) {
    const vec_sub = [0, 0, 0];
    for (const vec of vecs) {
        vec_sub[0] = vec_sub[0] - vec[0];
        vec_sub[1] = vec_sub[1] - vec[1];
        vec_sub[2] = vec_sub[2] - vec[2];
    }
    if (norm) {
        return vecNorm(vec_sub);
    }
    return vec_sub;
}
export function vecAdd(v1, v2, norm = false) {
    const v3 = [
        v1[0] + v2[0],
        v1[1] + v2[1],
        v1[2] + v2[2],
    ];
    if (norm) {
        return vecNorm(v3);
    }
    return v3;
}
export function vecsAdd(vecs, norm = false) {
    const vec_add = [0, 0, 0];
    for (const vec of vecs) {
        vec_add[0] = vec_add[0] + vec[0];
        vec_add[1] = vec_add[1] + vec[1];
        vec_add[2] = vec_add[2] + vec[2];
    }
    if (norm) {
        return vecNorm(vec_add);
    }
    return vec_add;
}
export function vecSum(vecs, norm = false) {
    const vec_sum = [0, 0, 0];
    for (const vec of vecs) {
        vec_sum[0] += vec[0];
        vec_sum[1] += vec[1];
        vec_sum[2] += vec[2];
    }
    if (norm) {
        return vecNorm(vec_sum);
    }
    return vec_sum;
}
export function vecAvg(vecs) {
    const vec_sum = [0, 0, 0];
    for (const vec of vecs) {
        vec_sum[0] += vec[0];
        vec_sum[1] += vec[1];
        vec_sum[2] += vec[2];
    }
    const divisor = vecs.length;
    return [
        vec_sum[0] / divisor,
        vec_sum[1] / divisor,
        vec_sum[2] / divisor
    ];
}
export function vecDiv(vec, divisor) {
    return [
        vec[0] / divisor,
        vec[1] / divisor,
        vec[2] / divisor
    ];
}
export function vecMult(vec, multiplier) {
    return [
        vec[0] * multiplier,
        vec[1] * multiplier,
        vec[2] * multiplier
    ];
}
export function vecCross(v1, v2, norm = false) {
    const n = mathjs.cross(v1, v2);
    if (norm) {
        return vecNorm(n);
    }
    return n;
}
export function vecDot(v1, v2) {
    return mathjs.dot(v1, v2);
}
export function vecNorm(v) {
    const length = Math.hypot(...v);
    if (length === 0) {
        return [0, 0, 0];
    }
    return [v[0] / length, v[1] / length, v[2] / length];
}
export function vecRot(vec, axis, ang) {
    const vec_tjs = new three.Vector3(...vec);
    const axis_tjs = new three.Vector3(...axis);
    vec_tjs.applyAxisAngle(axis_tjs, ang);
    return [vec_tjs.x, vec_tjs.y, vec_tjs.z];
}
export function vecAng(v1, v2) {
    const v1n = vecNorm(v1);
    const v2n = vecNorm(v2);
    const d = mathjs.dot(v1n, v2n);
    const ang = d <= -1 ? Math.PI : d >= 1 ? 0 : Math.acos(d);
    return ang;
}
export function vecAng2(v1, v2, n) {
    const v1n = vecNorm(v1);
    const v2n = vecNorm(v2);
    const d = mathjs.dot(v1n, v2n);
    if (d >= 1) {
        return 0;
    }
    else if (d <= -1) {
        return Math.PI;
    }
    let angle = Math.acos(d);
    const c = mathjs.cross(v1n, v2n);
    angle = angle * mathjs.compare(mathjs.dot(n, c), 0);
    if (angle < 0) {
        angle = angle + (Math.PI * 2);
    }
    return angle;
}
export function vecLen(v) {
    return Math.hypot(...v);
}
export function vecSetLen(v, len) {
    const fac = len / Math.hypot(...v);
    return [v[0] * fac, v[1] * fac, v[2] * fac];
}
export function vecRev(v) {
    return [
        v[0] * -1,
        v[1] * -1,
        v[2] * -1
    ];
}
export function vecFromTo(v1, v2) {
    return vecSub(v2, v1);
}
export function vecMakeOrtho(v1, v2) {
    return vecCross(v2, vecCross(v1, v2));
}
export function vecCodir(v1, v2) {
    v1 = vecNorm(v1);
    v2 = vecNorm(v2);
    if (Math.abs(1 - mathjs.dot(v1, v2)) > EPS) {
        return false;
    }
    return true;
}
export function dist(p1, p2) {
    return mathjs.distance(p1, p2);
}
/**
 * Finds the normal to a set of points using Newell's method
 */
export function newellNorm(pts) {
    const normal = [0, 0, 0];
    for (let i = 0; i < pts.length - 1; i++) {
        const p0 = pts[i];
        const p1 = pts[i + 1];
        normal[0] += (p0[1] - p1[1]) * (p0[2] + p1[2]);
        normal[1] += (p0[2] - p1[2]) * (p0[0] + p1[0]);
        normal[2] += (p0[0] - p1[0]) * (p0[1] + p1[1]);
    }
    return vecNorm(normal);
}
/**
 * Create new points between two points.
 */
export function interpByNum(pt1, pt2, num_points) {
    if (num_points < 1) {
        return [];
    }
    const sub_vec = vecDiv(vecSub(pt2, pt1), num_points + 1);
    const points = [];
    let next = pt1;
    for (let i = 0; i < num_points; i++) {
        next = vecAdd(next, sub_vec);
        points.push(next);
    }
    return points;
}
export function interpByLen(pt1, pt2, len) {
    const vec = vecSub(pt2, pt1);
    const num_points = Math.floor(vecLen(vec) / len);
    const sub_vec = vecMult(vecNorm(vec), len);
    const points = [];
    let next = pt1;
    for (let i = 0; i < num_points; i++) {
        next = vecAdd(next, sub_vec);
        points.push(next);
    }
    return points;
}
//# sourceMappingURL=data:application/json;base64,