"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDim2 = exports.isDim1 = exports.isDim0 = exports.isObj = exports.isTopo = exports.getEntIdxs = exports.idsBreak = exports.idBreak = exports.idsMakeFromIdxs = exports.idsMake = exports.idMake = void 0;
const common_1 = require("./common");
// global variables to store ID mappings
const ID_MAP = new Map();
const ID_REV_MAP = new Map();
ID_REV_MAP.set(common_1.EEntType.POSI, new Map());
ID_REV_MAP.set(common_1.EEntType.VERT, new Map());
ID_REV_MAP.set(common_1.EEntType.EDGE, new Map());
ID_REV_MAP.set(common_1.EEntType.WIRE, new Map());
ID_REV_MAP.set(common_1.EEntType.POINT, new Map());
ID_REV_MAP.set(common_1.EEntType.PLINE, new Map());
ID_REV_MAP.set(common_1.EEntType.PGON, new Map());
ID_REV_MAP.set(common_1.EEntType.COLL, new Map());
// ============================================================================
function idMake(ent_type, ent_i) {
    const id = ID_REV_MAP.get(ent_type).get(ent_i);
    if (id !== undefined) {
        return id;
    }
    const new_id = common_1.EEntTypeStr[ent_type] + ent_i;
    ID_MAP.set(new_id, [ent_type, ent_i]);
    ID_REV_MAP.get(ent_type).set(ent_i, new_id);
    return new_id;
}
exports.idMake = idMake;
function idsMake(ents) {
    if (!Array.isArray(ents[0])) {
        if (ents.length === 0) {
            return [];
        } //  deal with empty array
        return idMake(ents[0], ents[1]);
    }
    else {
        ents = ents;
        return ents.map(ent_type_idxs_arr => idsMake(ent_type_idxs_arr));
    }
}
exports.idsMake = idsMake;
function idsMakeFromIdxs(ent_type, idxs) {
    if (!Array.isArray(idxs)) {
        return idMake(ent_type, idxs);
    }
    else {
        idxs = idxs;
        if (idxs.length === 0) {
            return [];
        } //  deal with empty array
        return idxs.map(idx => idsMakeFromIdxs(ent_type, idx));
    }
}
exports.idsMakeFromIdxs = idsMakeFromIdxs;
// ============================================================================
function idBreak(id) {
    const ent = ID_MAP.get(id);
    if (ent === undefined) {
        throw new Error('The entity ID "' + id + '" is not a valid entity ID.');
    }
    return ent;
}
exports.idBreak = idBreak;
function idsBreak(id) {
    if (id === null) {
        return null;
    }
    if (!Array.isArray(id)) {
        return idBreak(id);
    }
    else {
        return id.map(a_id => idsBreak(a_id));
    }
}
exports.idsBreak = idsBreak;
// ============================================================================
function getEntIdxs(ents_arr) {
    return ents_arr.map(ents => ents[1]);
}
exports.getEntIdxs = getEntIdxs;
// ============================================================================
// more general test
function isTopo(ent_type) {
    if (ent_type === common_1.EEntType.VERT) {
        return true;
    }
    if (ent_type === common_1.EEntType.EDGE) {
        return true;
    }
    if (ent_type === common_1.EEntType.WIRE) {
        return true;
    }
    return false;
}
exports.isTopo = isTopo;
function isObj(ent_type) {
    if (ent_type === common_1.EEntType.PGON) {
        return true;
    }
    if (ent_type === common_1.EEntType.PLINE) {
        return true;
    }
    if (ent_type === common_1.EEntType.POINT) {
        return true;
    }
    return false;
}
exports.isObj = isObj;
function isDim0(ent_type) {
    if (ent_type === common_1.EEntType.POSI) {
        return true;
    }
    if (ent_type === common_1.EEntType.VERT) {
        return true;
    }
    if (ent_type === common_1.EEntType.POINT) {
        return true;
    }
    return false;
}
exports.isDim0 = isDim0;
function isDim1(ent_type) {
    if (ent_type === common_1.EEntType.EDGE) {
        return true;
    }
    if (ent_type === common_1.EEntType.PLINE) {
        return true;
    }
    return false;
}
exports.isDim1 = isDim1;
function isDim2(ent_type) {
    if (ent_type === common_1.EEntType.PGON) {
        return true;
    }
    return false;
}
exports.isDim2 = isDim2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX2lkX2Z1bmNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGlicy9nZW8taW5mby9jb21tb25faWRfZnVuY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW1FO0FBRW5FLHdDQUF3QztBQUN4QyxNQUFNLE1BQU0sR0FBa0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUN4RCxNQUFNLFVBQVUsR0FBcUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUMvRCxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMxQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMxQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMxQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMxQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMzQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMzQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUMxQyxVQUFVLENBQUMsR0FBRyxDQUFDLGlCQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUUsQ0FBQztBQUUxQywrRUFBK0U7QUFDL0UsU0FBZ0IsTUFBTSxDQUFDLFFBQWtCLEVBQUUsS0FBYTtJQUNwRCxNQUFNLEVBQUUsR0FBUSxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRCxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7UUFBRSxPQUFPLEVBQUUsQ0FBQztLQUFFO0lBQ3BDLE1BQU0sTUFBTSxHQUFRLG9CQUFXLENBQUMsUUFBb0IsQ0FBQyxHQUFHLEtBQVksQ0FBQztJQUNyRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBUEQsd0JBT0M7QUFDRCxTQUFnQixPQUFPLENBQUMsSUFBK0M7SUFDbkUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDekIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUFFLE9BQU8sRUFBRSxDQUFDO1NBQUUsQ0FBQyx5QkFBeUI7UUFDL0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBYSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQVcsQ0FBUSxDQUFDO0tBQ2hFO1NBQU07UUFDSCxJQUFJLEdBQUcsSUFBcUIsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFhLENBQUM7S0FDakY7QUFDTCxDQUFDO0FBUkQsMEJBUUM7QUFDRCxTQUFnQixlQUFlLENBQUMsUUFBa0IsRUFBRSxJQUFnQztJQUNoRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN0QixPQUFPLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBYyxDQUFDLENBQUM7S0FDM0M7U0FBTTtRQUNILElBQUksR0FBRyxJQUFnQixDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFLENBQUMseUJBQXlCO1FBQy9ELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQVcsQ0FBQztLQUNyRTtBQUNMLENBQUM7QUFSRCwwQ0FRQztBQUNELCtFQUErRTtBQUMvRSxTQUFnQixPQUFPLENBQUMsRUFBTztJQUMzQixNQUFNLEdBQUcsR0FBZ0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QyxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQyxDQUFDO0tBQUU7SUFDbkcsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBSkQsMEJBSUM7QUFDRCxTQUFnQixRQUFRLENBQUMsRUFBK0I7SUFDcEQsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7S0FBRTtJQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNwQixPQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN0QjtTQUFNO1FBQ0gsT0FBUSxFQUFZLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFtQixDQUFDO0tBQ3ZFO0FBQ0wsQ0FBQztBQVBELDRCQU9DO0FBQ0QsK0VBQStFO0FBQy9FLFNBQWdCLFVBQVUsQ0FBQyxRQUF1QjtJQUM5QyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztBQUMzQyxDQUFDO0FBRkQsZ0NBRUM7QUFDRCwrRUFBK0U7QUFDL0Usb0JBQW9CO0FBQ3BCLFNBQWdCLE1BQU0sQ0FBQyxRQUFrQjtJQUNyQyxJQUFJLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDaEQsSUFBSSxRQUFRLEtBQUssaUJBQVEsQ0FBQyxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQ2hELElBQUksUUFBUSxLQUFLLGlCQUFRLENBQUMsSUFBSSxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7S0FBRTtJQUNoRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBTEQsd0JBS0M7QUFDRCxTQUFnQixLQUFLLENBQUMsUUFBa0I7SUFDcEMsSUFBSSxRQUFRLEtBQUssaUJBQVEsQ0FBQyxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQ2hELElBQUksUUFBUSxLQUFLLGlCQUFRLENBQUMsS0FBSyxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7S0FBRTtJQUNqRCxJQUFJLFFBQVEsS0FBSyxpQkFBUSxDQUFDLEtBQUssRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDakQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUxELHNCQUtDO0FBQ0QsU0FBZ0IsTUFBTSxDQUFDLFFBQWtCO0lBQ3JDLElBQUksUUFBUSxLQUFLLGlCQUFRLENBQUMsSUFBSSxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7S0FBRTtJQUNoRCxJQUFJLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDaEQsSUFBSSxRQUFRLEtBQUssaUJBQVEsQ0FBQyxLQUFLLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQ2pELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFMRCx3QkFLQztBQUNELFNBQWdCLE1BQU0sQ0FBQyxRQUFrQjtJQUNyQyxJQUFJLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDaEQsSUFBSSxRQUFRLEtBQUssaUJBQVEsQ0FBQyxLQUFLLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQ2pELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFKRCx3QkFJQztBQUNELFNBQWdCLE1BQU0sQ0FBQyxRQUFrQjtJQUNyQyxJQUFJLFFBQVEsS0FBSyxpQkFBUSxDQUFDLElBQUksRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDaEQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUhELHdCQUdDIn0=